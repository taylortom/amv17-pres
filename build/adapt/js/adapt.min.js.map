{
  "version": 3,
  "sources": [
    "core/js/models/lockingModel.js",
    "core/js/wait.js",
    "core/js/adapt.js",
    "core/js/adaptCollection.js",
    "core/js/startController.js",
    "core/js/enums/logLevelEnum.js",
    "core/js/logging.js",
    "core/js/models/adaptModel.js",
    "core/js/models/articleModel.js",
    "core/js/models/blockModel.js",
    "core/js/models/configModel.js",
    "core/js/models/contentObjectModel.js",
    "core/js/models/componentModel.js",
    "core/js/models/courseModel.js",
    "core/js/enums/buttonStateEnum.js",
    "core/js/models/questionModel.js",
    "core/js/views/navigationView.js",
    "core/js/views/accessibilityView.js",
    "core/js/accessibility.js",
    "core/js/offlineStorage.js",
    "core/js/device.js",
    "core/js/views/drawerView.js",
    "core/js/drawer.js",
    "core/js/views/notifyView.js",
    "core/js/views/notifyPushView.js",
    "core/js/models/notifyModel.js",
    "core/js/notify.js",
    "core/js/popupManager.js",
    "core/js/models/routerModel.js",
    "core/js/views/adaptView.js",
    "core/js/views/blockView.js",
    "core/js/views/articleView.js",
    "core/js/views/pageView.js",
    "core/js/router.js",
    "core/js/helpers.js",
    "core/js/views/componentView.js",
    "components/adapt-contrib-accordion/js/adapt-contrib-accordion.js",
    "components/adapt-contrib-blank/js/adapt-contrib-blank.js",
    "components/adapt-contrib-graphic/js/adapt-contrib-graphic.js",
    "components/adapt-contrib-media/js/adapt-contrib-media.js",
    "components/adapt-contrib-narrative/js/adapt-contrib-narrative.js",
    "components/adapt-contrib-text/js/adapt-contrib-text.js",
    "components/adapt-typist/libraries/jquery.typist.min.js",
    "components/adapt-typist/js/adapt-typist.js",
    "extensions/adapt-contrib-pageLevelProgress/js/completionCalculations.js",
    "extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressMenuView.js",
    "extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView.js",
    "extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView.js",
    "extensions/adapt-contrib-pageLevelProgress/js/adapt-contrib-pageLevelProgress.js",
    "extensions/adapt-contrib-resources/js/adapt-contrib-resourcesView.js",
    "extensions/adapt-contrib-resources/js/adapt-contrib-resourcesHelpers.js",
    "extensions/adapt-contrib-resources/js/adapt-contrib-resources.js",
    "extensions/adapt-contrib-trickle/js/trickleView.js",
    "extensions/adapt-contrib-trickle/js/pageView.js",
    "extensions/adapt-contrib-trickle/js/lib/adaptModelExtension.js",
    "extensions/adapt-contrib-trickle/js/handlers/buttonView.js",
    "extensions/adapt-contrib-trickle/js/handlers/button.js",
    "extensions/adapt-contrib-trickle/js/handlers/completion.js",
    "extensions/adapt-contrib-trickle/js/handlers/notify.js",
    "extensions/adapt-contrib-trickle/js/handlers/resize.js",
    "extensions/adapt-contrib-trickle/js/handlers/tutor.js",
    "extensions/adapt-contrib-trickle/js/handlers/visibility.js",
    "extensions/adapt-contrib-trickle/js/handlers/done.js",
    "extensions/adapt-contrib-trickle/js/adapt-contrib-trickle.js",
    "extensions/adapt-contrib-tutor/js/adapt-contrib-tutor.js",
    "core/js/views/menuView.js",
    "menu/adapt-contrib-boxMenu/js/adapt-contrib-boxmenu.js",
    "theme/adapt-theme-community-master/js/presentation.js",
    "plugins.js",
    "core/js/app.js"
  ],
  "names": [],
  "mappingshhtdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChzjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACfziBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvhvSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACppzhxldrWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxrrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC7RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC9KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACntIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChllHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxh
  "file": "adapt.min.js",
  "sourcesContent": [
    "define('core/js/models/lockingModel',[],function() {\n\n\tvar set = Backbone.Model.prototype.set;\n\n\t_.extend(Backbone.Model.prototype, {\n\n\t\tset: function(attrName, attrVal, options) {\n\t\t\tvar stopProcessing = !this.lockedAttributes || typeof attrName === \"object\" || typeof attrVal !== \"boolean\" || !this.isLocking(attrName);\n\t\t\tif (stopProcessing) return set.apply(this, arguments);\n\t\t\t\n\t\t\toptions = options || {};\n\n\t\t\tvar isSettingValueForSpecificPlugin = options && options.pluginName;\n\t\t\tif (!isSettingValueForSpecificPlugin) {\n\t\t\t\tconsole.error(\"Must supply a pluginName to change a locked attribute\");\n\t\t\t\toptions.pluginName = \"compatibility\";\n\t\t\t}\n\n\t\t\tvar pluginName  = options.pluginName;\n\t\t\tif (this.defaults[attrName] !== undefined) {\n\t\t\t\tthis.lockedAttributes[attrName] = !this.defaults[attrName];\n\t\t\t}\n\t\t\tvar lockingValue = this.lockedAttributes[attrName];\n\t\t\tvar isAttemptingToLock = (lockingValue === attrVal);\n\n\t\t\tif (isAttemptingToLock) {\n\n\t\t\t\tthis.setLockState(attrName, true, {pluginName:pluginName, skipcheck: true});\n\n\t\t\t\t//console.log(options.pluginName, \"locking\", attrName, \"on\", this.get(\"_id\"));\n\t\t\t\treturn set.call(this, attrName, lockingValue);\n\n\t\t\t}\n\n\t\t\tthis.setLockState(attrName, false, {pluginName:pluginName, skipcheck: true});\n\n\t\t\tvar totalLockValue = this.getLockCount(attrName, {skipcheck: true});\n\t\t\t//console.log(options.pluginName, \"attempting to unlock\", attrName, \"on\", this.get(\"_id\"), \"lockValue\", totalLockValue, this._lockedAttributesValues[attrName]);\n\t\t\tif (totalLockValue === 0) {\n\t\t\t\t//console.log(options.pluginName, \"unlocking\", attrName, \"on\", this.get(\"_id\"));\n\t\t\t\treturn set.call(this, attrName, !lockingValue);\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLocking: function(attrName, defaultLockValue) {\n\t\t\tif (this.isLocking(attrName)) return;\n\t\t\tif (!this.lockedAttributes) this.lockedAttributes = {};\n\t\t\tthis.lockedAttributes[attrName] = defaultLockValue;\n\t\t},\n\n\t\tunsetLocking: function(attrName) {\n\t\t\tif (!this.isLocking(attrName)) return;\n\t\t\tif (!this.lockedAttributes) return;\n\t\t\tdelete this.lockedAttributes[attrName];\n\t\t\tdelete this._lockedAttributesValues[attrName];\n\t\t\tif (_.keys(this.lockedAttributes).length === 0) {\n\t\t\t\tdelete this.lockedAttributes;\n\t\t\t\tdelete this._lockedAttributesValues;\n\t\t\t}\n\t\t},\n\n\t\tisLocking: function(attrName) {\n\t\t\tvar isCheckingGeneralLockingState = (attrName === undefined);\n\t\t\tvar isUsingLockedAttributes = (this.lockedAttributes !== undefined);\n\n\t\t\tif (isCheckingGeneralLockingState) {\n\t\t\t\treturn isUsingLockedAttributes;\n\t\t\t}\n\n\t\t\tif (!isUsingLockedAttributes) return false;\n\n\t\t\tvar isAttributeALockingAttribute = this.lockedAttributes[attrName] !== undefined;\n\t\t\tif (!isAttributeALockingAttribute) return false;\n\n\t\t\tif (this._lockedAttributesValues === undefined) {\n\t\t\t\tthis._lockedAttributesValues = {};\n\t\t\t}\n\n\t\t\tif (this._lockedAttributesValues[attrName] === undefined) {\n\t\t\t\tthis._lockedAttributesValues[attrName] = {};\t\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\tisLocked: function(attrName, options) {\n\t\t\tvar shouldSkipCheck = (options && options.skipcheck);\n\t\t\tif (!shouldSkipCheck) { \n\t\t\t\tvar stopProcessing =  !this.isLocking(attrName);\n\t\t\t\tif (stopProcessing) return;\n\t\t\t}\n\n\t\t\treturn this.getLockCount(attrName) > 0;\n\t\t},\n\n\t\tgetLockCount: function(attrName, options) {\n\t\t\tvar shouldSkipCheck = (options && options.skipcheck);\n\t\t\tif (!shouldSkipCheck) { \n\t\t\t\tvar stopProcessing =  !this.isLocking(attrName);\n\t\t\t\tif (stopProcessing) return;\n\t\t\t}\n\n\t\t\tvar isGettingValueForSpecificPlugin = options && options.pluginName;\n\t\t\tif (isGettingValueForSpecificPlugin) {\n\n\t\t\t\treturn this._lockedAttributesValues[attrName][options.pluginName] ? 1 : 0;\n\t\t\t}\n\n\t\t\tvar lockingAttributeValues = _.values(this._lockedAttributesValues[attrName]);\n\t\t\tvar lockingAttributeValuesSum = _.reduce(lockingAttributeValues, function(sum, value){ return sum + (value ? 1 : 0); }, 0);\n\t\t\t\n\t\t\treturn lockingAttributeValuesSum;\n\t\t},\n\n\t\tsetLockState: function(attrName, value, options) {\n\t\t\tvar shouldSkipCheck = (options && options.skipcheck);\n\t\t\tif (!shouldSkipCheck) { \n\t\t\t\tvar stopProcessing =  !this.isLocking(attrName);\n\t\t\t\tif (stopProcessing) return this;\n\t\t\t}\n\n\t\t\tvar isSettingValueForSpecificPlugin = options && options.pluginName;\n\t\t\tif (!isSettingValueForSpecificPlugin) {\n\t\t\t\tconsole.error(\"Must supply a pluginName to set a locked attribute lock value\");\n\t\t\t\toptions.pluginName = \"compatibility\";\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tthis._lockedAttributesValues[attrName][options.pluginName] = value;\n\t\t\t} else {\n\t\t\t\tdelete this._lockedAttributesValues[attrName][options.pluginName];\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t});\n\n});\n\n",
    "define('core/js/wait',[],function() {\n\n     var Wait = Backbone.Controller.extend({\n\n        initialize: function() {\n            _.bindAll(this, \"begin\", \"end\");\n        },\n\n        _waitCount: 0,\n        _callbackHandle: null,\n\n        /**\n         * Returns true if there are items in the waiting count.\n         * \n         * @return {Boolean}\n         */\n        isWaiting: function() {\n            return (this._waitCount !== 0);\n        },\n\n        /**\n         * Add one item to the waiting count.\n         * \n         * @return {Object}\n         */\n        begin: function() {\n\n            if (!this.isWaiting()) {\n                this.trigger(\"wait\");\n            }\n\n            this._waitCount++;\n\n            if (this._callbackHandle) {\n                clearTimeout(this._callbackHandle);\n                this._callbackHandle = null;\n            }\n\n            return this;\n\n        },\n\n        /**\n         * Remove an item from the waiting count and trigger ready asynchronously if no more items are waiting.\n         * \n         * @return {Object}\n         */\n        end: function() {\n\n            if (!this.isWaiting()) {\n                return this;\n            }\n\n            this._waitCount--;\n\n            if (this.isWaiting()) {\n                return this;\n            }\n            \n            if (this._callbackHandle) {\n                return this;\n            }\n\n            this._callbackHandle = setTimeout(function() {\n\n                this._callbackHandle = null;\n                this.trigger(\"ready\");\n\n            }.bind(this), 0);\n\n            return this;\n\n        },\n\n        /**\n         * Queue this function until all open waits have been ended.\n         * \n         * @param  {Function} callback\n         * @return {Object}\n         */\n        queue: function(callback) {\n\n            this.begin();\n            this.once(\"ready\", callback);\n            this.end();\n\n            return this;\n\n        },\n\n        /**\n         * Wait for this asynchonous function to execute before triggering ready event.\n         * \n         * @param  {Function} callback   [ Function to execute whilst holding queued callback. Once complete run first argiument, done(). ]\n         * @return {Object}\n         */\n        for: function(callback) {\n\n            this.begin();\n            _.defer(function() {\n                callback(this.end);\n            }.bind(this));\n\n            return this;\n\n        }\n\n    });\n\n    return Wait;\n\n});\n",
    "define('core/js/adapt',[\n    'core/js/models/lockingModel',\n    'core/js/wait'\n], function(lockingModel, Wait) {\n\n    var AdaptModel = Backbone.Model.extend({\n\n        defaults: {\n            _canScroll: true, //to stop scrollTo behaviour,\n            _outstandingCompletionChecks: 0,\n            _pluginWaitCount:0,\n            _isStarted: false\n        },\n\n        lockedAttributes: {\n            _canScroll: false\n        },\n\n        initialize: function () {\n            this.setupWait();\n        },\n\n        //call when entering an asynchronous completion check\n        checkingCompletion: function() {\n            var outstandingChecks = this.get(\"_outstandingCompletionChecks\");\n            this.set(\"_outstandingCompletionChecks\", ++outstandingChecks);\n        },\n\n        //call when exiting an asynchronous completion check\n        checkedCompletion: function() {\n            var outstandingChecks = this.get(\"_outstandingCompletionChecks\");\n            this.set(\"_outstandingCompletionChecks\", --outstandingChecks);\n        },\n\n        //wait until there are no outstanding completion checks\n        deferUntilCompletionChecked: function(callback) {\n\n            if (this.get(\"_outstandingCompletionChecks\") === 0) return callback();\n\n            var checkIfAnyChecksOutstanding = function(model, outstandingChecks) {\n                if (outstandingChecks !== 0) return;\n\n                Adapt.off(\"change:_outstandingCompletionChecks\", checkIfAnyChecksOutstanding);\n\n                callback();\n            };\n\n            Adapt.on(\"change:_outstandingCompletionChecks\", checkIfAnyChecksOutstanding);\n\n        },\n\n        setupWait: function() {\n            \n            this.wait = new Wait();\n\n            // Setup legcay events and handlers\n            var beginWait = function () {\n                Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.begin() as Adapt.trigger('plugin:beginWait') may be removed in the future\");\n                this.wait.begin();\n            }.bind(this);\n\n            var endWait = function() {\n                Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.end() as Adapt.trigger('plugin:endWait') may be removed in the future\");\n                this.wait.end();\n            }.bind(this);\n\n            var ready = function() {\n\n                if (this.wait.isWaiting()) {\n                    return;\n                }\n\n                var isEventListening = (this._events['plugins:ready']);\n                if (!isEventListening) {\n                    return;\n                }\n\n                Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.queue(callback) as Adapt.on('plugins:ready', callback) may be removed in the future\");\n                this.trigger('plugins:ready');\n\n            }.bind(this);\n\n            this.listenTo(this.wait, \"ready\", ready);\n            this.listenTo(this, {\n                'plugin:beginWait': beginWait,\n                'plugin:endWait': endWait\n            });\n\n        },\n\n        isWaitingForPlugins:function() {\n            Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.isWaiting() as Adapt.isWaitingForPlugins() may be removed in the future\");\n            return this.wait.isWaiting();\n        },\n\n        checkPluginsReady:function() {\n            Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.isWaiting() as Adapt.checkPluginsReady() may be removed in the future\");\n            if (this.isWaitingForPlugins()) {\n                return;\n            }\n            this.trigger('plugins:ready');\n        }\n\n    });\n\n    var Adapt = new AdaptModel();\n\n    Adapt.location = {};\n    Adapt.componentStore = {};\n    Adapt.mappedIds = {};\n\n    Adapt.initialize = _.once(function() {\n\n        //wait until no more completion checking \n        Adapt.deferUntilCompletionChecked(function() {\n\n            //start adapt in a full restored state\n            Adapt.trigger('adapt:start');\n            Backbone.history.start();\n            Adapt.set(\"_isStarted\", true);\n\n            Adapt.trigger('adapt:initialize');\n\n        });\n\n    });\n\n    Adapt.scrollTo = function(selector, settings) {\n        // Get the current location - this is set in the router\n        var location = (Adapt.location._contentType) ?\n            Adapt.location._contentType : Adapt.location._currentLocation;\n        // Trigger initial scrollTo event\n        Adapt.trigger(location+':scrollTo', selector);\n        //Setup duration variable passed upon arguments\n        var settings = (settings || {});\n        var disableScrollToAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n        if (disableScrollToAnimation) {\n            settings.duration = 0;\n        }\n        else if (!settings.duration) {\n            settings.duration = $.scrollTo.defaults.duration;\n        }\n\n        var offsetTop = -$(\".navigation\").outerHeight();\n        // prevent scroll issue when component description aria-label coincident with top of component\n        if (Adapt.config.get('_accessibility')._isActive &&\n            $(selector).hasClass('component')) {\n            offsetTop -= $(selector).find('.aria-label').height() || 0;\n        }\n\n        if (!settings.offset) settings.offset = { top: offsetTop, left: 0 };\n        if (settings.offset.top === undefined) settings.offset.top = offsetTop;\n        if (settings.offset.left === undefined) settings.offset.left = 0;\n\n        if (settings.offset.left === 0) settings.axis = \"y\";\n\n        if (Adapt.get(\"_canScroll\") !== false) {\n            // Trigger scrollTo plugin\n            $.scrollTo(selector, settings);\n        }\n\n        // Trigger an event after animation\n        // 300 milliseconds added to make sure queue has finished\n        _.delay(function() {\n            $(selector).a11y_focus();\n            Adapt.trigger(location+':scrolledTo', selector);\n        }, settings.duration+300);\n\n    };\n\n    Adapt.navigateToElement = function(selector, settings) {\n        // Allows a selector to be passed in and Adapt will navigate to this element\n\n        // Setup settings object\n        var settings = (settings || {});\n\n        // Removes . symbol from the selector to find the model\n        var currentModelId = selector.replace(/\\./g, '');\n        var currentModel = Adapt.findById(currentModelId);\n        // Get current page to check whether this is the current page\n        var currentPage = (currentModel._siblings === 'contentObjects') ? currentModel : currentModel.findAncestor('contentObjects');\n\n        // If current page - scrollTo element\n        if (currentPage.get('_id') === Adapt.location._currentId) {\n           return Adapt.scrollTo(selector, settings);\n        }\n\n        // If the element is on another page navigate and wait until pageView:ready is fired\n        // Then scrollTo element\n        Adapt.once('pageView:ready', function() {\n            _.defer(function() {\n                Adapt.scrollTo(selector, settings);\n            });\n        });\n\n        var shouldReplaceRoute = settings.replace || false;\n\n        Backbone.history.navigate('#/id/' + currentPage.get('_id'), {trigger: true, replace: shouldReplaceRoute});\n    };\n\n    Adapt.register = function(name, object) {\n        // Used to register components\n        // Store the component view\n        if (Adapt.componentStore[name])\n            throw Error('This component already exists in your project');\n\n        if (object.view) {\n            //use view+model object\n            if(!object.view.template) object.view.template = name;\n        } else {\n            //use view object\n            if(!object.template) object.template = name;\n        }\n        \n        Adapt.componentStore[name] = object;\n\n        return object;\n    };\n\n    // Used to map ids to collections\n    Adapt.setupMapping = function() {\n        // Clear any existing mappings.\n        Adapt.mappedIds = {};\n\n        // Setup course Id\n        Adapt.mappedIds[Adapt.course.get('_id')] = \"course\";\n\n        // Setup each collection\n        var collections = [\"contentObjects\", \"articles\", \"blocks\", \"components\"];\n\n        for (var i = 0, len = collections.length; i < len; i++) {\n            var collection = collections[i];\n            var models = Adapt[collection].models;\n            for (var j = 0, lenj = models.length; j < lenj; j++) {\n                var model = models[j];\n                Adapt.mappedIds[model.get('_id')] = collection;\n\n            }\n        }\n\n    };\n\n    Adapt.mapById = function(id) {\n        // Returns collection name that contains this models Id\n        return Adapt.mappedIds[id];\n    };\n\n    Adapt.findById = function(id) {\n\n        // Return a model\n        // Checks if the Id passed in is the course Id\n        if (id === Adapt.course.get('_id')) {\n            return Adapt.course;\n        }\n\n        var collectionType = Adapt.mapById(id);\n\n        if (!collectionType) {\n            console.warn('Adapt.findById() unable to find collection type for id: ' + id);\n            return;\n        }\n\n        return Adapt[collectionType]._byAdaptID[id][0];\n\n    };\n\n    Adapt.remove = function() {\n        Adapt.trigger('preRemove');\n        Adapt.trigger('remove');\n        _.defer(function() {\n            Adapt.trigger('postRemove');\n        });\n    };\n\n    return Adapt;\n\n});\n\n",
    "define('core/js/adaptCollection',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var AdaptCollection = Backbone.Collection.extend({\n        initialize : function(models, options){\n            this.url = options.url;\n\n            this.once('reset', this.loadedData, this);\n            if (this.url) {\n                this.fetch({\n                    reset:true,\n                    error: _.bind(function(model, xhr, options) {\n                        console.error(\"ERROR: unable to load file \" + this.url);\n                    }, this)\n                });\n            }\n        },\n\n        loadedData: function() {\n            Adapt.trigger('adaptCollection:dataLoaded');\n        }\n\n    });\n\n    return AdaptCollection;\n\n});\n\n",
    "define('core/js/startController',[\n    'core/js/adapt'\n], function(Adapt) {\n    \n    var StartController = Backbone.Controller.extend({\n\n        model: null,\n\n        initialize: function() {\n            this.model = new Backbone.Model(Adapt.course.get(\"_start\"));\n        },\n\n        setStartLocation: function() {\n            if (!this.isEnabled()) return;\n            window.history.replaceState('', '', this.getStartHash());\n        },\n\n        getStartHash: function(alwaysForce) {\n            var startId = this.getStartId();\n\n            var hasStartId = (startId)\n                ? true\n                : false;\n\n            var isRouteSpecified = (_.indexOf(window.location.href,\"#\") > -1);\n            var shouldForceStartId = alwaysForce || this.model.get(\"_force\");\n            var shouldNavigateToStartId = hasStartId && (!isRouteSpecified || shouldForceStartId);\n\n            var startHash = \"#/\";\n            if (shouldNavigateToStartId) {\n                if (startId !== Adapt.course.get(\"_id\")) {\n                    startHash = \"#/id/\"+startId;\n                }\n            } else {\n                //go to specified route or course main menu\n                var hasLocationHash = (window.location.hash)\n                    ? true\n                    : false;\n\n                startHash = hasLocationHash ? window.location.hash : startHash;\n            }\n\n            return startHash;\n        },\n\n        isEnabled: function() {\n            if (!this.model || !this.model.get(\"_isEnabled\")) return false;\n            return true;\n        },\n\n        getStartId: function() {\n            var startId = this.model.get(\"_id\");\n            var startIds = this.model.get(\"_startIds\");\n            var $html = $(\"html\");\n            \n            var hasStartIdsConfiguration = (startIds && startIds.length > 0);\n            if (hasStartIdsConfiguration) {\n                for (var i = 0, l =  startIds.length; i < l; i++) {\n                    var item = startIds[i];\n                    var className =  item._className;\n                    var skipIfComplete = item._skipIfComplete;\n                    \n                    var model = Adapt.findById(item._id);\n                    \n                    if (!model) {\n                        console.log(\"startController: cannot find id\", item._id);\n                        continue;\n                    }\n                    \n                    if (skipIfComplete) {\n                        if (model.get(\"_isComplete\")) continue;\n                    }\n\n                    if (!className || $html.is(className) || $html.hasClass(className)) {\n                        startId = item._id;\n                        break;\n                    }\n                }\n            }\n\n            return startId;\n        }\n\n    });\n\n    Adapt.once(\"adapt:start\", function() {\n        var startController = new StartController();\n        startController.setStartLocation();\n    });\n\n    return StartController;\n\n});\n\n",
    "define('core/js/enums/logLevelEnum',[],function() {\n\n    // Used to determine if log call should be printed based on log level\n    var LOG_LEVEL = ENUM([\n        \"DEBUG\",\n        \"INFO\",\n        \"WARN\",\n        \"ERROR\",\n        \"FATAL\"\n    ]);\n\n    return LOG_LEVEL;\n\n});\n",
    "define('core/js/logging',[\n    'core/js/adapt',\n    'core/js/enums/logLevelEnum'\n], function(Adapt, LOG_LEVEL) {\n\n    var Logging = Backbone.Controller.extend({\n\n        _config: {\n            _isEnabled: true,\n            _level: LOG_LEVEL.INFO.asLowerCase, // Default log level\n            _console: true // Log to console\n        },      \n        \n        initialize: function() {\n\n            Adapt.once('configModel:loadCourseData', this.onLoadCourseData.bind(this));\n\n        },\n        \n        onLoadCourseData: function() {\n\n            this.loadConfig();\n\n            this.debug('Logging config loaded');\n\n            this.trigger('log:ready');\n\n        },\n\n        loadConfig: function() {\n\n            if (Adapt.config.has('_logging')) {\n                this._config = Adapt.config.get('_logging');\n            }\n\n            this.checkQueryStringOverride();\n\n        },\n\n        checkQueryStringOverride: function() {\n\n            // Override default log level with level present in query string\n            var matches = window.location.search.match(/[?&]loglevel=([a-z]*)/i);\n            if (!matches || matches.length < 2) return;\n\n            var override = LOG_LEVEL(matches[1].toUpperCase());\n            if (!override) return;\n\n            this._config._level = override.asLowerCase;\n            this.debug('Loglevel override in query string:', this._config._level);\n            \n        },\n        \n        debug: function() {            \n            this._log(LOG_LEVEL.DEBUG, Array.prototype.slice.call(arguments));\n        },\n        \n        info: function() {\n            this._log(LOG_LEVEL.INFO, Array.prototype.slice.call(arguments));\n        },\n        \n        warn: function() {\n            this._log(LOG_LEVEL.WARN, Array.prototype.slice.call(arguments));\n        },\n        \n        error: function() {\n            this._log(LOG_LEVEL.ERROR, Array.prototype.slice.call(arguments));\n        },\n        \n        fatal: function() {\n            this._log(LOG_LEVEL.FATAL, Array.prototype.slice.call(arguments));\n        },\n        \n        _log: function(level, data) {\n\n            var isEnabled = (this._config._isEnabled);\n            if (!isEnabled) return;\n\n            var configLevel = LOG_LEVEL(this._config._level.toUpperCase());\n\n            var isLogLevelAllowed = (level >= configLevel);\n            if (!isLogLevelAllowed) return;\n\n            this._logToConsole(level, data);\n\n            // Allow error reporting plugins to hook and report to logging systems\n            this.trigger('log', level, data);\n            this.trigger('log:' + level.asLowerCase, level, data);\n\n        },\n\n        _logToConsole: function(level, data) {\n\n            var shouldLogToConsole = (this._config._console);\n            if (!shouldLogToConsole) return;\n\n            var log = [level.asUpperCase + ':'];\n            data && log.push.apply(log, data);\n\n            // is there a matching console method we can use e.g. console.error()?\n            if(console[level.asLowerCase]) {\n                console[level.asLowerCase].apply(console, log);\n            } else {\n                console.log.apply(console, log);\n            }\n        }\n\n    });\n\n    Adapt.log = new Logging();\n});\n\n",
    "define('core/js/models/adaptModel',[\n    'core/js/adapt',\n    'core/js/logging'\n], function (Adapt) {\n\n    var AdaptModel = Backbone.Model.extend({\n\n        defaults: {\n            _canShowFeedback: true,\n            _classes: \"\",\n            _canReset: false,\n            _isComplete: false,\n            _isInteractionComplete: false,\n            _requireCompletionOf: -1,\n            _isEnabled: true,\n            _isResetOnRevisit: false,\n            _isAvailable: true,\n            _isOptional: false,\n            _isReady: false,\n            _isVisible: true,\n            _isLocked: false,\n            _isHidden: false\n        },\n\n        trackable: [\n            '_id',\n            '_isComplete',\n            '_isInteractionComplete'\n        ],\n\n        initialize: function () {\n            // Wait until data is loaded before setting up model\n            this.listenToOnce(Adapt, 'app:dataLoaded', this.setupModel);\n\n        },\n\n        setupModel: function() {\n            if (this.get('_type') === 'page') {\n                this._children = 'articles';\n            }\n            if (this._siblings === 'contentObjects' && this.get('_parentId') !== Adapt.course.get('_id')) {\n                this._parent = 'contentObjects';\n            }\n            if (this._children) {\n                //if parent is optional, apply to children\n                if (this.get('_isOptional')) this.setOptional(true);\n\n                this.setupChildListeners();\n            }\n\n            this.init();\n\n            _.defer(_.bind(function() {\n                if (this._children) {\n                    this.checkCompletionStatus();\n\n                    this.checkInteractionCompletionStatus();\n\n                    this.checkLocking();\n                }\n\n                this.setupTrackables();\n\n            }, this));\n\n        },\n\n        setupTrackables: function() {\n\n            // Limit state trigger calls and make state change callbacks batched-asynchronous\n            var originalTrackableStateFunction = this.triggerTrackableState;\n            this.triggerTrackableState = _.compose(\n                _.bind(function() {\n\n                    // Flag that the function is awaiting trigger\n                    this.triggerTrackableState.isQueued = true;\n\n                }, this),\n                _.debounce(_.bind(function() {\n                    \n                    // Trigger original function\n                    originalTrackableStateFunction.apply(this);\n\n                    // Unset waiting flag\n                    this.triggerTrackableState.isQueued = false;\n\n                }, this), 17)\n            );\n\n            // Listen to model changes, trigger trackable state change when appropriate\n            this.listenTo(this, \"change\", function(model, value) {\n\n                // Skip if trigger queued or adapt hasn't started yet\n                if (this.triggerTrackableState.isQueued || !Adapt.attributes._isStarted) {\n                    return;\n                }\n\n                // Check that property is trackable\n                var trackablePropertyNames = _.result(this, 'trackable', []);\n                var changedPropertyNames = _.keys(model.changed);\n                var isTrackable = _.find(changedPropertyNames, function(item, index) {\n                     return _.contains(trackablePropertyNames, item);\n                }.bind(this));\n\n                if (isTrackable) {\n                    // Trigger trackable state change\n                    this.triggerTrackableState();\n                }\n\n            });\n\n        },\n\n        setupChildListeners: function() {\n            var children = this.getChildren();\n            if (!children.length) {\n                return;\n            }\n\n            this.listenTo(children, {\n                \"change:_isReady\": this.checkReadyStatus,\n                \"change:_isComplete\": this.onIsComplete,\n                \"change:_isInteractionComplete\": this.checkInteractionCompletionStatus\n            });\n        },\n\n        init: function() {},\n\n        getTrackableState: function() {\n\n            var trackable = this.resultExtend(\"trackable\", []);\n            var json = this.toJSON();\n\n            var args = trackable;\n            args.unshift(json);\n\n            return _.pick.apply(_, args);\n\n        },\n\n        setTrackableState: function(state) {\n\n            var trackable = this.resultExtend(\"trackable\", []);\n\n            var args = trackable;\n            args.unshift(state);\n\n            state = _.pick.apply(_, args);\n\n            this.set(state);\n\n            return this;\n\n        },\n\n        triggerTrackableState: function() {\n            \n            Adapt.trigger(\"state:change\", this, this.getTrackableState());\n            \n        },\n\n        reset: function(type, force) {\n            if (!this.get(\"_canReset\") && !force) return;\n\n            type = type || true;\n\n            switch (type) {\n            case \"hard\": case true:\n                this.set({\n                    _isEnabled: true,\n                    _isComplete: false,\n                    _isInteractionComplete: false\n                });\n                break;\n            case \"soft\":\n                this.set({\n                    _isEnabled: true,\n                    _isInteractionComplete: false\n                });\n                break;\n            }\n        },\n\n        checkReadyStatus: function () {\n            // Filter children based upon whether they are available\n            // Check if any return _isReady:false\n            // If not - set this model to _isReady: true\n            var children = this.getAvailableChildModels();\n            if (_.find(children, function(child) { return child.get('_isReady') === false; })) {\n                return;\n            }\n\n            this.set({_isReady: true});\n        },\n\n        setCompletionStatus: function() {\n            if (this.get('_isVisible')) {\n                this.set('_isComplete', true);\n                this.set('_isInteractionComplete', true);\n            }\n        },\n\n        checkCompletionStatus: function () {\n            //defer to allow other change:_isComplete handlers to fire before cascading to parent\n            Adapt.checkingCompletion();\n            _.defer(_.bind(this.checkCompletionStatusFor, this, \"_isComplete\"));\n        },\n\n        checkInteractionCompletionStatus: function () {\n            //defer to allow other change:_isInteractionComplete handlers to fire before cascading to parent\n            Adapt.checkingCompletion();\n            _.defer(_.bind(this.checkCompletionStatusFor, this, \"_isInteractionComplete\"));\n        },\n\n        /**\n         * Function for checking whether the supplied completion attribute should be set to true or false. \n         * It iterates over our immediate children, checking the same completion attribute on any mandatory child\n         * to see if enough/all of them them have been completed. If enough/all have, we set our attribute to true; \n         * if not, we set it to false.\n         * @param {string} [completionAttribute] Either \"_isComplete\" or \"_isInteractionComplete\". Defaults to \"_isComplete\" if not supplied.\n         */        \n        checkCompletionStatusFor: function(completionAttribute) {\n            if (!completionAttribute) completionAttribute = \"_isComplete\";\n\n            var completed = false;\n            var children = this.getAvailableChildModels();\n            var requireCompletionOf = this.get(\"_requireCompletionOf\");\n\n            if (requireCompletionOf === -1) { // a value of -1 indicates that ALL mandatory children must be completed\n                completed = (_.find(children, function(child) {\n                    return !child.get(completionAttribute) && !child.get('_isOptional');\n                }) === undefined);\n            } else {\n                completed = (_.filter(children, function(child) {\n                    return child.get(completionAttribute) && !child.get('_isOptional');\n                }).length >= requireCompletionOf);\n            }\n\n            this.set(completionAttribute, completed);\n\n            Adapt.checkedCompletion();\n        },\n\n        findAncestor: function (ancestors) {\n\n            var parent = this.getParent();\n\n            if (this._parent === ancestors) {\n                return parent;\n            }\n\n            var returnedAncestor = parent.getParent();\n\n            if (parent._parent !== ancestors) {\n                returnedAncestor = returnedAncestor.getParent();\n            }\n\n            // Returns a single model\n            return returnedAncestor;\n\n        },\n\n        findDescendantModels: function(descendants) {\n            var children = this.getChildren().models;\n\n            // first check if descendant is child and return child\n            if (this._children === descendants) {\n                return children;\n            }\n\n            var allDescendants = [];\n            var flattenedDescendants;\n            var returnedDescendants;\n\n            function searchChildren(models) {\n                for (var i = 0, len = models.length; i < len; i++) {\n                    var model = models[i];\n                    allDescendants.push(model.getChildren().models);\n                    flattenedDescendants = _.flatten(allDescendants);\n                }\n\n                returnedDescendants = flattenedDescendants;\n\n                if (models.length === 0 || models[0]._children === descendants) {\n                    return;\n                } else {\n                    allDescendants = [];\n                    searchChildren(returnedDescendants);\n                }\n            }\n\n            searchChildren(children);\n\n            return returnedDescendants;\n        },\n\n        findDescendants: function (descendants) {\n            Adapt.log.warn(\"DEPRECATED - Use findDescendantModels() as findDescendants() may be removed in the future\");\n\n            // first check if descendant is child and return child\n            if (this._children === descendants) {\n                return this.getChildren();\n            }\n\n            var allDescendants = [];\n            var flattenedDescendants;\n            var children = this.getChildren();\n            var returnedDescendants;\n\n            function searchChildren(children) {\n                var models = children.models;\n                for (var i = 0, len = models.length; i < len; i++) {\n                    var model = models[i];\n                    var childrensModels = model.getChildren().models;\n                    allDescendants.push(childrensModels);\n                    flattenedDescendants = _.flatten(allDescendants);\n                }\n\n                returnedDescendants = new Backbone.Collection(flattenedDescendants);\n\n                if (children.models.length === 0 || children.models[0]._children === descendants) {\n                    return;\n                } else {\n                    allDescendants = [];\n                    searchChildren(returnedDescendants);\n                }\n            }\n\n            searchChildren(children);\n\n            // returns a collection of children\n            return returnedDescendants;\n        },\n\n        getChildren: function () {\n            if (this.get(\"_children\")) return this.get(\"_children\");\n\n            var childrenCollection;\n\n            if (!this._children) {\n                childrenCollection = new Backbone.Collection();\n            } else {\n                var children = Adapt[this._children].where({_parentId: this.get(\"_id\")});\n                childrenCollection = new Backbone.Collection(children);\n            }\n\n            if (this.get('_type') == 'block' && childrenCollection.length == 2\n                && childrenCollection.models[0].get('_layout') !== 'left' && this.get('_sortComponents') !== false) {\n                // Components may have a 'left' or 'right' _layout,\n                // so ensure they appear in the correct order\n                // Re-order component models to correct it\n                childrenCollection.comparator = '_layout';\n                childrenCollection.sort();\n            }\n\n            this.set(\"_children\", childrenCollection);\n\n            // returns a collection of children\n            return childrenCollection;\n        },\n\n        getAvailableChildModels: function() {\n            return this.getChildren().where({\n                _isAvailable: true\n            });\n        },\n\n        getAvailableChildren: function() {\n            Adapt.log.warn(\"DEPRECATED - Use getAvailableChildModels() as getAvailableChildren() may be removed in the future\");\n\n            return new Backbone.Collection(this.getChildren().where({\n                _isAvailable: true\n            }));\n        },\n\n        getParent: function () {\n            if (this.get(\"_parent\")) return this.get(\"_parent\");\n            if (this._parent === \"course\") {\n                return Adapt.course;\n            }\n            var parent = Adapt.findById(this.get(\"_parentId\"));\n            this.set(\"_parent\", parent);\n\n            // returns a parent model\n            return parent;\n        },\n\n        getAncestorModels: function(shouldIncludeChild) {\n            var parents = [];\n            var context = this;\n\n            if (shouldIncludeChild) parents.push(context);\n\n            while (context.has(\"_parentId\")) {\n                context = context.getParent();\n                parents.push(context);\n            }\n\n            return parents.length ? parents : null;\n        },\n\n        getParents: function(shouldIncludeChild) {\n            Adapt.log.warn(\"DEPRECATED - Use getAncestorModels() as getParents() may be removed in the future\");\n\n            var parents = [];\n            var context = this;\n\n            if (shouldIncludeChild) parents.push(context);\n\n            while (context.has(\"_parentId\")) {\n                context = context.getParent();\n                parents.push(context);\n            }\n\n            return parents.length ? new Backbone.Collection(parents) : null;\n        },\n\n        getSiblings: function (passSiblingsAndIncludeSelf) {\n            var siblings;\n            if (!passSiblingsAndIncludeSelf) {\n                // returns a collection of siblings excluding self\n                if (this._hasSiblingsAndSelf === false) {\n                    return this.get(\"_siblings\");\n                }\n                siblings = _.reject(Adapt[this._siblings].where({\n                    _parentId: this.get(\"_parentId\")\n                }), _.bind(function (model) {\n                    return model.get('_id') == this.get('_id');\n                }, this));\n\n                this._hasSiblingsAndSelf = false;\n\n            } else {\n                // returns a collection of siblings including self\n                if (this._hasSiblingsAndSelf) {\n                    return this.get(\"_siblings\");\n                }\n\n                siblings = Adapt[this._siblings].where({\n                    _parentId: this.get(\"_parentId\")\n                });\n                this._hasSiblingsAndSelf = true;\n            }\n\n            var siblingsCollection = new Backbone.Collection(siblings);\n            this.set(\"_siblings\", siblingsCollection);\n            return siblingsCollection;\n        },\n\n        setOnChildren: function (key, value, options) {\n\n            var args = arguments;\n\n            this.set.apply(this, args);\n\n            if (!this._children) return;\n\n            var children = this.getChildren();\n            var models = children.models;\n            for (var i = 0, len = models.length; i < len; i++) {\n                var child = models[i];\n                child.setOnChildren.apply(child, args);\n            }\n\n        },\n\n        setOptional: function(value) {\n            this.set({_isOptional: value});\n        },\n\n        checkLocking: function() {\n            var lockType = this.get(\"_lockType\");\n\n            if (!lockType) return;\n\n            switch (lockType) {\n                case \"sequential\":\n                    this.setSequentialLocking();\n                    break;\n                case \"unlockFirst\":\n                    this.setUnlockFirstLocking();\n                    break;\n                case \"lockLast\":\n                    this.setLockLastLocking();\n                    break;\n                case \"custom\":\n                    this.setCustomLocking();\n                    break;\n                default:\n                    console.warn(\"AdaptModel.checkLocking: unknown _lockType \\\"\" +\n                        lockType + \"\\\" found on \" + this.get(\"_id\"));\n            }\n        },\n\n        setSequentialLocking: function() {\n            var children = this.getAvailableChildModels();\n\n            for (var i = 1, j = children.length; i < j; i++) {\n                children[i].set(\"_isLocked\", !children[i - 1].get(\"_isComplete\"));\n            }\n        },\n\n        setUnlockFirstLocking: function() {\n            var children = this.getAvailableChildModels();\n            var isFirstChildComplete = children[0].get(\"_isComplete\");\n\n            for (var i = 1, j = children.length; i < j; i++) {\n                children[i].set(\"_isLocked\", !isFirstChildComplete);\n            }\n        },\n\n        setLockLastLocking: function() {\n            var children = this.getAvailableChildModels();\n            var lastIndex = children.length - 1;\n\n            for (var i = lastIndex - 1; i >= 0; i--) {\n                if (!children[i].get(\"_isComplete\")) {\n                    return children[lastIndex].set(\"_isLocked\", true);\n                }\n            }\n\n            children[lastIndex].set(\"_isLocked\", false);\n        },\n\n        setCustomLocking: function() {\n            var children = this.getAvailableChildModels();\n\n            for (var i = 0, j = children.length; i < j; i++) {\n                var child = children[i];\n\n                child.set(\"_isLocked\", this.shouldLock(child));\n            }\n        },\n\n        shouldLock: function(child) {\n            var lockedBy = child.get(\"_lockedBy\");\n\n            if (!lockedBy) return false;\n\n            for (var i = lockedBy.length - 1; i >= 0; i--) {\n                var id = lockedBy[i];\n\n                try {\n                    var model = Adapt.findById(id);\n\n                    if (!model.get(\"_isAvailable\")) continue;\n                    if (!model.get(\"_isComplete\")) return true;\n                }\n                catch (e) {\n                    console.warn(\"AdaptModel.shouldLock: unknown _lockedBy ID \\\"\" + id +\n                        \"\\\" found on \" + child.get(\"_id\"));\n                }\n            }\n\n            return false;\n        },\n\n        onIsComplete: function() {\n            this.checkCompletionStatus();\n\n            this.checkLocking();\n        }\n\n    });\n\n    return AdaptModel;\n\n});\n\n",
    "define('core/js/models/articleModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\n    var ArticleModel = AdaptModel.extend({\n        _parent:'contentObjects',\n    \t_siblings:'articles',\n        _children: 'blocks'\n    });\n\n    return ArticleModel;\n\n});\n\n",
    "define('core/js/models/blockModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\t\n    var BlockModel = AdaptModel.extend({\n        _parent:'articles',\n    \t_siblings:'blocks',\n        _children: 'components',\n        \n        defaults: function() {\n            return _.extend({\n                _sortComponents: true\n            }, AdaptModel.prototype.defaults);\n        }\n    });\n\n    return BlockModel;\n\n});\n\n",
    "define('core/js/models/configModel',[\n    'core/js/adapt'\n], function (Adapt) {\n\n    var ConfigModel = Backbone.Model.extend({\n\n        defaults: {\n            screenSize : {\n                small: 520,\n                medium: 760,\n                large: 1024\n            },\n            _forceRouteLocking: false,\n            _canLoadData: true,\n            _disableAnimation: false\n        },\n\n        initialize: function(attrs, options) {\n            this.url = options.url;\n            // Fetch data & if successful trigger event to enable plugins to stop course files loading\n            // Then check if course files can load\n            // 'configModel:loadCourseData' event starts the core content collections and models being fetched\n            this.fetch({\n                success: _.bind(function() {\n                    Adapt.trigger('configModel:dataLoaded');\n                    if (this.get('_canLoadData')) {\n                        Adapt.trigger('configModel:loadCourseData');\n                    }\n                    if(this.get('_defaultDirection')=='rtl'){//We're going to use rtl style\n                    \t$('html').addClass('dir-rtl');\n                    }\n                    // check if animations should be disabled\n                    var disableAnimationArray = this.get('_disableAnimationFor');\n                    if (disableAnimationArray && disableAnimationArray.length > 0) {\n                        for (var i=0; i < disableAnimationArray.length; i++) {\n                            if ($(\"html\").is(disableAnimationArray[i])) {\n                                this.set('_disableAnimation', true);\n                                console.log('Animation disabled.');\n                            }\n                        }\n                    }\n                }, this),\n                error: function() {\n                    console.log('Unable to load course/config.json');\n                }\n            });\n        },\n\n        loadData: function() {\n\n        }\n\n    });\n\n   return ConfigModel;\n\n});\n\n",
    "define('core/js/models/contentObjectModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\n    var ContentObjectModel = AdaptModel.extend({\n    \t_parent:'course',\n    \t_siblings:'contentObjects',\n        _children: 'contentObjects'\n    });\n\n    return ContentObjectModel;\n});\n\n",
    "define('core/js/models/componentModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\n    var ComponentModel = AdaptModel.extend({\n        _parent:'blocks',\n        _siblings:'components',\n\n        trackable: AdaptModel.resultExtend(\"trackable\", [\n            '_userAnswer'\n        ])\n\n    });\n\n    return ComponentModel;\n\n});\n\n",
    "define('core/js/models/courseModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\n    var CourseModel = AdaptModel.extend({\n\n        initialize: function(attrs, options) {\n            AdaptModel.prototype.initialize.apply(this, arguments);\n            Adapt.trigger('courseModel:dataLoading');\n\n            this.url = options.url;\n\n            this.on('sync', this.loadedData, this);\n            if (this.url) {\n                this.fetch({\n                    error: _.bind(function(model, xhr, options) {\n                        console.error(\"ERROR: unable to load file \" + this.url);\n                    }, this)\n                });\n            }\n        },\n\n        loadedData: function() {\n            Adapt.trigger('courseModel:dataLoaded');\n        },\n\n        _children: \"contentObjects\"\n\n    });\n\n    return CourseModel;\n\n});\n\n",
    "define('core/js/enums/buttonStateEnum',[],function() {\n\n    var BUTTON_STATE = ENUM([\n        'SUBMIT',\n        'CORRECT',\n        'INCORRECT',\n        'SHOW_CORRECT_ANSWER',\n        'HIDE_CORRECT_ANSWER',\n        'SHOW_FEEDBACK',\n        'RESET'\n    ]);\n\n    return BUTTON_STATE;\n\n});\n",
    "define('core/js/models/questionModel',[\n    'core/js/adapt',\n    'core/js/models/componentModel',\n    'core/js/enums/buttonStateEnum'\n], function(Adapt, ComponentModel, BUTTON_STATE) {\n\n    var QuestionModel = ComponentModel.extend({\n\n        //////\n        // Setup question types\n        ////\n\n        // Used to set model defaults\n        defaults: function() {\n            // Extend from the ComponentModel defaults\n            return ComponentModel.resultExtend(\"defaults\", {\n                _isQuestionType: true,\n                _shouldDisplayAttempts: false,\n                _canShowModelAnswer: true,\n                _canShowFeedback: true,\n                _canShowMarking: true,\n                _isSubmitted: false,\n                _questionWeight: Adapt.config.get(\"_questionWeight\"),\n            });\n        },\n\n        // Extend from the ComponentModel trackable\n        trackable: ComponentModel.resultExtend(\"trackable\", [\n            '_isSubmitted',\n            '_score',\n            '_isCorrect',\n            '_attemptsLeft'\n        ]),\n\n        init: function() {\n            this.setupDefaultSettings();\n            this.listenToOnce(Adapt, \"adapt:initialize\", this.onAdaptInitialize);\n        },\n\n        // Calls default methods to setup on questions\n        setupDefaultSettings: function() {\n            // Not sure this is needed anymore, keeping to maintain API\n            this.setupWeightSettings();\n            this.setupButtonSettings();\n        },\n\n        // Used to setup either global or local button text\n        setupButtonSettings: function() {\n            var globalButtons = Adapt.course.get(\"_buttons\");\n\n            // Checks if local _buttons exists and if not use global\n            if (!this.has(\"_buttons\")) {\n                this.set(\"_buttons\", globalButtons);\n            } else {\n                // check all the components buttons\n                // if they are empty use the global default\n                var componentButtons = this.get(\"_buttons\");\n\n                if (typeof componentButtons.submit == 'undefined') {\n                    for (var key in componentButtons) {\n                        if (typeof componentButtons[key] == 'object') {\n                          // ARIA labels\n                          if (!componentButtons[key].buttonText && globalButtons[key].buttonText) {\n                            componentButtons[key].buttonText = globalButtons[key].buttonText;\n                          }\n\n                          if (!componentButtons[key].ariaLabel && globalButtons[key].ariaLabel) {\n                            componentButtons[key].ariaLabel = globalButtons[key].ariaLabel;\n                          }\n                        }\n\n                        if (!componentButtons[key] && globalButtons[key]) {\n                            componentButtons[key] = globalButtons[key];\n                        }\n                    }\n                } else {\n                    // Backwards compatibility with v1.x\n                    var buttons = [];\n\n                    for (var key in componentButtons) {\n                        var index = '_' + key;\n\n                        if (!componentButtons[key]) {\n                            buttons[index] = globalButtons[index];\n                        } else {\n                            buttons[index] = {\n                                buttonText: componentButtons[key],\n                                ariaLabel: componentButtons[key]\n                            };\n                        }\n                    }\n\n                    // HACK - Append other missing values\n                    buttons['_showFeedback'] = {\n                        buttonText: 'Show feedback',\n                        ariaLabel: 'Show feedback'\n                    };\n\n                    this.set('_buttons', buttons);\n                }\n            }\n        },\n\n        // Used to setup either global or local question weight/score\n        setupWeightSettings: function() {\n            // Not needed as handled by model defaults, keeping to maintain API\n        },\n\n        //////\n        // Selection restoration process\n        ////\n\n\n        // Used to add post-load changes to the model\n        onAdaptInitialize: function() {\n            this.restoreUserAnswers();\n        },\n\n        // Used to restore the user answers \n        restoreUserAnswers: function() {},\n\n        \n        //////\n        // Submit process\n        ////\n\n        // Use to check if the user is allowed to submit the question\n        // Maybe the user has to select an item?\n        canSubmit: function() {},\n\n        // Used to update the amount of attempts the user has left\n        updateAttempts: function() {\n            if (!this.get('_attemptsLeft')) {\n                this.set(\"_attemptsLeft\", this.get('_attempts'));\n            }\n            this.set(\"_attemptsLeft\", this.get('_attemptsLeft') - 1);\n        },\n\n        // Used to set _isEnabled and _isSubmitted on the model\n        setQuestionAsSubmitted: function() {\n            this.set({\n                _isEnabled: false,\n                _isSubmitted: true\n            });\n        },\n\n        // This is important for returning or showing the users answer\n        // This should preserve the state of the users answers\n        storeUserAnswer: function() {},\n\n        // Sets _isCorrect:true/false based upon isCorrect method below\n        markQuestion: function() {\n\n            if (this.isCorrect()) {\n                this.set('_isCorrect', true);\n            } else {\n                this.set('_isCorrect', false);\n            }\n\n        },\n\n         // Should return a boolean based upon whether to question is correct or not\n        isCorrect: function() {},\n\n        // Used to set the score based upon the _questionWeight\n        setScore: function() {},\n\n        // Checks if the question should be set to complete\n        // Calls setCompletionStatus and adds complete classes\n        checkQuestionCompletion: function() {\n\n            var isComplete = (this.get('_isCorrect') || this.get('_attemptsLeft') === 0);\n\n            if (isComplete) {\n                this.setCompletionStatus();\n            }\n\n            return isComplete;\n\n        },\n\n        // Updates buttons based upon question state by setting\n        // _buttonState on the model which buttonsView listens to\n        updateButtons: function() {\n\n            var isInteractionComplete = this.get('_isInteractionComplete');\n            var isCorrect = this.get('_isCorrect');\n            var isEnabled = this.get('_isEnabled');\n            var buttonState = this.get('_buttonState');\n            var canShowModelAnswer = this.get('_canShowModelAnswer');\n\n            if (isInteractionComplete) {\n\n                if (isCorrect || !canShowModelAnswer) {\n                    // Use correct instead of complete to signify button state\n                    this.set('_buttonState', BUTTON_STATE.CORRECT);\n\n                } else {\n\n                    switch (buttonState) {\n                        case BUTTON_STATE.SUBMIT:\n                        case BUTTON_STATE.HIDE_CORRECT_ANSWER:\n                            this.set('_buttonState', BUTTON_STATE.SHOW_CORRECT_ANSWER);\n                            break;\n                        default:\n                            this.set('_buttonState', BUTTON_STATE.HIDE_CORRECT_ANSWER);\n                    }\n\n                }\n\n            } else {\n\n                if (isEnabled) {\n                    this.set('_buttonState', BUTTON_STATE.SUBMIT);\n                } else {\n                    this.set('_buttonState', BUTTON_STATE.RESET);\n                }\n            }\n\n        },\n\n        // Used to setup the correct, incorrect and partly correct feedback\n        setupFeedback: function() {\n\n            if (this.get('_isCorrect')) {\n                this.setupCorrectFeedback();\n            } else if (this.isPartlyCorrect()) {\n                this.setupPartlyCorrectFeedback();\n            } else {\n                this.setupIncorrectFeedback();\n            }\n\n        },\n\n        // Used by the question to determine if the question is incorrect or partly correct\n        // Should return a boolean\n        isPartlyCorrect: function() {},\n\n        setupCorrectFeedback: function() {\n\n            this.set({\n                feedbackTitle: this.get('title'),\n                feedbackMessage: this.get(\"_feedback\") ? this.get(\"_feedback\").correct : \"\"\n            });\n\n        },\n\n        setupPartlyCorrectFeedback: function() {\n\n            if (this.get(\"_feedback\") && this.get('_feedback')._partlyCorrect) {\n                if (this.get('_attemptsLeft') === 0 || !this.get('_feedback')._partlyCorrect.notFinal) {\n                    if (this.get('_feedback')._partlyCorrect.final) {\n                        this.set({\n                            feedbackTitle: this.get('title'),\n                            feedbackMessage: this.get(\"_feedback\") ? this.get('_feedback')._partlyCorrect.final : \"\"\n                        });\n                    } else {\n                        this.setupIncorrectFeedback();\n                    }\n                } else {\n                    this.set({\n                        feedbackTitle: this.get('title'),\n                        feedbackMessage: this.get(\"_feedback\") ? this.get('_feedback')._partlyCorrect.notFinal : \"\"\n                    });\n                }\n            } else {\n                this.setupIncorrectFeedback();\n            }\n\n        },\n\n        setupIncorrectFeedback: function() {\n\n            if (this.get('_attemptsLeft') === 0 || this.get('_feedback') && !this.get('_feedback')._incorrect.notFinal) {\n                this.set({\n                    feedbackTitle: this.get('title'),\n                    feedbackMessage: this.get(\"_feedback\") ? this.get('_feedback')._incorrect.final : \"\"\n                });\n            } else {\n                this.set({\n                    feedbackTitle: this.get('title'),\n                    feedbackMessage: this.get(\"_feedback\") ? this.get('_feedback')._incorrect.notFinal : \"\"\n                });\n            }\n\n        },\n\n        // Reset the model to let the user have another go (not the same as attempts)\n        reset: function(type, force) {\n            if (!this.get(\"_canReset\") && !force) return;\n\n            type = type || true; //hard reset by default, can be \"soft\", \"hard\"/true\n\n            ComponentModel.prototype.reset.call(this, type, force);\n\n            var attempts = this.get('_attempts');\n            this.set({\n                _attemptsLeft: attempts,\n                _isCorrect: undefined,\n                _isSubmitted: false,\n                _buttonState: BUTTON_STATE.SUBMIT\n            });\n        },\n\n        // Reset question for subsequent attempts\n        setQuestionAsReset: function() {\n            this.set({\n                _isEnabled: true,\n                _isSubmitted: false\n            });\n        },\n\n        // Used by the question view to reset the stored user answer\n        resetUserAnswer: function() {},\n        \n        refresh: function() {\n            this.trigger('question:refresh');\n        },\n\n        getButtonState: function() {\n            if (this.get('_isCorrect')) {\n                return BUTTON_STATE.CORRECT;\n            }\n\n            if (this.get('_attemptsLeft') === 0) {\n                 return this.get('_canShowModelAnswer') ? BUTTON_STATE.SHOW_CORRECT_ANSWER : BUTTON_STATE.INCORRECT;\n            }\n\n            return this.get('_isSubmitted') ? BUTTON_STATE.RESET : BUTTON_STATE.SUBMIT;\n        },\n\n        // Returns an object specific to the question type, e.g. if the question\n        // is a 'choice' this should contain an object with:\n        // - correctResponsesPattern[]\n        // - choices[]\n        getInteractionObject: function() {\n            return {};\n        },\n\n        // Returns a string detailing how the user answered the question.\n        getResponse: function() {},\n\n        // Returns a string describing the type of interaction: \"choice\" and \"matching\" supported (see scorm wrapper)\n        getResponseType: function() {}\n\n    });\n\n    return QuestionModel;\n\n});\n",
    "define('core/js/views/navigationView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var NavigationView = Backbone.View.extend({\n\n        className: \"navigation\",\n\n        initialize: function() {\n            this.listenToOnce(Adapt, 'courseModel:dataLoading', this.remove);\n            this.listenTo(Adapt, 'router:menu router:page', this.hideNavigationButton);\n            this.template = \"navigation\";\n            this.preRender();\n        },\n\n        events: {\n            'click [data-event]':'triggerEvent'\n        },\n\n        preRender: function() {\n            Adapt.trigger('navigationView:preRender', this);\n            this.render();\n        },\n\n        render: function() {\n            var template = Handlebars.templates[this.template];\n            this.$el.html(template(\n                {\n                    _globals: Adapt.course.get(\"_globals\"),\n                    _accessibility: Adapt.config.get(\"_accessibility\")\n                }\n            )).insertBefore('#wrapper');\n\n            _.defer(_.bind(function() {\n                Adapt.trigger('navigationView:postRender', this);\n            }, this));\n            return this;\n        },\n\n        triggerEvent: function(event) {\n            event.preventDefault();\n            var currentEvent = $(event.currentTarget).attr('data-event');\n            Adapt.trigger('navigation:' + currentEvent);\n        },\n\n        hideNavigationButton: function(model) {\n            if (model.get('_type') === \"course\") {\n                $('.navigation-back-button, .navigation-home-button').addClass('display-none');\n            } else {\n                this.showNavigationButton();\n            }\n        },\n\n        showNavigationButton: function() {\n            $('.navigation-back-button, .navigation-home-button').removeClass('display-none');\n        }\n\n    });\n\n    return NavigationView;\n\n});\n\n",
    "define('core/js/views/accessibilityView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var AccessibilityView = Backbone.View.extend({\n\n        el: '#accessibility-toggle',\n\n        initialize: function() {\n            this.render();\n        },\n\n        events: {\n            'click' : 'toggleAccessibility'\n        },\n\n        render: function() {\n            var hasAccessibility = Adapt.config.has('_accessibility')\n                && Adapt.config.get('_accessibility')._isEnabled;\n\n            if (!hasAccessibility) {\n                return;\n            } else {\n                var isActive = Adapt.config.get('_accessibility')._isActive;\n                var offLabel = Adapt.course.get('_globals') && (Adapt.course.get('_globals')._accessibility.accessibilityToggleTextOff || Adapt.course.get('_globals')._accessibility._accessibilityToggleTextOff);\n                var onLabel = Adapt.course.get('_globals') && (Adapt.course.get('_globals')._accessibility.accessibilityToggleTextOn || Adapt.course.get('_globals')._accessibility._accessibilityToggleTextOn);\n\n                var toggleText = isActive ? offLabel : onLabel;\n\n                this.$el.html(toggleText).attr('aria-label', Adapt.course.get(\"title\") + \". \"\n                    + Adapt.course.get('_globals')._accessibility._ariaLabels.accessibilityToggleButton + \". \"\n                    + $.a11y_normalize(toggleText));\n            }\n        },\n\n        toggleAccessibility: function(event) {\n            event.preventDefault();\n\n            var hasAccessibility = Adapt.config.get('_accessibility')._isActive;\n\n            var toggleAccessibility = (hasAccessibility) ? false : true;\n\n            Adapt.config.get('_accessibility')._isActive = toggleAccessibility;\n\n            Adapt.trigger('accessibility:toggle');\n\n            this.render();\n\n            Backbone.history.navigate(window.location.hash || \"#/\", {trigger: true});\n        }\n\n    });\n\n    return AccessibilityView;\n\n});\n\n",
    "define('core/js/accessibility',[\n    'core/js/adapt',\n    'core/js/views/accessibilityView',\n    'a11y'\n], function(Adapt, AccessibilityView) {\n\n    var Accessibility = Backbone.Controller.extend({\n\n        $html: $('html'),\n        $accessibilityInstructions: $(\"#accessibility-instructions\"),\n        $accessibilityToggle: $(\"#accessibility-toggle\"),\n\n        _tabIndexElements: 'a, button, input, select, textarea, [tabindex]',\n        _isButtonRedirectionOn: true,\n        _hasUserTabbed: false,\n        _hasUsageInstructionRead: false,\n        _isLoaded: false,\n        _hasCourseLoaded: false,\n        _legacyFocusElements: undefined,\n\n        reset: function() {\n            _.extend(this, {\n                _isButtonRedirectionOn: true,\n                _hasUserTabbed: false,\n                _hasUsageInstructionRead: false\n            });\n        },\n\n        initialize: function() {\n            //RUN ONCE\n            if (this._isLoaded) return;\n\n            //TRIGGER SETUP ON DATA LOADED AND TOGGLE BUTTON\n            Adapt.once('app:dataLoaded', function() {\n                //check if accessibility mode should be restored\n                this._hasCourseLoaded = true;\n                Adapt.config.get(\"_accessibility\")._isActive = Adapt.offlineStorage.get(\"a11y\") || false;\n                this.setupAccessibility();\n\n            }, this);\n\n            Adapt.on('accessibility:toggle', this.setupAccessibility, this);\n\n            //SETUP RENDERING HELPERS\n            Adapt.once('app:dataLoaded', this.setupHelpers, this);\n            Adapt.once('app:dataLoaded', this.touchDeviceCheck, this);\n\n            //SETUP NEW VIEW FOR TOGGLE BUTTON\n            Adapt.once('app:dataReady', this.setupToggleButton, this);\n\n            //SETUP NO SELECT PARAMETERS ON DEVICE CHANGE\n            Adapt.on(\"device:changed\", this.setupNoSelect);\n\n            //Configure the accessibility library\n            this.listenToOnce(Adapt, \"app:dataReady\", this.configureA11yLibrary);\n\n            //CAPTURE ROUTING/NEW DOCUMENT LOADING START AND END\n            this.listenTo(Adapt, 'router:location', this.onNavigationStart);\n            this.listenTo(Adapt, 'pageView:ready menuView:ready router:plugin', this.onNavigationEnd);\n        },\n\n        setupAccessibility: function() {\n            //CALLED ON BUTTON CLICK AND ON DATA LOAD\n            if (!this.isEnabled()) return;\n\n            if (this._hasCourseLoaded && !Modernizr.touch) {\n                //save accessibility state\n                Adapt.offlineStorage.set(\"a11y\", Adapt.config.get(\"_accessibility\")._isActive);\n            }\n\n            this.reset();\n\n            this.checkTabCapture();\n\n            this.configureA11yLibrary();\n\n            this.touchDeviceCheck();\n\n            // Check if accessibility is active\n            if (this.isActive()) {\n                this.setupDocument();\n                this.setupLegacy();\n                this.setupPopupListeners();\n                this.setupUsageInstructions();\n                this.setupLogging();\n\n            } else {\n\n                this.revertDocument();\n                this.revertLegacy();\n                this.revertPopupListeners();\n                this.revertUsageInstructions();\n                this.revertLogging();\n\n            }\n\n        },\n\n        setupHelpers: function() {\n\n            //MAKE $.a11y_text and $.a11y_normalize IN GLOBAL HANDLEBARS HELPERS a11y_text and a11y_normalize\n            var config = Adapt.config.has('_accessibility')\n                ? Adapt.config.get(\"_accessibility\")\n                : false;\n\n            Handlebars.registerHelper('a11y_text', function(text) {\n                //ALLOW ENABLE/DISABLE OF a11y_text HELPER\n                if (config && config._isTextProcessorEnabled === false) {\n                    return text;\n                } else {\n                    return $.a11y_text(text);\n                }\n            });\n\n            Handlebars.registerHelper('a11y_normalize', function(text) {\n                return $.a11y_normalize(text);\n            });\n\n            Handlebars.registerHelper('a11y_aria_label', function(text) {\n                return '<div class=\"aria-label prevent-default\" tabindex=\"0\" role=\"region\">'+text+'</div>';\n            });\n\n            Handlebars.registerHelper('a11y_aria_label_relative', function(text) {\n                return '<div class=\"aria-label relative prevent-default\" tabindex=\"0\" role=\"region\">'+text+'</div>';\n            });\n\n            Handlebars.registerHelper('a11y_wrap_focus', function(text) {\n                return '<a id=\"a11y-focusguard\" class=\"a11y-ignore a11y-ignore-focus\" tabindex=\"0\" role=\"button\">&nbsp;</a>';\n            });\n\n            Handlebars.registerHelper('a11y_attrs_heading', function(level) {\n                return ' role=\"heading\" aria-level=\"'+level+'\" tabindex=\"0\" ';\n            });\n\n            Handlebars.registerHelper('a11y_attrs_tabbable', function() {\n                return ' role=\"region\" tabindex=\"0\" ';\n            });\n\n        },\n\n        setupToggleButton: function() {\n            if (this.isEnabled()) {\n                new AccessibilityView();\n            } else {\n                this.$accessibilityToggle.addClass(\"a11y-ignore\").a11y_cntrl_enabled(false);\n            }\n        },\n\n        setupNoSelect: function() {\n            if (!Adapt.config.get('_accessibility') || !Adapt.config.get('_accessibility')._disableTextSelectOnClasses) return;\n\n            var classes = Adapt.config.get('_accessibility')._disableTextSelectOnClasses.split(\" \");\n\n            var isMatch = false;\n            for (var i = 0, item; item = classes[i++];) {\n                if ($('html').is(item)) {\n                    isMatch = true;\n                    break;\n                }\n            }\n\n            if (isMatch) {\n                $('html').addClass(\"no-select\");\n            } else  {\n                $('html').removeClass(\"no-select\");\n            }\n\n        },\n\n        configureA11yLibrary: function() {\n\n            var topOffset = $('.navigation').height();\n            var bottomoffset = 0;\n            $.a11y.options.focusOffsetTop = topOffset;\n            $.a11y.options.focusOffsetBottom = bottomoffset;\n            $.a11y.options.OS = Adapt.device.OS.toLowerCase();\n            $.a11y.options.isTouchDevice = Modernizr.touch;\n\n            if (this.isActive()) {\n                _.extend($.a11y.options, {\n                    isTabbableTextEnabled: true,\n                    isUserInputControlEnabled: true,\n                    isFocusControlEnabled: true,\n                    isFocusLimited: true,\n                    isRemoveNotAccessiblesEnabled: true,\n                    isAriaLabelFixEnabled: true,\n                    isFocusWrapEnabled: true,\n                    isScrollDisableEnabled: true,\n                    isScrollDisabledOnPopupEnabled: false,\n                    isSelectedAlertsEnabled: true,\n                    isAlertsEnabled: true\n                });\n            } else {\n                _.extend($.a11y.options, {\n                    isTabbableTextEnabled: false,\n                    isUserInputControlEnabled: true,\n                    isFocusControlEnabled: true,\n                    isFocusLimited: false,\n                    isRemoveNotAccessiblesEnabled: true,\n                    isAriaLabelFixEnabled: true,\n                    isFocusWrapEnabled: true,\n                    isScrollDisableEnabled: true,\n                    isScrollDisabledOnPopupEnabled: false,\n                    isSelectedAlertsEnabled: false,\n                    isAlertsEnabled: false\n                });\n            }\n\n            this.setupNoSelect();\n\n            $.a11y.ready();\n\n            if (!this.isEnabled()) return;\n\n            //CAPTURE TAB PRESSES TO DIVERT\n            $('body').off('keyup', this.onKeyUp);\n            $('body').on('keyup', this.onKeyUp);\n        },\n\n        onNavigationStart: function() {\n            this._isLoaded = false;\n            this._hasUserTabbed = false;\n            //STOP DOCUMENT READING, MOVE FOCUS TO APPROPRIATE LOCATION\n            $(\"#a11y-focuser\").a11y_focus(true);\n            _.defer(function() {\n                $.a11y_on(false, '.page');\n                $.a11y_on(false, '.menu');\n            });\n        },\n\n        onNavigationEnd: function(view) {\n            //prevent sub-menu items provoking behaviour\n            if (view && view.model) {\n                if (view.model.get(\"_id\") != Adapt.location._currentId) return;\n            }\n\n            //always use detached aria labels for divs and spans\n            _.defer(function() {\n                $('body').a11y_aria_label(true);\n            });\n\n            this._isLoaded = true;\n\n            $.a11y_on(false, '.page');\n            $.a11y_on(false, '.menu');\n\n            this.configureA11yLibrary();\n            $.a11y_update();\n            this.setNavigationBar();\n\n            //MAKE FOCUS RIGHT\n            this._isButtonRedirectionOn = true;\n            _.delay(_.bind(function() {\n                this.focusInitial();\n            }, this), 500);\n\n        },\n\n        setNavigationBar: function() {\n            if (this.isActive()) {\n                $(\".navigation .aria-label\").attr(\"tabindex\", 0).removeAttr(\"aria-hidden\").removeClass(\"a11y-ignore\");\n            } else {\n                $(\".navigation .aria-label\").attr(\"tabindex\", -1).attr(\"aria-hidden\", \"true\");\n            }\n        },\n\n        touchDeviceCheck: function() {\n            //SCREEN READER DON@T USE TABBING\n            //FORCE ACCESSIBILITY ON TO RENDER NECESSARY STUFFS FOR TOUCH DEVICE SCREENREADERS\n            if (!this.isEnabled()) return;\n\n            if (Modernizr.touch) {\n                 //Remove button\n                this.$accessibilityToggle.remove();\n            }\n            \n            var config = Adapt.config.get(\"_accessibility\");\n            // Backwards compatibility for _isDisabledOnTouchDevices\n            var isEnabledOnTouchDevices = config._isEnabledOnTouchDevices || (config._isDisabledOnTouchDevices === false);\n            \n            if (!Modernizr.touch || this.isActive() || !isEnabledOnTouchDevices) return;\n\n            //If a touch device and not enabled, remove accessibility button and turn on accessibility\n\n            this._isLoaded = true;\n\n            //Force accessibility on\n            Adapt.config.get('_accessibility')._isEnabled = true;\n            Adapt.config.get('_accessibility')._isActive = true;\n\n            Adapt.trigger('accessibility:toggle', true);\n\n        },\n\n        checkTabCapture: function() {\n            if (!this._isLoaded) return;\n\n            var isActive = this.isActive();\n\n            $.a11y(isActive);\n\n            //IF ACCESSIBILTY TURNED ON QUIT\n            if (isActive) return;\n\n            //OTHERWISE ENABLE TAB REDIRECTION TO TOGGLE BUTTON\n            this._isButtonRedirectionOn = true;\n        },\n\n        isActive: function() {\n            return Adapt.config.has('_accessibility')\n                && Adapt.config.get('_accessibility')._isEnabled\n                && Adapt.config.get('_accessibility')._isActive;\n        },\n\n        isEnabled: function() {\n            return Adapt.config.has('_accessibility')\n                && Adapt.config.get('_accessibility')._isEnabled;\n        },\n\n        setupDocument: function() {\n            this.$html.addClass('accessibility');\n\n            if (Adapt.config.get('_accessibility')._isTextProcessorEnabled) {\n                this.$html.addClass('text-to-speech');\n            }\n\n            $('.skip-nav-link').removeClass('a11y-ignore a11y-ignore-focus');\n\n            $.a11y(true)\n            $.a11y_on(true, \"body > *\");\n        },\n\n        setupLegacy: function() {\n            //IE8 .focused CLASS AS :focus ISN'T AVAILABLE\n\n            if(!this.$html.hasClass('ie8') || !Adapt.config.get('_accessibility')._shouldSupportLegacyBrowsers) return;\n\n            // If legacy enabled run setupLegacyListeners()\n            this.listenTo(Adapt, 'pageView:ready menuView:ready', this.setupLegacyFocusClasser);\n            this.listenTo(Adapt, 'remove', this.removeLegacyFocusClasser);\n\n        },\n\n        setupLegacyFocusClasser: function() {\n            this.removeLegacyFocusClasser();\n\n            // On focus add class of focused, on blur remove class\n            this._legacyFocusElements = $(this._tabIndexElements);\n            this._legacyFocusElements\n                .on('focus', this.onElementFocused)\n                .on('blur', this.onElementBlurred);\n        },\n\n        setupPopupListeners: function() {\n            this.listenTo(Adapt, 'popup:opened popup:closed', this.onPop);\n        },\n\n\n        setupUsageInstructions: function() {\n            if (!Adapt.course.get(\"_globals\")._accessibility || !Adapt.course.get(\"_globals\")._accessibility._accessibilityInstructions) {\n                this.$accessibilityInstructions.remove();\n                return;\n            }\n\n            var instructionsList = Adapt.course.get(\"_globals\")._accessibility._accessibilityInstructions;\n\n            var usageInstructions;\n            if (instructionsList[Adapt.device.browser]) {\n                usageInstructions = instructionsList[Adapt.device.browser];\n            } else if (Modernizr.touch) {\n                usageInstructions = instructionsList.touch || \"\";\n            } else {\n                usageInstructions = instructionsList.notouch || \"\";\n            }\n\n           this.$accessibilityInstructions.html( usageInstructions );\n        },\n\n        setupLogging: function() {\n            if (!Adapt.config.get(\"_accessibility\") || !Adapt.config.get(\"_accessibility\")._logReading) return;\n\n            $(document).on(\"reading\", this.onRead);\n        },\n\n\n\n        revertDocument: function() {\n            this.$html.removeClass('accessibility text-to-speech');\n            $('.skip-nav-link').addClass('a11y-ignore a11y-ignore-focus');\n            $.a11y(false);\n            $.a11y_on(false, \"body > *\");\n            $.a11y_on(true, \"#accessibility-toggle\");\n        },\n\n        revertLegacy: function() {\n\n            if(!this.$html.hasClass('ie8') || !Adapt.config.get('_accessibility')._shouldSupportLegacyBrowsers) return;\n\n            this.stopListening(Adapt, 'pageView:ready menuView:ready', this.setupLegacyFocusClasser);\n            this.stopListening(Adapt, 'remove', this.removeLegacyFocusClasser);\n\n        },\n\n        removeLegacyFocusClasser: function() {\n            if (this._legacyFocusElements === undefined) return;\n\n            //Remove focus and blur events\n            this._legacyFocusElements\n                .off('focus', this.onElementFocused)\n                .off('blur', this.onElementBlurred);\n            this._legacyFocusElements = undefined;\n        },\n\n\n        revertPopupListeners: function() {\n            this.stopListening(Adapt, 'popup:opened popup:closed', this.onPop);\n        },\n\n        revertUsageInstructions: function() {\n            if (Adapt.course.has(\"_globals\") && (!Adapt.course.get(\"_globals\")._accessibility || !Adapt.course.get(\"_globals\")._accessibility._accessibilityInstructions)) return;\n\n            this.$accessibilityInstructions.off(\"blur\", this.onFocusInstructions);\n        },\n\n        revertLogging: function() {\n            if (Adapt.course.has(\"_globals\") && (!Adapt.course.get(\"_globals\")._accessibility || !Adapt.course.get(\"_globals\")._accessibility._logReading)) return;\n\n            $($.a11y).off(\"reading\", this.onRead);\n        },\n\n\n        focusInitial: function() {\n            if (!this.isActive()) return;\n\n            this._isButtonRedirectionOn = false;\n\n            var debouncedInitial = _.debounce(_.bind(function() {\n                //ENABLED DOCUMENT READING\n\n                if (!this._hasUsageInstructionRead) {\n\n                    this._hasUsageInstructionRead = true;\n\n                    $.a11y_on(true, '.page');\n                    $.a11y_on(true, '.menu');\n\n                    if (this._hasUserTabbed) return;\n\n                    this.$accessibilityInstructions.one(\"blur\", this.onFocusInstructions);\n\n                    _.delay(function(){\n                        Adapt.accessibility.$accessibilityInstructions.focusNoScroll();\n                    }, 250);\n\n                } else {\n\n                    if (Adapt.location._currentId && $.a11y.options.OS!=\"mac\") {\n                        //required to stop JAWS from auto reading content in IE\n                        var currentModel = Adapt.findById(Adapt.location._currentId);\n                        var alertText = \" \";\n\n                        switch (currentModel.get(\"_type\")) {\n                            case \"page\":\n                            if (Adapt.course.get(\"_globals\") && Adapt.course.get(\"_globals\")._accessibility && Adapt.course.get(\"_globals\")._accessibility._ariaLabels && Adapt.course.get(\"_globals\")._accessibility._ariaLabels.pageLoaded) {\n                                    alertText = Adapt.course.get(\"_globals\")._accessibility._ariaLabels.pageLoaded;\n                                }\n                                break;\n\n                            case \"menu\":\n                            default:\n                            if (Adapt.course.get(\"_globals\") && Adapt.course.get(\"_globals\")._accessibility && Adapt.course.get(\"_globals\")._accessibility._ariaLabels && Adapt.course.get(\"_globals\")._accessibility._ariaLabels.menuLoaded) {\n                                    alertText = Adapt.course.get(\"_globals\")._accessibility._ariaLabels.menuLoaded;\n                                }\n                                break;\n                        }\n\n                        $.a11y_alert(alertText);\n                    }\n\n                     _.delay(_.bind(function() {\n                        var windowScrollTop = $(window).scrollTop();\n                        var documentScrollTop = $(document).scrollTop();\n\n                        $.a11y_on(true, '.page');\n                        $.a11y_on(true, '.menu');\n\n                        //prevent auto scrolling to top when scroll has been initiated\n                        if (windowScrollTop > 0 || documentScrollTop > 0 || this._hasUserTabbed) return;\n\n                        _.delay(function(){\n                        $.a11y_focus();\n                        }, 500);\n\n                    }, this), 500);\n\n                }\n\n            }, this), 100);\n            debouncedInitial();\n\n        },\n\n        onElementFocused: function(event) {\n             $(this).addClass('focused');\n        },\n\n        onElementBlurred: function(event) {\n            $(this).removeClass('focused');\n        },\n\n        onRead: function(event, text) {\n            //OUTPUT READ TEXT TO CONSOLE\n            console.log(\"READING: \" + text);\n        },\n\n        onPop: function() {\n            //MAKE SURE POPUP IS CONFIGURED CORRECTLY WITH ARIA LABELS, TABINDEXES ETC\n            if (this.isActive()) {\n                $.a11y_update();\n            }\n        },\n\n        onKeyUp: function(event) {\n\n            //IF NOT TAB KEY, RETURN\n            if (event.which !== 9) return;\n\n            //DO NOT REDIRECT IF USER HAS ALREADY INTERACTED\n            if ($.a11y.userInteracted) return;\n            Adapt.accessibility._hasUserTabbed = true;\n\n            //IF INITIAL TAB NOT CAPTURED AND ACCESSIBILITY NOT ON, RETURN\n            if (Adapt.accessibility.isActive() && !Adapt.accessibility._isButtonRedirectionOn) return;\n\n            //IF TAB PRESSED, AND TAB REDIRECTION ON, ALWAYS TAB TO ACCESSIBILITY BUTTON ONLY\n            Adapt.accessibility.$accessibilityToggle.focus();\n\n        },\n\n        onFocusInstructions: function(event) {\n            //HIDE INSTRUCTIONS FROM TAB WRAP AROUND AFTER LEAVING INSTRUCTIONS\n            if (Adapt.accessibility._isButtonRedirectionOn) return;\n            if (!Adapt.accessibility._isLoaded) return;\n            Adapt.accessibility.$accessibilityInstructions\n                .addClass(\"a11y-ignore-focus\")\n                .off(\"blur\", Adapt.accessibility.onFocusInstructions);\n        }\n\n    });\n\n    Adapt.accessibility = new Accessibility();\n\n    return Adapt.accessibility;\n\n});\n\n",
    "define('core/js/offlineStorage',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    //Basic API for setting and getting name+value pairs\n    //Allows registration of a single handler.\n\n    var OfflineStorage = Backbone.Controller.extend({\n\n        /**\n         * set to true initially so that if there are no offlineStorage handlers (i.e. if contrib-spoor is not installed)\n         * this can still be accessed OK\n         */\n        ready: true,\n        _handler: undefined,\n\n        /**\n         * set .ready to false if an offlineStorage handler is being attached - we'll need to wait until the handler lets us know\n         * it's ready before we can safely use offlineStorage\n         */\n        initialize: function(handler) {\n            if (!handler) {\n                return;\n            }\n\n            this.ready = false;\n            this._handler = handler;\n        },\n\n        set: function(name, value) {\n            if (!(this._handler && this._handler.set)) return;\n            return this._handler.set.apply(this._handler, arguments);\n        },\n\n        get: function(name) {\n            if (!(this._handler && this._handler.get)) return;\n            return this._handler.get.apply(this._handler, arguments);\n        },\n\n        /**\n         * Some forms of offlineStorage could take time to initialise, this allows us to let plugins know when it's ready to be used\n         */\n        setReadyStatus: function() {\n            this.ready = true;\n            Adapt.trigger(\"offlineStorage:ready\");\n        }\n\n    });\n\n    Adapt.offlineStorage = new OfflineStorage();\n\n    return Adapt.offlineStorage;\n\n});\n\n",
    "define('core/js/device',[\n    'core/js/adapt',\n    'bowser'\n], function(Adapt, Bowser) {\n\n    var $html = $('html');\n    var $window = $(window);\n\n    Adapt.device = {\n        touch: Modernizr.touch,\n        screenWidth: getScreenWidth(),\n        screenHeight: getScreenHeight(),\n        browser: (Bowser.name || '').toLowerCase(),\n        version: (Bowser.version || '').toLowerCase(),\n        OS: getOperatingSystem().toLowerCase(),\n        osVersion: Bowser.osversion || '',\n        renderingEngine: getRenderingEngine()\n    };\n\n    // Define 'orientation' and 'aspectRatio' here once 'screenWidth' and 'screenHeight' have been set,\n    // as both these functions are getters, essentially.\n    Object.defineProperties(Adapt.device, {\n        \"orientation\": {\n            get: function () {\n                return (this.screenWidth >= this.screenHeight) ? 'landscape' : 'portrait';\n            }\n        },\n        \"aspectRatio\": {\n            get: function () {\n                return this.screenWidth / this.screenHeight;\n            }\n        }\n    });\n\n    Adapt.once('app:dataReady', function() {\n        Adapt.device.screenSize = checkScreenSize();\n\n        $html.addClass('size-' + Adapt.device.screenSize);\n        \n        if (Adapt.device.orientation) {\n            $html.addClass('orientation-' + Adapt.device.orientation);\n        }\n\n        // As Adapt.config is available it's ok to bind the 'resize'.\n        $window.on('resize orientationchange', onWindowResize);\n    });\n\n    /**\n     * Compares the calculated screen width to the breakpoints defined in config.json.\n     * \n     * @returns {string} 'large', 'medium' or 'small'\n     */\n    function checkScreenSize() {\n        var screenSizeConfig = Adapt.config.get('screenSize');\n        var screenSize;\n\n        if (Adapt.device.screenWidth > screenSizeConfig.medium) {\n            screenSize = 'large';\n        } else if (Adapt.device.screenWidth > screenSizeConfig.small) {\n            screenSize = 'medium';\n        } else {\n            screenSize = 'small';\n        }\n\n        return screenSize;\n    }\n\n    function getScreenWidth() {\n        return isAppleDevice()\n            ? getAppleScreenWidth()\n            : window.innerWidth || $window.width();\n    }\n\n    function getScreenHeight() {\n        return isAppleDevice()\n            ? getAppleScreenHeight()\n            : window.innerHeight || $window.height();\n    }\n\n    function getOperatingSystem() {\n        var os = '';\n        var flags = ['windows', 'mac', 'linux', 'windowsphone', 'chromeos', 'android',\n            'ios', 'blackberry', 'firefoxos', 'webos', 'bada', 'tizen', 'sailfish'];\n\n        for (var i = 0; i < flags.length; i++) {\n            if (Bowser[flags[i]]) {\n                os = flags[i];\n                break;\n            }\n        }\n\n        if (os === '') {\n            // Fall back to using navigator.platform in case Bowser can't detect the OS.\n            var platform = navigator.platform;\n            var platforms = ['Win', 'Mac', 'Linux'];\n            os = 'PlatformUnknown';\n\n            for (var i = 0; i < platforms.length; i++) {\n                if (platform.indexOf(platforms[i]) != -1) {\n                    os = platforms[i].toLowerCase();\n                    break;\n                }\n            }\n\n            // Set consistency with the Bowser flags.\n            if (os == 'win') {\n                os = 'windows';\n            }\n        }\n\n        return os;\n    }\n\n    function getRenderingEngine() {\n        var engine = '';\n        var flags = ['webkit', 'blink', 'gecko', 'msie', 'msedge'];\n\n        for (var i = 0; i < flags.length; i++) {\n            if (Bowser[flags[i]]) {\n                engine = flags[i];\n                break;\n            }\n        }\n\n        return engine;\n    }\n\n    var onWindowResize = _.debounce(function onScreenSizeChanged() {\n        // Calculate the screen properties.\n        var previousWidth = Adapt.device.screenWidth;\n        var previousHeight = Adapt.device.screenHeight;\n\n        Adapt.device.screenWidth = getScreenWidth();\n        Adapt.device.screenHeight = getScreenHeight();\n\n        if (previousWidth === Adapt.device.screenWidth && previousHeight === Adapt.device.screenHeight) {\n            // Do not trigger a change if the viewport hasn't actually changed.  Scrolling on iOS will trigger a resize.\n            return;\n        }\n\n        var newScreenSize = checkScreenSize();\n\n        if (newScreenSize !== Adapt.device.screenSize) {\n            Adapt.device.screenSize = newScreenSize;\n\n            $html.removeClass('size-small size-medium size-large').addClass('size-' + Adapt.device.screenSize);\n\n            if (Adapt.device.orientation) {\n                $html.removeClass('orientation-landscape orientation-portrait').addClass('orientation-' + Adapt.device.orientation);\n            }\n\n            Adapt.trigger('device:changed', Adapt.device.screenSize);\n        }\n\n        Adapt.trigger('device:resize', Adapt.device.screenWidth);\n\n    }, 100);\n\n    function isAppleDevice() {\n        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n    }\n\n    function getAppleScreenWidth() {\n        return (Math.abs(window.orientation) === 90) ? screen.height : screen.width;\n    }\n\n    function getAppleScreenHeight() {\n        return (Math.abs(window.orientation) === 90) ? screen.width : screen.height;\n    }\n\n    function getAppleDeviceType() {\n        var type = '';\n\n        var flags = ['iphone', 'ipad', 'ipod'];\n\n        for (var i = 0; i < flags.length; i++) {\n            if (Bowser[flags[i]]) {\n                type = flags[i];\n                break;\n            }\n        }\n\n        return type;\n    }\n\n    function pixelDensity() {\n        var pixelDensity = (window.devicePixelRatio || 1);\n\n        if (pixelDensity >= 3) {\n            return 'ultra-high';\n        } else if (pixelDensity >= 2) {\n            return 'high';\n        } else if (pixelDensity >= 1.5) {\n            return 'medium';\n        } else {\n            return 'low';\n        }\n    }\n\n    var browser = Adapt.device.browser.toLowerCase();\n    // Convert 'msie' and 'internet explorer' to 'ie'.\n    var browserString = browser.replace(/msie|internet explorer/, 'ie');\n    browserString = browserString + ' version-' + Adapt.device.version + ' OS-' + Adapt.device.OS + ' ' + getAppleDeviceType();\n    browserString += browserString.replace('.', '-').toLowerCase();\n\n    $html.addClass(browserString + ' pixel-density-' + pixelDensity());\n});\n\n",
    "define('core/js/views/drawerView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var DrawerView = Backbone.View.extend({\n\n        className: 'drawer display-none',\n        disableAnimation: false,\n        escapeKeyAttached: false,\n\n        initialize: function() {\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n            this._isVisible = false;\n            this.drawerDir = 'right';\n            if(Adapt.config.get('_defaultDirection')=='rtl'){//on RTL drawer on the left\n                this.drawerDir = 'left';\n            }\n            this.setupEventListeners();\n            this.render();\n            this.drawerDuration = Adapt.config.get('_drawer')._duration;\n            this.drawerDuration = (this.drawerDuration) ? this.drawerDuration : 400;\n            // Setup cached selectors\n            this.$wrapper = $('#wrapper');\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, 'navigation:toggleDrawer', this.toggleDrawer);\n            this.listenTo(Adapt, 'drawer:triggerCustomView', this.openCustomView);\n            this.listenTo(Adapt, 'drawer:closeDrawer', this.onCloseDrawer);\n            this.listenTo(Adapt, 'remove', this.onCloseDrawer);\n            this.listenTo(Adapt, 'accessibility:toggle', this.onAccessibilityToggle);\n            this._onKeyUp = _.bind(this.onKeyUp, this);\n            this.setupEscapeKey();\n        },\n\n        setupEscapeKey: function() {\n            var hasAccessibility = Adapt.config.has('_accessibility') && Adapt.config.get('_accessibility')._isActive;\n\n            if (!hasAccessibility && ! this.escapeKeyAttached) {\n                $(window).on(\"keyup\", this._onKeyUp);\n                this.escapeKeyAttached = true;\n            } else {\n                $(window).off(\"keyup\", this._onKeyUp);\n                this.escapeKeyAttached = false;\n            }\n        },\n\n        onAccessibilityToggle: function() {\n            this.setupEscapeKey();\n        },\n\n        onKeyUp: function(event) {\n            if (event.which != 27) return;\n            event.preventDefault();\n\n            this.onCloseDrawer();\n        },\n\n        events: {\n            'click .drawer-back': 'onBackButtonClicked',\n            'click .drawer-close':'onCloseDrawer'\n        },\n\n        render: function() {\n            var template = Handlebars.templates['drawer']\n            $(this.el).html(template({_globals: Adapt.course.get(\"_globals\")})).prependTo('body');\n            var shadowTemplate = Handlebars.templates['shadow'];\n            $(shadowTemplate()).prependTo('body');\n            // Set defer on post render\n            _.defer(_.bind(function() {\n                this.postRender();\n            }, this));\n            return this;\n        },\n\n        // Set tabindex for select elements\n        postRender: function() {\n            this.$('a, button, input, select, textarea').attr('tabindex', -1);\n\n            this.checkIfDrawerIsAvailable();\n        },\n\n        openCustomView: function(view, hasBackButton) {\n            // Set whether back button should display\n            this._hasBackButton = hasBackButton;\n            this._isCustomViewVisible = true;\n            Adapt.trigger('drawer:empty');\n            this.showDrawer();\n            this.$('.drawer-holder').html(view);\n        },\n\n        checkIfDrawerIsAvailable: function() {\n            if (this.collection.length == 0) {\n                $('.navigation-drawer-toggle-button').addClass('display-none');\n                Adapt.trigger('drawer:noItems');\n            } else {\n                $('.navigation-drawer-toggle-button').removeClass('display-none');\n            }\n        },\n\n        onBackButtonClicked: function(event) {\n            event.preventDefault();\n            this.showDrawer(true);\n        },\n\n        onCloseDrawer: function(event) {\n            if (event) {\n                event.preventDefault();\n            }\n            this.hideDrawer();\n        },\n\n        toggleDrawer: function() {\n            if (this._isVisible && this._isCustomViewVisible === false) {\n                this.hideDrawer();\n            } else {\n                this.showDrawer(true);\n            }\n        },\n\n        showDrawer: function(emptyDrawer) {\n            this.$el.removeClass('display-none');\n            //only trigger popup:opened if drawer is visible, pass popup manager drawer element\n            if (!this._isVisible) {\n                Adapt.trigger('popup:opened', this.$el);\n                $('body').scrollDisable();\n                this._isVisible = true;\n            }\n\n            var drawerWidth = this.$el.width();\n            // Sets tab index to 0 for all tabbable elements in Drawer\n            this.$('a, button, input, select, textarea').attr('tabindex', 0);\n\n            if (emptyDrawer) {\n                this.$('.drawer-back').addClass('display-none');\n                this._isCustomViewVisible = false;\n                this.emptyDrawer();\n                if(this.collection.models.length === 1) {\n                    Adapt.trigger(this.collection.models[0].get('eventCallback'));\n                } else {\n                    this.renderItems();\n                    Adapt.trigger('drawer:openedItemView');\n                }\n            } else {\n                if (this._hasBackButton && this.collection.models.length > 1) {\n                    this.$('.drawer-back').removeClass('display-none');\n                } else {\n                    this.$('.drawer-back').addClass('display-none');\n                }\n                Adapt.trigger('drawer:openedCustomView');\n            }\n\n            //delay drawer animation until after background fadeout animation is complete\n            if (this.disableAnimation) {\n                $('#shadow').removeClass(\"display-none\");\n\n                var direction={};\n                direction[this.drawerDir]=0;\n                this.$el.css(direction);\n                complete.call(this);\n                \n            } else {\n\n                $('#shadow').velocity({opacity:1},{duration:this.drawerDuration, begin: _.bind(function() {\n                    $(\"#shadow\").removeClass(\"display-none\");\n                    complete.call(this);\n                }, this)});\n\n                var showEasingAnimation = Adapt.config.get('_drawer')._showEasing;\n                var easing = (showEasingAnimation) ? showEasingAnimation : 'easeOutQuart';\n                var direction={};\n                direction[this.drawerDir]=0;\n                this.$el.velocity(direction, this.drawerDuration, easing);\n\n            }\n\n            function complete() {\n                this.addShadowEvent();\n                Adapt.trigger('drawer:opened');\n                \n                //focus on first tabbable element in drawer\n                this.$el.a11y_focus();\n\t    }\n\n        },\n\n        emptyDrawer: function() {\n            this.$('.drawer-holder').empty();\n        },\n\n        renderItems: function() {\n            Adapt.trigger('drawer:empty');\n            this.emptyDrawer();\n            var models = this.collection.models;\n            for (var i = 0, len = models.length; i < len; i++) {\n                var item = models[i];\n                new DrawerItemView({model: item});\n            }\n        },\n\n        hideDrawer: function() {\n            //only trigger popup:closed if drawer is visible\n            if (this._isVisible) {\n                Adapt.trigger('popup:closed');\n                this._isVisible = false;\n                $('body').scrollEnable();\n            } else {\n                return;\n            }\n\n            if (this.disableAnimation) {\n\n                var direction={};\n                direction[this.drawerDir]=-this.$el.width();\n                this.$el.css(direction).addClass('display-none');\n\n                $('#shadow').addClass(\"display-none\");\n\n                Adapt.trigger('drawer:closed');\n\n            } else {\n\n                var showEasingAnimation = Adapt.config.get('_drawer')._hideEasing;\n                var easing = (showEasingAnimation) ? showEasingAnimation : 'easeOutQuart';\n\n                var direction={};\n                direction[this.drawerDir]=-this.$el.width();\n                this.$el.velocity(direction, this.drawerDuration, easing, _.bind(function() {\n                    this.$el.addClass('display-none');\n                    Adapt.trigger('drawer:closed');\n                }, this));\n\n                $('#shadow').velocity({opacity:0}, {duration:this.drawerDuration, complete:function() {\n                    $('#shadow').addClass(\"display-none\");\n                }});\n\n            }\n\n            this._isCustomViewVisible = false;\n            this.removeShadowEvent();\n\n\n        },\n\n        addShadowEvent: function() {\n            $('#shadow').one('click touchstart', _.bind(function() {\n                this.onCloseDrawer();\n            }, this));\n        },\n\n        removeShadowEvent: function() {\n            $('#shadow').off('click touchstart');\n        },\n\n        remove: function() {\n            Backbone.View.prototype.remove.apply(this, arguments);\n            $(window).off(\"keyup\", this._onKeyUp);\n\n            Adapt.trigger('drawer:empty');\n            this.collection.reset();\n            $('#shadow').remove();\n        }\n\n    });\n\n    var DrawerItemView = Backbone.View.extend({\n\n        className: 'drawer-item',\n\n        initialize: function() {\n            this.listenTo(Adapt, 'drawer:empty', this.remove);\n            this.render();\n        },\n\n        events: {\n            'click .drawer-item-open': 'onDrawerItemClicked'\n        },\n\n        render: function() {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates['drawerItem']\n            $(this.el).html(template(data)).appendTo('.drawer-holder');\n            return this;\n        },\n\n        onDrawerItemClicked: function(event) {\n            event.preventDefault();\n            var eventCallback = this.model.get('eventCallback');\n            Adapt.trigger(eventCallback);\n        }\n    });\n\n    return DrawerView;\n});\n\n",
    "define('core/js/drawer',[\n    'core/js/adapt',\n    'core/js/views/drawerView'\n], function(Adapt, DrawerView) {\n\n    var DrawerCollection = new Backbone.Collection(null, { comparator: 'drawerOrder' });\n    var Drawer = {};\n\n    Drawer.addItem = function(drawerObject, eventCallback) {\n        drawerObject.eventCallback = eventCallback;\n        DrawerCollection.add(drawerObject);\n    };\n\n    Drawer.triggerCustomView = function(view, hasBackButton) {\n        if (hasBackButton !== false) {\n            hasBackButton = true;\n        }\n        Adapt.trigger('drawer:triggerCustomView', view, hasBackButton);\n    };\n\n    var init = function() {\n        var drawerView = new DrawerView({collection: DrawerCollection});\n\n        Adapt.on('app:languageChanged', function() {\n            drawerView.remove();\n            drawerView = new DrawerView({collection: DrawerCollection});\n        });\n    };\n\n    Adapt.once('adapt:start', function() {\n        init();\n    });\n\n    Adapt.drawer = Drawer;\n\n});\n\n",
    "define('core/js/views/notifyView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var NotifyView = Backbone.View.extend({\n\n        className: 'notify',\n        disableAnimation: false,\n        escapeKeyAttached: false,\n\n        initialize: function() {\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n\n            this.setupEventListeners();\n\n            //include accessibility globals in notify model\n            this.model.set('_globals', Adapt.course.get('_globals'));\n            this.render();\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                'remove page:scrollTo': this.closeNotify,\n                'device:resize': this.resetNotifySize,\n                'accessibility:toggle': this.onAccessibilityToggle\n            });\n\n            this._onKeyUp = _.bind(this.onKeyUp, this);\n            this.setupEscapeKey();\n        },\n\n        setupEscapeKey: function() {\n            var hasAccessibility = Adapt.config.has('_accessibility') && Adapt.config.get('_accessibility')._isActive;\n\n            if (!hasAccessibility && ! this.escapeKeyAttached) {\n                $(window).on('keyup', this._onKeyUp);\n                this.escapeKeyAttached = true;\n            } else {\n                $(window).off('keyup', this._onKeyUp);\n                this.escapeKeyAttached = false;\n            }\n        },\n\n        onAccessibilityToggle: function() {\n            this.setupEscapeKey();\n        },\n\n        onKeyUp: function(event) {\n            if (event.which != 27) return;\n            event.preventDefault();\n\n            this.closeNotify();\n        },\n\n        events: {\n            'click .notify-popup-alert-button':'onAlertButtonClicked',\n            'click .notify-popup-prompt-button': 'onPromptButtonClicked',\n            'click .notify-popup-done': 'onCloseButtonClicked',\n            'click .notify-shadow': 'onCloseButtonClicked'\n        },\n\n        render: function() {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates['notify'];\n\n            //hide notify container\n            this.$el.css('visibility', 'hidden');\n            //attach popup + shadow\n            this.$el.html(template(data)).prependTo('body');\n            //hide popup\n            this.$('.notify-popup').css('visibility', 'hidden');\n            //show notify container\n            this.$el.css('visibility', 'visible');\n\n            this.showNotify();\n            return this;\n        },\n\n        onAlertButtonClicked: function(event) {\n            event.preventDefault();\n            //tab index preservation, notify must close before subsequent callback is triggered\n            this.closeNotify();\n            Adapt.trigger(this.model.get('_callbackEvent'), this);\n        },\n\n        onPromptButtonClicked: function(event) {\n            event.preventDefault();\n            //tab index preservation, notify must close before subsequent callback is triggered\n            this.closeNotify();\n            Adapt.trigger($(event.currentTarget).attr('data-event'));\n        },\n\n        onCloseButtonClicked: function(event) {\n            event.preventDefault();\n            //tab index preservation, notify must close before subsequent callback is triggered\n            this.closeNotify();\n            Adapt.trigger('notify:cancelled');\n        },\n\n        resetNotifySize: function() {\n            $('.notify-popup').removeAttr('style');\n\n            this.resizeNotify();\n        },\n\n        resizeNotify: function() {\n            var windowHeight = $(window).height();\n            var notifyHeight = this.$('.notify-popup').outerHeight();\n\n            if (notifyHeight > windowHeight) {\n                this.$('.notify-popup').css({\n                    'height':'100%',\n                    'top':0,\n                    'overflow-y': 'scroll',\n                    '-webkit-overflow-scrolling': 'touch'\n                });\n            } else {\n                this.$('.notify-popup').css({\n                    'margin-top': -(notifyHeight/2)\n                });\n            }\n        },\n\n        showNotify: function() {\n\n            Adapt.trigger('notify:opened', this);\n\n            if (this.$('img').length > 0) {\n                this.$el.imageready( _.bind(loaded, this));\n            } else {\n                loaded.call(this);\n            }\n\n            function loaded() {\n                if (this.disableAnimation) {\n                    this.$('.notify-shadow').css('display', 'block');\n                } else {\n\n                    this.$('.notify-shadow').velocity({ opacity: 0 }, {duration:0}).velocity({ opacity: 1 }, {duration:400, begin: _.bind(function() {\n                        this.$('.notify-shadow').css('display', 'block');\n                    }, this)});\n\n                }\n\n                this.resizeNotify();\n\n                if (this.disableAnimation) {\n\n                    this.$('.notify-popup').css('visibility', 'visible');\n                    complete.call(this);\n\n                } else {\n\n                    this.$('.notify-popup').velocity({ opacity: 0 }, {duration:0}).velocity({ opacity: 1 }, { duration:400, begin: _.bind(function() {\n                        this.$('.notify-popup').css('visibility', 'visible');\n                        complete.call(this);\n                    }, this) });\n\n                }\n\n                function complete() {\n                    /*ALLOWS POPUP MANAGER TO CONTROL FOCUS*/\n                    Adapt.trigger('popup:opened', this.$('.notify-popup'));\n                    $('body').scrollDisable();\n                    $('html').addClass('notify');\n\n                    //set focus to first accessible element\n                    this.$('.notify-popup').a11y_focus();\n                }\n            }\n\n        },\n\n        closeNotify: function (event) {\n\n            if (this.disableAnimation) {\n\n                this.$('.notify-popup').css('visibility', 'hidden');\n                this.$el.css('visibility', 'hidden');\n\n                this.remove();\n\n            } else {\n\n                this.$('.notify-popup').velocity({ opacity: 0 }, {duration:400, complete: _.bind(function() {\n                    this.$('.notify-popup').css('visibility', 'hidden');\n                }, this)});\n\n                this.$('.notify-shadow').velocity({ opacity: 0 }, {duration:400, complete:_.bind(function() {\n                    this.$el.css('visibility', 'hidden');\n                    this.remove();\n                }, this)});\n            }\n\n            $('body').scrollEnable();\n            $('html').removeClass('notify');\n\n            Adapt.trigger('popup:closed');\n            Adapt.trigger('notify:closed');\n        }\n\n    });\n\n    return NotifyView;\n\n});\n\n",
    "define('core/js/views/notifyPushView',[\n    'core/js/adapt'\n], function (Adapt) {\n\n    var NotifyPushView = Backbone.View.extend({\n\n        className: function () {\n            return 'notify-push ' + this.model.get('_classes');\n        },\n\n        initialize: function () {\n            this.listenTo(Adapt, 'notify:pushShown notify:pushRemoved', this.updateIndexPosition);\n            this.listenTo(this.model.collection, 'remove', this.updateIndexPosition);\n            this.listenTo(this.model.collection, 'change:_index', this.updatePushPosition);\n            this.listenTo(Adapt, 'remove', this.remove);\n\n            // Include accessibility globals in notify model.\n            this.model.set('_globals', Adapt.course.get('_globals'));\n\n            this.preRender();\n            this.render();\n        },\n\n        events: {\n            'click .notify-push-close': 'closePush',\n            'click .notify-push-inner': 'triggerEvent'\n        },\n\n        preRender: function () {\n            this.hasBeenRemoved = false;\n        },\n\n        render: function () {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates['notifyPush'];\n            this.$el.html(template(data)).appendTo('#wrapper');\n\n            _.defer(_.bind(function () {\n                this.postRender();\n            }, this));\n\n            return this;\n        },\n\n        postRender: function () {\n            this.$el.addClass('show');\n\n            _.delay(_.bind(function () {\n                this.closePush();\n            }, this), this.model.get('_timeout'));\n\n            Adapt.trigger('notify:pushShown');\n        },\n\n        closePush: function (event) {\n            if (event) {\n                event.preventDefault();\n            }\n\n            // Check whether this view has been removed as the delay can cause it to be fired twice\n            if (this.hasBeenRemoved === false) {\n\n                this.hasBeenRemoved = true;\n\n                this.$el.removeClass('show');\n\n                _.delay(_.bind(function () {\n                    this.model.collection.remove(this.model);\n                    Adapt.trigger('notify:pushRemoved', this);\n                    this.remove();\n                }, this), 600);\n            }\n        },\n\n        triggerEvent: function (event) {\n            Adapt.trigger(this.model.get('_callbackEvent'));\n            this.closePush();\n        },\n\n        updateIndexPosition: function () {\n            if (!this.hasBeenRemoved) {\n                var models = this.model.collection.models;\n                for (var i = 0, len = models.length; i < len; i++) {\n                    var index = i;\n                    var model = models[i];\n                    if (model.get('_isActive') === true) {\n                        model.set('_index', index);\n                        this.updatePushPosition();\n                    }\n                }\n            }\n        },\n\n        updatePushPosition: function () {\n            if (this.hasBeenRemoved) {\n                return;\n            }\n\n            if (this.model.get('_index') != undefined) {\n                var elementHeight = this.$el.height();\n                var offset = 20;\n                var navigationHeight = $('.navigation').height();\n                var currentIndex = this.model.get('_index');\n                var flippedIndex = (currentIndex == 0) ? 1 : 0;\n\n                if (this.model.collection.where({ _isActive: true }).length === 1) {\n                    flippedIndex = 0;\n                }\n\n                var positionLowerPush = (elementHeight + offset) * flippedIndex + navigationHeight + offset;\n                this.$el.css('top', positionLowerPush);\n            }\n        }\n    });\n\n    return NotifyPushView;\n\n});\n\n",
    "define('core/js/models/notifyModel',[],function() {\n\n    var NotifyModel = Backbone.Model.extend({\n        defaults: {\n        \t_isActive:false,\n        \t_showIcon:false,\n        \t_timeout:3000\n        }\n    });\n\n    return NotifyModel;\n\n});\n\n",
    "define('core/js/notify',[\n\t'core/js/adapt',\n\t'core/js/views/notifyView',\n\t'core/js/views/notifyPushView',\n\t'core/js/models/notifyModel'\n], function(Adapt, NotifyView, NotifyPushView, NotifyModel) {\n\n\t// Build a collection to store push notifications\n\tvar NotifyPushCollection = Backbone.Collection.extend({\n\n\t\tmodel: NotifyModel,\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo(this, 'add', this.onPushAdded);\n\t\t\tthis.listenTo(Adapt, 'notify:pushRemoved', this.onRemovePush);\n\t\t},\n\n\t\tonPushAdded: function(model) {\n\t\t\tthis.checkPushCanShow(model);\n\t\t},\n\n\t\tcheckPushCanShow: function(model) {\n\t\t\tif (this.canShowPush()) {\n\t\t\t\tmodel.set('_isActive', true);\n\t\t\t\tthis.showPush(model);\n\t\t\t}\n\t\t},\n\n\t\tcanShowPush: function() {\n\t\t\tvar availablePushNotifications = this.where({_isActive:true});\n\t\t\tif (availablePushNotifications.length >= 2) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\tshowPush: function(model) {\n\t\t\tnew NotifyPushView({\n\t\t\t\tmodel: model\n\t\t\t});\n\t\t},\n\n\t\tonRemovePush: function(view) {\n\t\t\tvar inactivePushNotifications = this.where({_isActive:false});\n\t\t\tif (inactivePushNotifications.length > 0) {\n\t\t\t\tthis.checkPushCanShow(inactivePushNotifications[0]);\n\t\t\t}\n\t\t}\n\n\t});\n\n\tvar NotifyPushes = new NotifyPushCollection();\n\n\tAdapt.on('notify:alert', function(notifyObject) {\n\t\taddNotifyView('alert', notifyObject);\n\t});\n\n\tAdapt.on('notify:prompt', function(notifyObject) {\n\t\taddNotifyView('prompt', notifyObject);\n\t});\n\n\tAdapt.on('notify:popup', function(notifyObject) {\n\t\taddNotifyView('popup', notifyObject);\n\t});\n\n\tAdapt.on('notify:push', function(notifyObject) {\n\t\taddNotifyView('push', notifyObject);\n\t});\n\n\tfunction addNotifyView(type, notifyObject) {\n\t\tnotifyObject._type = type;\n\n\t\tif (type === 'push') {\n\n\t\t\tNotifyPushes.push(notifyObject);\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar notify = new NotifyView({\n\t\t\tmodel: new NotifyModel(notifyObject)\n\t\t});\n\n\t}\n\n});\n\n",
    "define('core/js/popupManager',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    Adapt.on('popup:opened', function($element) {\n\n\t\t//capture currently active element or element specified\n        var $activeElement = $element || $(document.activeElement);\n\n        //save tab indexes\n        $activeElement.a11y_popup();\n    });\n\n    Adapt.on('popup:closed', function() {\n\n        //restore tab indexes\n        $.a11y_popdown();\n\n    });\n\n});\n\n",
    "define('core/js/models/routerModel',[\n    'core/js/adapt'\n], function (Adapt) {\n\n \tvar RouterModel = Backbone.Model.extend({\n\n \t\tdefaults: {\n \t\t\t_canNavigate: true\n \t\t},\n\n \t\tlockedAttributes: {\n \t\t\t_canNavigate: false\n \t\t}\n \t\t\n \t});\n\n \treturn RouterModel;\n\n });\n\n",
    "define('core/js/views/adaptView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var AdaptView = Backbone.View.extend({\n\n        attributes: function() {\n            return {\n                \"data-adapt-id\": this.model.get('_id')\n            };\n        },\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.listenTo(this.model, 'change:_isVisible', this.toggleVisibility);\n            this.listenTo(this.model, 'change:_isHidden', this.toggleHidden);\n            this.model.set('_globals', Adapt.course.get('_globals'));\n            this.model.set('_isReady', false);\n            this._isRemoved = false;\n            this.preRender();\n            this.render();\n            this.setupOnScreenHandler();\n        },\n\n        preRender: function() {},\n\n        postRender: function() {\n            this.addChildren();\n        },\n\n        render: function() {\n            Adapt.trigger(this.constructor.type + 'View:preRender', this);\n\n            var data = this.model.toJSON();\n            data.view = this;\n            var template = Handlebars.templates[this.constructor.template];\n            this.$el.html(template(data));\n\n            _.defer(_.bind(function() {\n                // don't call postRender after remove\n                if(this._isRemoved) return;\n\n                this.postRender();\n                Adapt.trigger(this.constructor.type + 'View:postRender', this);\n            }, this));\n\n            return this;\n        },\n\n        setupOnScreenHandler: function() {\n            var onscreen = this.model.get('_onScreen');\n\n            if (!onscreen || !onscreen._isEnabled) return;\n\n            this.$el.on('onscreen.adaptView', _.bind(function (e, m) {\n\n                if (!m.onscreen) return;\n\n                var minVerticalInview = onscreen._percentInviewVertical || 33;\n\n                if (m.percentInviewVertical < minVerticalInview) return;\n\n                this.$el.addClass( onscreen._classes || 'onscreen' ).off('onscreen.adaptView');\n\n            }, this));\n        },\n\n        addChildren: function() {\n            var nthChild = 0;\n            var children = this.model.getChildren();\n            var models = children.models;\n            for (var i = 0, len = models.length; i < len; i++) {\n                var model = models[i];\n                if (model.get('_isAvailable')) {\n                    nthChild ++;\n\n                    var ChildView;\n                    var ViewModelObject = this.constructor.childView || Adapt.componentStore[model.get(\"_component\")];\n\n                    //use view+model object\n                    if (ViewModelObject.view) ChildView = ViewModelObject.view;\n                    //use view only object\n                    else ChildView = ViewModelObject;\n\n                    if (ChildView) {\n                        var $parentContainer = this.$(this.constructor.childContainer);\n                        model.set(\"_nthChild\", nthChild);\n                        if (Adapt.config.get(\"_defaultDirection\") == 'rtl' && model.get(\"_type\") == 'component') {\n                            $parentContainer.prepend(new ChildView({model:model}).$el);\n                        } else {\n                            $parentContainer.append(new ChildView({model:model}).$el);\n                        }\n                    } else {\n                        throw 'The component \\'' + models[i].attributes._id + '\\'' +\n                              ' (\\'' + models[i].attributes._component + '\\')' +\n                              ' has not been installed, and so is not available in your project.';\n                    }\n                }\n            }\n        },\n\n        setReadyStatus: function() {\n            this.model.set('_isReady', true);\n        },\n\n        setCompletionStatus: function() {\n            if (this.model.get('_isVisible')) {\n                this.model.set('_isComplete', true);\n                this.model.set('_isInteractionComplete', true);\n            }\n        },\n\n        resetCompletionStatus: function(type) {\n            if (!this.model.get(\"_canReset\")) return;\n\n            var descendantComponents = this.model.findDescendantModels('components');\n            if (descendantComponents.length === 0) {\n                this.model.reset(type);\n            } else {\n                _.each(descendantComponents, function(model) {\n                    model.reset(type);\n                });\n            }\n        },\n\n        preRemove: function() {},\n\n        remove: function() {\n\n            this.preRemove();\n            this._isRemoved = true;\n\n            Adapt.wait.for(function(end) {\n\n                this.$el.off('onscreen.adaptView');\n                this.model.setOnChildren('_isReady', false);\n                this.model.set('_isReady', false);\n                Backbone.View.prototype.remove.call(this);\n\n                end();\n            }.bind(this));\n\n            return this;\n        },\n\n        setVisibility: function() {\n            var visible = \"visibility-hidden\";\n            if (this.model.get('_isVisible')) {\n                visible = \"\";\n            }\n            return visible;\n        },\n\n        toggleVisibility: function() {\n            if (this.model.get('_isVisible')) {\n                return this.$el.removeClass('visibility-hidden');\n            }\n            this.$el.addClass('visibility-hidden');\n        },\n\n        setHidden: function() {\n            var hidden = \"\";\n            if (this.model.get('_isHidden')) {\n                hidden = \"display-none\";\n            }\n            return hidden;\n        },\n\n        toggleHidden: function() {\n            if (!this.model.get('_isHidden')) {\n                return this.$el.removeClass('display-none');\n            }\n            this.$el.addClass('display-none');\n        }\n    });\n\n    return AdaptView;\n\n});\n\n",
    "define('core/js/views/blockView',[\n    'core/js/views/adaptView'\n], function(AdaptView) {\n\n    var BlockView = AdaptView.extend({\n\n        className: function() {\n            return \"block \" + \n            this.model.get('_id') +\n            \" \" + this.model.get('_classes') + \n            \" \" + this.setVisibility() +\n            \" \" + this.setHidden() +\n            \" nth-child-\" +\n            this.model.get(\"_nthChild\");\n        }\n\n    }, {\n        childContainer: '.component-container',\n        type: 'block',\n        template: 'block'\n    });\n\n    return BlockView;\n\n});\n\n",
    "define('core/js/views/articleView',[\n    'core/js/views/adaptView',\n    'core/js/views/blockView'\n], function(AdaptView, BlockView) {\n\n    var ArticleView = AdaptView.extend({\n        \n        className: function() {\n            return \"article \" +\n            this.model.get('_id') +\n            \" \" + this.model.get('_classes') +\n            \" \" + this.setVisibility() +\n            \" \" + this.setHidden() +\n            \" nth-child-\" +\n            this.model.get(\"_nthChild\");\n        }\n\n    }, {\n        childContainer: '.block-container',\n        childView: BlockView,\n        type: 'article',\n        template: 'article'\n    });\n\n    return ArticleView;\n\n});\n\n",
    "define('core/js/views/pageView',[\n    'core/js/adapt',\n    'core/js/views/adaptView',\n    'core/js/views/articleView'\n], function(Adapt, AdaptView, ArticleView) {\n\n    var PageView = AdaptView.extend({\n        \n        className: function() {\n            return \"page \" + \n            this.model.get('_id') + \n            \" \" + this.model.get('_classes') + \n            \" \" + this.setVisibility();\n        },\n\n        preRender: function() {\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n            this.$el.css('opacity', 0);\n            this.listenTo(this.model, 'change:_isReady', this.isReady);\n\n            var accessibility = Adapt.config.get('_accessibility');\n            if (!accessibility._isEnabled && !accessibility._isEnabledOnTouchDevices) {\n                return;\n            }\n            // create aria-label outside of #wrapper\n            this.$pageLabel = $('<div/>', {\n                'class': 'aria-label relative a11y-ignore-focus prevent-default',\n                tabindex: 0,\n                role: 'region',\n                text: Adapt.course.get('_globals')._accessibility._ariaLabels.pageEnd\n            }).appendTo('body');\n        },\n\n        isReady: function() {\n            if (this.model.get('_isReady')) {\n                _.defer(_.bind(function() {\n                    $('.loading').hide();\n                    $(window).scrollTop(0);\n                    Adapt.trigger('pageView:ready', this);\n                    var styleOptions = { opacity: 1 };\n                    if (this.disableAnimation) {\n                        this.$el.css(styleOptions);\n                        $.inview();\n                    } else {\n                        this.$el.velocity(styleOptions, {\n                            duration: 'fast',\n                            complete: function() {\n                                $.inview();\n                            }\n                        });\n                    }\n                    $(window).scroll();\n                }, this));\n            }\n        },\n\n        remove: function() {\n            if (this.$pageLabel) {\n                this.$pageLabel.remove();\n            }\n            AdaptView.prototype.remove.call(this);\n        }\n\n    }, {\n        childContainer: '.article-container',\n        childView: ArticleView,\n        type: 'page',\n        template: 'page'\n    });\n\n    return PageView;\n\n});\n",
    "define('core/js/router',[\n    'core/js/adapt',\n    'core/js/models/routerModel',\n    'core/js/views/pageView',\n    'core/js/startController'\n], function(Adapt, RouterModel, PageView) {\n\n    Adapt.router = new RouterModel(null, { reset: true });\n\n    var Router = Backbone.Router.extend({\n\n        // Flag to indicate if the router has tried to redirect to the current location.\n        _isCircularNavigationInProgress: false,\n\n        initialize: function() {\n            this.showLoading();\n\n            // Store #wrapper element and html to cache for later use.\n            this.$wrapper = $('#wrapper');\n            this.$html = $('html');\n\n            Adapt.once('app:dataReady', function() {\n                document.title = Adapt.course.get('title');\n            });\n\n            this.listenTo(Adapt, {\n                'navigation:backButton': this.navigateToPreviousRoute,\n                'navigation:homeButton': this.navigateToHomeRoute,\n                'navigation:skipNavigation': this.skipNavigation,\n                'navigation:parentButton': this.navigateToParent,\n                'router:navigateTo': this.navigateToArguments\n            });\n        },\n\n        routes: {\n            '': 'handleRoute',\n            'id/:id': 'handleRoute',\n            ':pluginName(/*location)(/*action)': 'handleRoute'\n        },\n\n        pruneArguments: function(args) {\n            var prunedArgs = _.toArray(args);\n\n            if (prunedArgs.length !== 0) {\n                // Remove any null arguments.\n                prunedArgs = _.without(args, null);\n            }\n\n            return prunedArgs;\n        },\n\n        handleRoute: function() {\n            var args = this.pruneArguments(arguments);\n            \n            if (Adapt.router.get('_canNavigate')) {\n                // Reset _isCircularNavigationInProgress protection as code is allowed to navigate away.\n                this._isCircularNavigationInProgress = false;\n            }\n\n            // Check if the current page is in the process of navigating to itself.\n            // It will redirect to itself if the URL was changed and _canNavigate is false.\n            if (this._isCircularNavigationInProgress === false) {\n                // Trigger an event pre 'router:location' to allow extensions to stop routing.\n                Adapt.trigger('router:navigate', args);\n            }\n\n            // Re-check as _canNavigate can be set to false on 'router:navigate' event.\n            if (Adapt.router.get('_canNavigate')) {\n                // Disable navigation whilst rendering.\n                Adapt.router.set('_canNavigate', false, { pluginName: 'adapt' });\n\n                switch (args.length) {\n                    case 1:\n                        // If only one parameter assume it's the ID.\n                        return this.handleId.apply(this, args);\n                    case 2:\n                        // If there are two parameters assume it's a plugin.\n                        return this.handlePluginRouter.apply(this, args);\n                    default:\n                        // Route to course home page.\n                        return this.handleCourse();\n                }\n            }\n\n            if (this._isCircularNavigationInProgress) {\n                // Navigation correction finished.\n                // Router has successfully re-navigated to the current _id as the URL was changed \n                // while _canNavigate: false\n                this._isCircularNavigationInProgress = false;\n                return;\n            }\n\n            // Cancel navigation to stay at the current location.\n            this._isCircularNavigationInProgress = true;\n            Adapt.trigger('router:navigationCancelled', args);\n\n            // Reset URL to the current one.\n            this.navigateToCurrentRoute(true);\n        },\n\n        handlePluginRouter: function(pluginName, location, action) {\n            var pluginLocation = pluginName;\n\n            if (location) {\n                pluginLocation = pluginLocation + '-' +location;\n\n                if (action) {\n                    pluginLocation = pluginLocation + '-' + action;\n                }\n            }\n\n            this.updateLocation(pluginLocation, null, null, function() {\n                Adapt.trigger('router:plugin:' + pluginName, pluginName, location, action);\n                Adapt.trigger('router:plugin', pluginName, location, action);\n\n                Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\n            });\n        },\n\n        handleCourse: function() {\n            if (Adapt.course.has('_start')) {\n                // Do not allow access to the menu when the start controller is enabled.\n                var startController = Adapt.course.get('_start');\n\n                if (startController._isEnabled == true && startController._isMenuDisabled == true) {\n                    return;\n                }\n            }\n\n            this.showLoading();\n\n            this.removeViews(_.bind(function() {\n                Adapt.course.set('_isReady', false);\n\n                this.setContentObjectToVisited(Adapt.course);\n                \n                this.updateLocation('course', null, null, _.bind(function() {\n                    Adapt.once('menuView:ready', function() {\n                        // Allow navigation.\n                        Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\n                    });\n\n                    Adapt.trigger('router:menu', Adapt.course);\n                }, this));\n            }, this));\n        },\n\n        handleId: function(id) {\n            var currentModel = Adapt.findById(id);\n            var type = '';\n\n            if (!currentModel) {\n                Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\n                return;\n            }\n\n            type = currentModel.get('_type');\n\n            switch (type) {\n                case 'page':\n                case 'menu':\n                    if (currentModel.get('_isLocked') && Adapt.config.get('_forceRouteLocking')) {\n                        Adapt.log.warn('Unable to navigate to locked id: ' + id);\n                        Adapt.router.set('_canNavigate', true, {pluginName: 'adapt'});\n                        if (Adapt.location._previousId === undefined) {\n                            return this.navigate('#/', { trigger: true, replace: true });\n                        } else {\n                            return Backbone.history.history.back();\n                        }\n                    } else {\n                        this.showLoading();\n                        this.removeViews(_.bind(function() {\n\n                            this.setContentObjectToVisited(currentModel);\n\n                            if (type == 'page') {\n                                var location = 'page-' + id;\n                                this.updateLocation(location, 'page', id, _.bind(function() {\n                                    Adapt.once('pageView:ready', function() {\n                                        // Allow navigation.\n                                        Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\n                                    });\n                                    Adapt.trigger('router:page', currentModel);\n                                    this.$wrapper.append(new PageView({ model: currentModel }).$el);\n                                }, this));\n                            } else {\n                                var location = 'menu-' + id;\n                                this.updateLocation(location, 'menu', id, _.bind(function() {\n                                    Adapt.once('menuView:ready', function() {\n                                        // Allow navigation.\n                                        Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\n                                    });\n                                    Adapt.trigger('router:menu', currentModel);\n                                }, this));\n                            }\n                        }, this));\n                    }\n                    break;\n                default:\n                    // Allow navigation.\n                    Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\n                    Adapt.navigateToElement('.' + id, { replace: true });\n            }\n        },\n\n        removeViews: function(onComplete) {\n            Adapt.remove();\n\n            Adapt.wait.queue(onComplete);\n        },\n\n        showLoading: function() {\n            $('.loading').show();\n        },\n\n        navigateToArguments: function(args) {\n            args = this.pruneArguments(args);\n\n            var options = { trigger: false, replace: false };\n\n            switch (args.length) {\n                case 0:\n                    this.navigate('#/', options);\n                    break;\n                case 1:\n                    if (Adapt.findById(args[0])) {\n                        this.navigate('#/id/' + args[0], options);\n                    } else {\n                        this.navigate('#/' + args[0], options);\n                    }\n                    break;\n                case 2:\n                case 3:\n                    this.navigate('#/' + args.join('/'), options);\n                    break;\n                default:\n                    Adapt.log.warn('DEPRECATED - use Backbone.history.navigate or ' +\n                        'window.location.href instead of Adapt.trigger(\"router:navigateTo\")');\n                    this.handleRoute.apply(this, args);\n            }\n        },\n\n        skipNavigation: function() {\n             $('.' + Adapt.location._contentType).a11y_focus();\n        },\n\n        navigateToPreviousRoute: function(force) {\n            // Sometimes a plugin might want to stop the default navigation.\n            // Check whether default navigation has changed.\n            if (Adapt.router.get('_canNavigate') || force) {\n                if (!Adapt.location._currentId) {\n                    return Backbone.history.history.back();\n                }\n                if (Adapt.location._previousContentType === 'page' && Adapt.location._contentType === 'menu') {\n                    return this.navigateToParent();\n                }\n                if (Adapt.location._previousContentType === 'page') {\n                    return Backbone.history.history.back();\n                }\n                if (Adapt.location._currentLocation === 'course') {\n                    return;\n                }\n                this.navigateToParent();\n            }\n        },\n\n        navigateToHomeRoute: function(force) {\n            if (Adapt.router.get('_canNavigate') || force ) {\n                this.navigate('#/', { trigger: true });\n            }\n        },\n\n        navigateToCurrentRoute: function(force) {\n            if (Adapt.router.get('_canNavigate') || force) {\n                if (!Adapt.location._currentId) {\n                    return;\n                }\n                var currentId = Adapt.location._currentId;\n                var route = (currentId === Adapt.course.get('_id')) ? '#/' : '#/id/' + currentId;\n                this.navigate(route, { trigger: true, replace: true });\n            }\n        },\n\n        navigateToParent: function(force) {\n            if (Adapt.router.get('_canNavigate') || force) {\n                var parentId = Adapt.contentObjects.findWhere({ _id: Adapt.location._currentId }).get('_parentId');\n                var route = (parentId === Adapt.course.get('_id')) ? '#/' : '#/id/' + parentId;\n                this.navigate(route, { trigger: true });\n            }\n        },\n\n        setContentObjectToVisited: function(model) {\n            model.set('_isVisited', true);\n        },\n\n        updateLocation: function(currentLocation, type, id, onComplete) {\n            // Handles updating the location.\n            Adapt.location._previousId = Adapt.location._currentId;\n            Adapt.location._previousContentType = Adapt.location._contentType;\n\n            if (currentLocation === 'course') {\n                Adapt.location._currentId = Adapt.course.get('_id');\n                Adapt.location._contentType = 'menu';\n                Adapt.location._lastVisitedMenu = currentLocation;\n            } else if (!type) {\n                Adapt.location._currentId = null;\n                Adapt.location._contentType = null;\n            } else if (_.isString(id)) {\n                Adapt.location._currentId = id;\n                Adapt.location._contentType = type;\n\n                if (type === 'menu') {\n                    Adapt.location._lastVisitedType = 'menu';\n                    Adapt.location._lastVisitedMenu = id;\n                } else if (type === 'page') {\n                    Adapt.location._lastVisitedType = 'page';\n                    Adapt.location._lastVisitedPage = id;\n                }\n            }\n\n            Adapt.location._currentLocation = currentLocation;\n\n            var classes = (Adapt.location._currentId) ? 'location-'\n                    + Adapt.location._contentType\n                    + ' location-id-'\n                    + Adapt.location._currentId :\n                    'location-' + Adapt.location._currentLocation;\n\n            var previousClasses = Adapt.location._previousClasses;\n            if (previousClasses) {\n                this.$html.removeClass(previousClasses);\n            }\n            Adapt.location._previousClasses = classes;\n\n            this.$html\n                .addClass(classes)\n                .attr('data-location', Adapt.location._currentLocation);\n                \n            this.$wrapper\n                .removeClass()\n                .addClass(classes)\n                .attr('data-location', Adapt.location._currentLocation);\n\n            this.setDocumentTitle();\n\n            // Trigger event when location changes.\n            Adapt.trigger('router:location', Adapt.location);\n\n            Adapt.wait.queue(onComplete);\n        },\n\n        setDocumentTitle: function() {\n            if (!Adapt.location._currentId) return;\n\n            var currentModel = Adapt.findById(Adapt.location._currentId);\n            var pageTitle = '';\n\n            if (currentModel && currentModel.get('_type') !== 'course') {\n                var currentTitle = currentModel.get('title');\n                \n                if (currentTitle) {\n                    pageTitle = ' | ' + currentTitle;\n                }\n            }\n\n            var courseTitle = Adapt.course.get('title');\n            var documentTitle = $('<div>' + courseTitle + pageTitle + '</div>').text();\n\n            Adapt.once('pageView:ready menuView:ready', function() {\n                document.title = documentTitle;\n            });\n        }\n    });\n\n    return new Router({ model: new Backbone.Model() });\n\n});\n\n",
    "define('core/js/helpers',[\n    'handlebars',\n    'core/js/adapt'\n], function(Handlebars, Adapt){\n\n    var helpers = {\n\n        lowercase: function(text) {\n            return text.toLowerCase();\n        },\n        \n        capitalise:  function(text) {\n            return text.charAt(0).toUpperCase() + text.slice(1);\n        },\n\n        inc: function(index) {\n            return index+1;\n        },\n\n        dec: function(index) {\n            return index-1;\n        },\n\n        odd: function (index) {\n            return (index +1) % 2 === 0  ? 'even' : 'odd';\n        },\n\n        equals: function(value, text, block) {\n            return helpers.compare.call(this, value, \"==\", text, block);\n        },\n\n        compare: function(value, operator, text, block) {\n            // Comparison operators\n            switch (operator) {\n            case \"===\":\n                if (value === text) return block.fn(this);\n                break;\n            case \"=\": case \"==\":\n                if (value == text) return block.fn(this);\n                break;\n            case \">=\":\n                if (value >= text) return block.fn(this);\n                break;\n            case \"<=\":\n                if (value <= text) return block.fn(this);\n                break;\n            case \">\":\n                if (value > text) return block.fn(this);\n                break;\n            case \"<\":\n                if (value < text) return block.fn(this);\n                break;\n            }\n            return block.inverse(this);\n        },\n\n        math: function(lvalue, operator, rvalue, options) {\n            // Mathematical operators\n            lvalue = parseFloat(lvalue);\n            rvalue = parseFloat(rvalue);\n            switch (operator) {\n            case \"+\": return lvalue + rvalue;\n            case \"-\": return lvalue - rvalue;\n            case \"*\": return lvalue * rvalue;\n            case \"/\": return lvalue / rvalue;\n            case \"%\": return lvalue % rvalue;\n            }\n        },\n\n        /**\n         * Allow JSON to be a template i.e. you can use handlebars {{expressions}} within your JSON\n         */\n        compile: function(template, context) {\n            if (!template) return \"\";\n            if (template instanceof Object) template = template.toString();\n            var data = this;\n            if (context) {\n                // choose between a passed argument context or the default handlebars helper context\n                data = (!context.data || !context.data.root ? context : context.data.root);\n            }\n            return Handlebars.compile(template)(data);\n        },\n\n        /**\n         * Allow JSON to be a template and accessible text\n         */\n        compile_a11y_text: function(template, context) {\n            if (!template) return \"\";\n            if (template instanceof Object) template = template.toString();\n            return Handlebars.helpers.a11y_text.call(this, helpers.compile.call(this, template, context));\n        },\n\n        /**\n         * Allow JSON to be a template and normalized text\n         */\n        compile_a11y_normalize: function(template, context) {\n            if (!template) return \"\";\n            if (template instanceof Object) template = template.toString();\n            return Handlebars.helpers.a11y_normalize.call(this, helpers.compile.call(this, template, context));\n        },\n\n        /**\n         * makes the _globals object in course.json available to a template\n         */ \n        import_globals: function(context) {\n            if(!context.data.root._globals) {\n                context.data.root._globals = Adapt.course.get('_globals');\n            }\n            return \"\";\n        }\n\n    };\n\n    // Compatibility references\n    helpers['if_value_equals'] = helpers['equals'];\n    helpers['numbers'] = helpers['inc'];\n    helpers['lowerCase'] = helpers['lowercase'];\n\n    for (var name in helpers) {\n        if (helpers.hasOwnProperty(name)) {\n             Handlebars.registerHelper(name, helpers[name]);\n        }\n    }\n\n    return helpers;\n\n});\n\n",
    "define('core/js/views/componentView',[\n    'core/js/adapt',\n    'core/js/views/adaptView'\n], function(Adapt, AdaptView) {\n\n    var ComponentView = AdaptView.extend({\n\n        className: function() {\n            return \"component \" + \n            this.model.get('_component') + \n            \"-component \" + this.model.get('_id') + \n            \" \" + this.model.get('_classes') + \n            \" \" + this.setVisibility() +\n            \" \" + this.setHidden() +\n            \" component-\" + this.model.get('_layout') + \n            \" nth-child-\" + this.model.get(\"_nthChild\");\n        },\n\n        initialize: function(){\n\t\t\t//standard initialization + renderState function\n            AdaptView.prototype.initialize.apply(this, arguments);\n            this.renderState();\n        },\n\n        renderState: function() {\n            if (!Handlebars.partials['state']) return;\n\n\t\t\t// do not perform if component has .not-accessible class\n            if (this.$el.is(\".not-accessible\")) return;\n\t\t\t// do not perform if component has .no-state class\n            if (this.$el.is(\".no-state\")) return;\n\n\t\t\t//remove pre-exisiting states\n            var $previousState = this.$(\".accessibility-state\").remove();\n\n            //render and append state partial\n            var $rendered = $(Handlebars.partials['state']( this.model.toJSON() ));\n\n            //restore previous tab index if not on\n            var previousTabIndex = $previousState.find(\".aria-label\").attr(\"tabindex\");\n            if (previousTabIndex == \"-1\") {\n                $rendered.find(\".aria-label\").attr(\"tabindex\", previousTabIndex);\n            }\n\n            this.$el.append( $rendered );\n\n            this.listenToOnce(this.model, 'change:_isComplete', this.renderState);\n        },\n\n        postRender: function() {}\n\n    }, {\n        type:'component'\n    });\n\n    return ComponentView;\n\n});\n\n",
    "define('components/adapt-contrib-accordion/js/adapt-contrib-accordion',['require','coreViews/componentView','coreJS/adapt'],function(require) {\n\n    var ComponentView = require('coreViews/componentView');\n    var Adapt = require('coreJS/adapt');\n\n    var Accordion = ComponentView.extend({\n\n        events: {\n            'click .accordion-item-title': 'toggleItem'\n        },\n\n        toggleSpeed: 200,\n\n        preRender: function() {\n            // Checks to see if the accordion should be reset on revisit\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.setReadyStatus();\n        },\n\n        // Used to check if the accordion should reset on revisit\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n\n                _.each(this.model.get('_items'), function(item) {\n                    item._isVisited = false;\n                });\n            }\n        },\n\n        toggleItem: function(event) {\n            event.preventDefault();\n\n            var $toggleButton = $(event.currentTarget);\n            var $accordionItem = $toggleButton.parent('.accordion-item');\n            var isCurrentlyExpanded = $toggleButton.hasClass('selected');\n\n            if (this.model.get('_shouldCollapseItems') === false) {\n                // Close and reset the selected Accordion item only\n                this.closeItem($accordionItem);\n            } else {\n                // Close and reset all Accordion items\n                var allAccordionItems = this.$('.accordion-item');\n                var count = allAccordionItems.length;\n                for (var i = 0; i < count; i++) {\n                    this.closeItem($(allAccordionItems[i]));\n                }\n            }\n\n            if (!isCurrentlyExpanded) {\n                this.openItem($accordionItem);\n            }\n        },\n\n        closeItem: function($itemEl) {\n            if (!$itemEl) {\n                return false;\n            }\n\n            var $body = $('.accordion-item-body', $itemEl).first();\n            var $button = $('button', $itemEl).first();\n            var $icon = $('.accordion-item-title-icon', $itemEl).first();\n\n            $body.stop(true, true).slideUp(this.toggleSpeed);\n            $button.removeClass('selected');\n            $button.attr('aria-expanded', false);\n            $icon.addClass('icon-plus');\n            $icon.removeClass('icon-minus');\n        },\n\n        openItem: function($itemEl) {\n            if (!$itemEl) {\n                return false;\n            }\n\n            var $body = $('.accordion-item-body', $itemEl).first();\n            var $button = $('button', $itemEl).first();\n            var $icon = $('.accordion-item-title-icon', $itemEl).first();\n\n            $body = $body.stop(true, true).slideDown(this.toggleSpeed, function() {\n                $body.a11y_focus();\n            });\n\n            $button.addClass('selected');\n            $button.attr('aria-expanded', true);\n\n            this.setVisited($itemEl.index());\n            $button.addClass('visited');\n\n            $icon.removeClass('icon-plus');\n            $icon.addClass('icon-minus');\n        },\n\n        setVisited: function(index) {\n            var item = this.model.get('_items')[index];\n            item._isVisited = true;\n            this.checkCompletionStatus();\n        },\n\n        getVisitedItems: function() {\n            return _.filter(this.model.get('_items'), function(item) {\n                return item._isVisited;\n            });\n        },\n\n        checkCompletionStatus: function() {\n            if (this.getVisitedItems().length == this.model.get('_items').length) {\n                this.setCompletionStatus();\n            }\n        }\n\n    });\n\n    Adapt.register('accordion', Accordion);\n\n    return Accordion;\n\n});\n\n",
    "define('components/adapt-contrib-blank/js/adapt-contrib-blank',['require','coreViews/componentView','coreJS/adapt'],function(require) {\n\n    var ComponentView = require('coreViews/componentView');\n    var Adapt = require('coreJS/adapt');\n\n    var Blank = ComponentView.extend({\n\n\n        preRender: function() {\n            this.$el.addClass(\"no-state\");\n            // Checks to see if the blank should be reset on revisit\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.setReadyStatus();\n            this.$('.component-inner').on('inview', _.bind(this.inview, this));\n        },\n\n        // Used to check if the blank should reset on revisit\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        },\n\n        inview: function(event, visible, visiblePartX, visiblePartY) {\n            if (visible) {\n                if (visiblePartY === 'top') {\n                    this._isVisibleTop = true;\n                } else if (visiblePartY === 'bottom') {\n                    this._isVisibleBottom = true;\n                } else {\n                    this._isVisibleTop = true;\n                    this._isVisibleBottom = true;\n                }\n\n                if (this._isVisibleTop && this._isVisibleBottom) {\n                    this.$('.component-inner').off('inview');\n                    this.setCompletionStatus();\n                }\n\n            }\n        }\n\n    });\n\n    Adapt.register('blank', Blank);\n\n    return Blank;\n\n});\n\n",
    "define('components/adapt-contrib-graphic/js/adapt-contrib-graphic',['require','coreViews/componentView','coreJS/adapt'],function(require) {\n\n    var ComponentView = require('coreViews/componentView');\n    var Adapt = require('coreJS/adapt');\n\n    var Graphic = ComponentView.extend({\n\n        preRender: function() {\n            this.listenTo(Adapt, 'device:changed', this.resizeImage);\n\n            // Checks to see if the graphic should be reset on revisit\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.resizeImage(Adapt.device.screenSize, true);\n        },\n\n        // Used to check if the graphic should reset on revisit\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        },\n\n        inview: function(event, visible, visiblePartX, visiblePartY) {\n            if (visible) {\n                if (visiblePartY === 'top') {\n                    this._isVisibleTop = true;\n                } else if (visiblePartY === 'bottom') {\n                    this._isVisibleBottom = true;\n                } else {\n                    this._isVisibleTop = true;\n                    this._isVisibleBottom = true;\n                }\n\n                if (this._isVisibleTop && this._isVisibleBottom) {\n                    this.$('.component-widget').off('inview');\n                    this.setCompletionStatus();\n                }\n\n            }\n        },\n\n        remove: function() {\n          // Remove any 'inview' listener attached.\n          this.$('.component-widget').off('inview');\n\n          ComponentView.prototype.remove.apply(this, arguments);\n        },\n\n        resizeImage: function(width, setupInView) {\n            var imageWidth = width === 'medium' ? 'small' : width;\n            var imageSrc = (this.model.get('_graphic')) ? this.model.get('_graphic')[imageWidth] : '';\n            this.$('.graphic-widget img').attr('src', imageSrc);\n\n            this.$('.graphic-widget').imageready(_.bind(function() {\n                this.setReadyStatus();\n\n                if (setupInView) {\n                    // Bind 'inview' once the image is ready.\n                    this.$('.component-widget').on('inview', _.bind(this.inview, this));\n                }\n            }, this));\n        }\n    });\n\n    Adapt.register('graphic', Graphic);\n\n    return Graphic;\n\n});\n\n",
    "define('components/adapt-contrib-media/js/adapt-contrib-media',[\n    'core/js/adapt',\n    'core/js/views/componentView',\n    'libraries/mediaelement-and-player',\n    'libraries/mediaelement-and-player-accessible-captions',\n    'libraries/mediaelement-fullscreen-hook'\n], function(Adapt, ComponentView) {\n\n    var froogaloopAdded = false;\n\n    // The following function is used to to prevent a memory leak in Internet Explorer\n    // See: http://javascript.crockford.com/memory/leak.html\n    function purge(d) {\n        var a = d.attributes, i, l, n;\n        if (a) {\n            for (i = a.length - 1; i >= 0; i -= 1) {\n                n = a[i].name;\n                if (typeof d[n] === 'function') {\n                    d[n] = null;\n                }\n            }\n        }\n        a = d.childNodes;\n        if (a) {\n            l = a.length;\n            for (i = 0; i < l; i += 1) {\n                purge(d.childNodes[i]);\n            }\n        }\n    }\n\n    var Media = ComponentView.extend({\n\n        events: {\n            \"click .media-inline-transcript-button\": \"onToggleInlineTranscript\",\n            \"click .media-external-transcript-button\": \"onExternalTranscriptClicked\"\n        },\n\n        preRender: function() {\n            this.listenTo(Adapt, {\n                'device:resize': this.onScreenSizeChanged,\n                'device:changed': this.onDeviceChanged,\n                'accessibility:toggle': this.onAccessibilityToggle,\n                'media:stop': this.onMediaStop\n            });\n\n            _.bindAll(this, 'onMediaElementPlay', 'onMediaElementPause', 'onMediaElementEnded', 'onMediaElementTimeUpdate', 'onMediaElementSeeking');\n\n            // set initial player state attributes\n            this.model.set({\n                '_isMediaEnded': false,\n                '_isMediaPlaying': false\n            });\n\n            if (this.model.get('_media').source) {\n                // Remove the protocol for streaming service.\n                // This prevents conflicts with HTTP/HTTPS\n                var media = this.model.get('_media');\n\n                media.source = media.source.replace(/^https?\\:/, \"\");\n\n                this.model.set('_media', media); \n            }\n\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.setupPlayer();\n        },\n\n        setupPlayer: function() {\n            if (!this.model.get('_playerOptions')) this.model.set('_playerOptions', {});\n\n            var modelOptions = this.model.get('_playerOptions');\n\n            if (modelOptions.pluginPath === undefined) modelOptions.pluginPath = 'assets/';\n            if(modelOptions.features === undefined) {\n                modelOptions.features = ['playpause','progress','current','duration'];\n                if (this.model.get('_useClosedCaptions')) {\n                    modelOptions.features.unshift('tracks');\n                }\n                if (this.model.get(\"_allowFullScreen\") && !$(\"html\").is(\".ie9\")) {\n                    modelOptions.features.push('fullscreen');\n                }\n                if (this.model.get('_showVolumeControl')) {\n                    modelOptions.features.push('volume');\n                }\n            }\n\n            modelOptions.success = _.bind(this.onPlayerReady, this);\n\n            if (this.model.get('_useClosedCaptions')) {\n                modelOptions.startLanguage = this.model.get('_startLanguage') === undefined ? 'en' : this.model.get('_startLanguage');\n            }\n\n            var hasAccessibility = Adapt.config.has('_accessibility') && Adapt.config.get('_accessibility')._isActive\n                ? true\n                : false;\n\n            if (hasAccessibility) {\n                modelOptions.alwaysShowControls = true;\n                modelOptions.hideVideoControlsOnLoad = false;\n            }\n\n            if (modelOptions.alwaysShowControls === undefined) {\n                modelOptions.alwaysShowControls = false;\n            }\n            if (modelOptions.hideVideoControlsOnLoad === undefined) {\n                modelOptions.hideVideoControlsOnLoad = true;\n            }\n\n            this.addMediaTypeClass();\n\n            this.addThirdPartyFixes(modelOptions, _.bind(function createPlayer() {\n                // create the player\n                this.$('audio, video').mediaelementplayer(modelOptions);\n\n                // We're streaming - set ready now, as success won't be called above\n                try {\n                    if (this.model.get('_media').source) {\n                        this.$('.media-widget').addClass('external-source');\n                    }\n                } catch (e) {\n                    console.log(\"ERROR! No _media property found in components.json for component \" + this.model.get('_id'));\n                } finally {\n                    this.setReadyStatus();\n                }\n            }, this));\n        },\n\n        addMediaTypeClass: function() {\n            var media = this.model.get(\"_media\");\n            if (media && media.type) {\n                var typeClass = media.type.replace(/\\//, \"-\");\n                this.$(\".media-widget\").addClass(typeClass);\n            }\n        },\n\n        addThirdPartyFixes: function(modelOptions, callback) {\n            var media = this.model.get(\"_media\");\n            if (!media) return callback();\n\n            switch (media.type) {\n                case \"video/vimeo\":\n                    modelOptions.alwaysShowControls = false;\n                    modelOptions.hideVideoControlsOnLoad = true;\n                    modelOptions.features = [];\n                    if (froogaloopAdded) return callback();\n                    Modernizr.load({\n                        load: \"assets/froogaloop.js\",\n                        complete: function() {\n                            froogaloopAdded = true;\n                            callback();\n                        }\n                    });\n                    break;\n                default:\n                    callback();\n            }\n        },\n\n        setupEventListeners: function() {\n            this.completionEvent = (!this.model.get('_setCompletionOn')) ? 'play' : this.model.get('_setCompletionOn');\n\n            if (this.completionEvent === 'inview') {\n                this.$('.component-widget').on('inview', _.bind(this.inview, this));\n            }\n\n            // wrapper to check if preventForwardScrubbing is turned on.\n            if ((this.model.get('_preventForwardScrubbing')) && (!this.model.get('_isComplete'))) {\n                $(this.mediaElement).on({\n                    'seeking': this.onMediaElementSeeking,\n                    'timeupdate': this.onMediaElementTimeUpdate\n                });\n            }\n            \n            // handle other completion events in the event Listeners \n            $(this.mediaElement).on({\n            \t'play': this.onMediaElementPlay,\n            \t'pause': this.onMediaElementPause,\n            \t'ended': this.onMediaElementEnded\n            });\n        },\n\n        onMediaElementPlay: function(event) {\n\n            Adapt.trigger(\"media:stop\", this);\n\n            this.model.set({\n                '_isMediaPlaying': true,\n                '_isMediaEnded': false\n            });\n            \n            if (this.completionEvent === 'play') {\n                this.setCompletionStatus();\n            }\n        },\n\n        onMediaElementPause: function(event) {\n            this.model.set('_isMediaPlaying', false);\n        },\n\n        onMediaElementEnded: function(event) {\n            this.model.set('_isMediaEnded', true);\n\n            if (this.completionEvent === 'ended') {\n                this.setCompletionStatus();\n            }\n        },\n        \n        onMediaElementSeeking: function(event) {\n            var maxViewed = this.model.get(\"_maxViewed\");\n            if(!maxViewed) {\n                maxViewed = 0;\n            }\n            if (event.target.currentTime > maxViewed) {\n                event.target.currentTime = maxViewed;\n            }\n        },\n\n        onMediaElementTimeUpdate: function(event) {\n            var maxViewed = this.model.get(\"_maxViewed\");\n            if (!maxViewed) {\n                maxViewed = 0;\n            }\n            if (event.target.currentTime > maxViewed) {\n                this.model.set(\"_maxViewed\", event.target.currentTime);\n            }\n        },\n\n        // Overrides the default play/pause functionality to stop accidental playing on touch devices\n        setupPlayPauseToggle: function() {\n            // bit sneaky, but we don't have a this.mediaElement.player ref on iOS devices\n            var player = this.mediaElement.player;\n\n            if (!player) {\n                console.log(\"Media.setupPlayPauseToggle: OOPS! there's no player reference.\");\n                return;\n            }\n\n            // stop the player dealing with this, we'll do it ourselves\n            player.options.clickToPlayPause = false;\n\n            this.onOverlayClick = _.bind(this.onOverlayClick, this);\n            this.onMediaElementClick = _.bind(this.onMediaElementClick, this);\n\n            // play on 'big button' click\n            this.$('.mejs-overlay-button').on(\"click\", this.onOverlayClick);\n\n            // pause on player click\n            this.$('.mejs-mediaelement').on(\"click\", this.onMediaElementClick);\n        },\n        \n        onMediaStop: function(view) {\n\n            // Make sure this view isn't triggering media:stop\n            if (view && view.cid === this.cid) return;\n\n            var player = this.mediaElement.player;\n            if (!player) return;\n            \n            player.pause();\n        },\n\n        onOverlayClick: function() {\n            var player = this.mediaElement.player;\n            if (!player) return;\n\n            player.play();\n        },\n\n        onMediaElementClick: function(event) {\n            var player = this.mediaElement.player;\n            if (!player) return;\n\n            var isPaused = player.media.paused;\n            if(!isPaused) player.pause();\n        },\n\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        },\n\n        inview: function(event, visible, visiblePartX, visiblePartY) {\n            if (visible) {\n                if (visiblePartY === 'top') {\n                    this._isVisibleTop = true;\n                } else if (visiblePartY === 'bottom') {\n                    this._isVisibleBottom = true;\n                } else {\n                    this._isVisibleTop = true;\n                    this._isVisibleBottom = true;\n                }\n\n                if (this._isVisibleTop && this._isVisibleBottom) {\n                    this.$('.component-inner').off('inview');\n                    this.setCompletionStatus();\n                }\n            }\n        },\n\n        remove: function() {\n            this.$('.mejs-overlay-button').off(\"click\", this.onOverlayClick);\n            this.$('.mejs-mediaelement').off(\"click\", this.onMediaElementClick);\n\n            var modelOptions = this.model.get('_playerOptions');\n            delete modelOptions.success;\n\n            var media = this.model.get(\"_media\");\n            if (media) {\n                switch (media.type) {\n                case \"video/vimeo\":\n                    this.$(\"iframe\")[0].isRemoved = true;\n                }\n            }\n\n            if ($(\"html\").is(\".ie8\")) {\n                var obj = this.$(\"object\")[0];\n                if (obj) {\n                    obj.style.display = \"none\";\n                }\n            }\n            if (this.mediaElement && this.mediaElement.player) {\n                var player_id = this.mediaElement.player.id;\n\n                purge(this.$el[0]);\n                this.mediaElement.player.remove();\n\n                if (mejs.players[player_id]) {\n                    delete mejs.players[player_id];\n                }\n            }\n\n            if (this.mediaElement) {\n                $(this.mediaElement).off({\n                    'play': this.onMediaElementPlay,\n                    'pause': this.onMediaElementPause,\n                    'ended': this.onMediaElementEnded,\n                    'seeking': this.onMediaElementSeeking,\n                    'timeupdate': this.onMediaElementTimeUpdate\n                });\n\n                this.mediaElement.src = \"\";\n                $(this.mediaElement.pluginElement).remove();\n                delete this.mediaElement;\n            }\n\n            ComponentView.prototype.remove.call(this);\n        },\n\n        onDeviceChanged: function() {\n            if (this.model.get('_media').source) {\n                this.$('.mejs-container').width(this.$('.component-widget').width());\n            }\n        },\n\n        onPlayerReady: function (mediaElement, domObject) {\n            this.mediaElement = mediaElement;\n\n            if (!this.mediaElement.player) {\n                this.mediaElement.player =  mejs.players[this.$('.mejs-container').attr('id')];\n            }\n\n            var hasTouch = mejs.MediaFeatures.hasTouch;\n            if (hasTouch) {\n                this.setupPlayPauseToggle();\n            }\n\n            this.addThirdPartyAfterFixes();\n\n            if(this.model.has('_startVolume')) {\n                // Setting the start volume only works with the Flash-based player if you do it here rather than in setupPlayer\n                this.mediaElement.player.setVolume(parseInt(this.model.get('_startVolume'))/100);\n            }\n\n            this.setReadyStatus();\n            this.setupEventListeners();\n        },\n\n        addThirdPartyAfterFixes: function() {\n            var media = this.model.get(\"_media\");\n            switch (media.type) {\n            case \"video/vimeo\":\n                this.$(\".mejs-container\").attr(\"tabindex\", 0);\n            }\n        },\n\n        onScreenSizeChanged: function() {\n            this.$('audio, video').width(this.$('.component-widget').width());\n        },\n\n        onAccessibilityToggle: function() {\n           this.showControls();\n        },\n\n        onToggleInlineTranscript: function(event) {\n            if (event) event.preventDefault();\n            var $transcriptBodyContainer = this.$(\".media-inline-transcript-body-container\");\n            var $button = this.$(\".media-inline-transcript-button\");\n\n            if ($transcriptBodyContainer.hasClass(\"inline-transcript-open\")) {\n                $transcriptBodyContainer.stop(true,true).slideUp(function() {\n                    $(window).resize();\n                });\n                $transcriptBodyContainer.removeClass(\"inline-transcript-open\");\n                $button.html(this.model.get(\"_transcript\").inlineTranscriptButton);\n            } else {\n                $transcriptBodyContainer.stop(true,true).slideDown(function() {\n                    $(window).resize();\n                }).a11y_focus();\n                $transcriptBodyContainer.addClass(\"inline-transcript-open\");\n                $button.html(this.model.get(\"_transcript\").inlineTranscriptCloseButton);\n\n                if (this.model.get('_transcript')._setCompletionOnView !== false) {\n                    this.setCompletionStatus();\n                }\n            }\n        },\n\n        onExternalTranscriptClicked: function(event) {\n            if (this.model.get('_transcript')._setCompletionOnView !== false) {\n                this.setCompletionStatus();\n            }\n        },\n\n        showControls: function() {\n            var hasAccessibility = Adapt.config.has('_accessibility') && Adapt.config.get('_accessibility')._isActive\n                ? true\n                : false;\n\n            if (hasAccessibility) {\n                if (!this.mediaElement.player) return;\n\n                var player = this.mediaElement.player;\n\n                player.options.alwaysShowControls = true;\n                player.options.hideVideoControlsOnLoad = false;\n                player.enableControls();\n                player.showControls();\n\n                this.$('.mejs-playpause-button button').attr({\n                    \"role\": \"button\"\n                });\n                var screenReaderVideoTagFix = $(\"<div role='region' aria-label='.'>\");\n                this.$('.mejs-playpause-button').prepend(screenReaderVideoTagFix);\n\n                this.$('.mejs-time, .mejs-time-rail').attr({\n                    \"aria-hidden\": \"true\"\n                });\n            }\n        }\n\n    });\n\n    Adapt.register('media', Media);\n\n    return Media;\n\n});\n\n",
    "define('components/adapt-contrib-narrative/js/adapt-contrib-narrative',['require','coreViews/componentView','coreJS/adapt'],function(require) {\n\n    var ComponentView = require('coreViews/componentView');\n    var Adapt = require('coreJS/adapt');\n\n    var Narrative = ComponentView.extend({\n\n        events: {\n            'click .narrative-strapline-title': 'openPopup',\n            'click .narrative-controls': 'onNavigationClicked',\n            'click .narrative-indicators .narrative-progress': 'onProgressClicked'\n        },\n\n        preRender: function() {\n            this.listenTo(Adapt, 'device:changed', this.reRender, this);\n            this.listenTo(Adapt, 'device:resize', this.resizeControl, this);\n            this.listenTo(Adapt, 'notify:closed', this.closeNotify, this);\n            this.setDeviceSize();\n\n            // Checks to see if the narrative should be reset on revisit\n            this.checkIfResetOnRevisit();\n        },\n\n        setDeviceSize: function() {\n            if (Adapt.device.screenSize === 'large') {\n                this.$el.addClass('desktop').removeClass('mobile');\n                this.model.set('_isDesktop', true);\n            } else {\n                this.$el.addClass('mobile').removeClass('desktop');\n                this.model.set('_isDesktop', false)\n            }\n        },\n\n        postRender: function() {\n            this.renderState();\n            this.$('.narrative-slider').imageready(_.bind(function() {\n                this.setReadyStatus();\n            }, this));\n            this.setupNarrative();\n        },\n\n        // Used to check if the narrative should reset on revisit\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n                this.model.set({_stage: 0});\n\n                _.each(this.model.get('_items'), function(item) {\n                    item._isVisited = false;\n                });\n            }\n        },\n\n        setupNarrative: function() {\n            this.setDeviceSize();\n            if(!this.model.has('_items') || !this.model.get('_items').length) return;\n            this.model.set('_marginDir', 'left');\n            if (Adapt.config.get('_defaultDirection') == 'rtl') {\n                this.model.set('_marginDir', 'right');\n            }\n            this.model.set('_itemCount', this.model.get('_items').length);\n\n            this.model.set('_active', true);\n\n            if (this.model.get('_stage')) {\n                this.setStage(this.model.get('_stage'), true);\n            } else {\n                this.setStage(0, true);\n            }\n            this.calculateWidths();\n\n            if (Adapt.device.screenSize !== 'large' && !this.model.get('_wasHotgraphic')) {\n                this.replaceInstructions();\n            }\n            this.setupEventListeners();\n        },\n\n        calculateWidths: function() {\n            var slideWidth = this.$('.narrative-slide-container').width();\n            var slideCount = this.model.get('_itemCount');\n            var marginRight = this.$('.narrative-slider-graphic').css('margin-right');\n            var extraMargin = marginRight === '' ? 0 : parseInt(marginRight);\n            var fullSlideWidth = (slideWidth + extraMargin) * slideCount;\n\n            this.$('.narrative-slider-graphic').width(slideWidth);\n            this.$('.narrative-strapline-header').width(slideWidth);\n            this.$('.narrative-strapline-title').width(slideWidth);\n\n            this.$('.narrative-slider').width(fullSlideWidth);\n            this.$('.narrative-strapline-header-inner').width(fullSlideWidth);\n\n            var stage = this.model.get('_stage');\n            var margin = -(stage * slideWidth);\n\n            this.$('.narrative-slider').css(('margin-' + this.model.get('_marginDir')), margin);\n            this.$('.narrative-strapline-header-inner').css(('margin-' + this.model.get('_marginDir')), margin);\n\n            this.model.set('_finalItemLeft', fullSlideWidth - slideWidth);\n        },\n\n        resizeControl: function() {\n            var wasDesktop = this.model.get('_isDesktop');\n            this.setDeviceSize();\n            if (wasDesktop != this.model.get('_isDesktop')) this.replaceInstructions();\n            this.calculateWidths();\n            this.evaluateNavigation();\n        },\n\n        reRender: function() {\n            if (this.model.get('_wasHotgraphic') && Adapt.device.screenSize == 'large') {\n                this.replaceWithHotgraphic();\n            } else {\n                this.resizeControl();\n            }\n        },\n\n        closeNotify: function() {\n            this.evaluateCompletion()\n        },\n\n        replaceInstructions: function() {\n            if (Adapt.device.screenSize === 'large') {\n                this.$('.narrative-instruction-inner').html(this.model.get('instruction')).a11y_text();\n            } else if (this.model.get('mobileInstruction') && !this.model.get('_wasHotgraphic')) {\n                this.$('.narrative-instruction-inner').html(this.model.get('mobileInstruction')).a11y_text();\n            }\n        },\n\n        replaceWithHotgraphic: function() {\n            if (!Adapt.componentStore.hotgraphic) throw \"Hotgraphic not included in build\";\n            var Hotgraphic = Adapt.componentStore.hotgraphic;\n            \n            var model = this.prepareHotgraphicModel();\n            var newHotgraphic = new Hotgraphic({ model: model });\n            var $container = $(\".component-container\", $(\".\" + this.model.get(\"_parentId\")));\n\n            $container.append(newHotgraphic.$el);\n            this.remove();\n            $.a11y_update();\n            _.defer(function() {\n                Adapt.trigger('device:resize');\n            });\n        },\n\n        prepareHotgraphicModel: function() {\n            var model = this.model;\n            model.set('_component', 'hotgraphic');\n            model.set('body', model.get('originalBody'));\n            model.set('instruction', model.get('originalInstruction'));\n            return model;\n        },\n\n        moveSliderToIndex: function(itemIndex, animate, callback) {\n            var extraMargin = parseInt(this.$('.narrative-slider-graphic').css('margin-right'));\n            var movementSize = this.$('.narrative-slide-container').width() + extraMargin;\n            var marginDir = {};\n            if (animate && !Adapt.config.get('_disableAnimation')) {\n                marginDir['margin-' + this.model.get('_marginDir')] = -(movementSize * itemIndex);\n                this.$('.narrative-slider').velocity(\"stop\", true).velocity(marginDir);\n                this.$('.narrative-strapline-header-inner').velocity(\"stop\", true).velocity(marginDir, {complete:callback});\n            } else {\n                marginDir['margin-' + this.model.get('_marginDir')] = -(movementSize * itemIndex);\n                this.$('.narrative-slider').css(marginDir);\n                this.$('.narrative-strapline-header-inner').css(marginDir);\n                callback();\n            }\n        },\n\n        setStage: function(stage, initial) {\n            this.model.set('_stage', stage);\n            if (this.model.get('_isDesktop')) {\n                // Set the visited attribute for large screen devices\n                var currentItem = this.getCurrentItem(stage);\n                currentItem._isVisited = true;\n            }\n\n            this.$('.narrative-progress:visible').removeClass('selected').eq(stage).addClass('selected');\n            this.$('.narrative-slider-graphic').children('.controls').a11y_cntrl_enabled(false);\n            this.$('.narrative-slider-graphic').eq(stage).children('.controls').a11y_cntrl_enabled(true);\n            this.$('.narrative-content-item').addClass('narrative-hidden').a11y_on(false).eq(stage).removeClass('narrative-hidden').a11y_on(true);\n            this.$('.narrative-strapline-title').a11y_cntrl_enabled(false).eq(stage).a11y_cntrl_enabled(true);\n\n            this.evaluateNavigation();\n            this.evaluateCompletion();\n\n            this.moveSliderToIndex(stage, !initial, _.bind(function() {\n                if (this.model.get('_isDesktop')) {\n                    if (!initial) this.$('.narrative-content-item').eq(stage).a11y_focus();\n                } else {\n                    if (!initial) this.$('.narrative-strapline-title').a11y_focus();\n                }\n            }, this));\n        },\n\n        constrainStage: function(stage) {\n            if (stage > this.model.get('_items').length - 1) {\n                stage = this.model.get('_items').length - 1;\n            } else if (stage < 0) {\n                stage = 0;\n            }\n            return stage;\n        },\n\n        constrainXPosition: function(previousLeft, newLeft, deltaX) {\n            if (newLeft > 0 && deltaX > 0) {\n                newLeft = previousLeft + (deltaX / (newLeft * 0.1));\n            }\n            var finalItemLeft = this.model.get('_finalItemLeft');\n            if (newLeft < -finalItemLeft && deltaX < 0) {\n                var distance = Math.abs(newLeft + finalItemLeft);\n                newLeft = previousLeft + (deltaX / (distance * 0.1));\n            }\n            return newLeft;\n        },\n\n        evaluateNavigation: function() {\n            var currentStage = this.model.get('_stage');\n            var itemCount = this.model.get('_itemCount');\n            if (currentStage == 0) {\n                this.$('.narrative-controls').addClass('narrative-hidden');\n\n                if (itemCount > 1) {\n                    this.$('.narrative-control-right').removeClass('narrative-hidden');\n                }\n            } else {\n                this.$('.narrative-control-left').removeClass('narrative-hidden');\n\n                if (currentStage == itemCount - 1) {\n                    this.$('.narrative-control-right').addClass('narrative-hidden');\n                } else {\n                    this.$('.narrative-control-right').removeClass('narrative-hidden');\n                }\n            }\n\n        },\n\n        getNearestItemIndex: function() {\n            var currentPosition = parseInt(this.$('.narrative-slider').css('margin-left'));\n            var graphicWidth = this.$('.narrative-slider-graphic').width();\n            var absolutePosition = currentPosition / graphicWidth;\n            var stage = this.model.get('_stage');\n            var relativePosition = stage - Math.abs(absolutePosition);\n\n            if (relativePosition < -0.3) {\n                stage++;\n            } else if (relativePosition > 0.3) {\n                stage--;\n            }\n\n            return this.constrainStage(stage);\n        },\n\n        getCurrentItem: function(index) {\n            return this.model.get('_items')[index];\n        },\n\n        getVisitedItems: function() {\n            return _.filter(this.model.get('_items'), function(item) {\n                return item._isVisited;\n            });\n        },\n\n        evaluateCompletion: function() {\n            if (this.getVisitedItems().length === this.model.get('_items').length) {\n                this.trigger('allItems');\n            } \n        },\n\n        moveElement: function($element, deltaX) {\n            var previousLeft = parseInt($element.css('margin-left'));\n            var newLeft = previousLeft + deltaX;\n\n            newLeft = this.constrainXPosition(previousLeft, newLeft, deltaX);\n            $element.css(('margin-' + this.model.get('_marginDir')), newLeft + 'px');\n        },\n\n        openPopup: function(event) {\n            event.preventDefault();\n            var currentItem = this.getCurrentItem(this.model.get('_stage'));\n            var popupObject = {\n                title: currentItem.title,\n                body: currentItem.body\n            };\n\n            // Set the visited attribute for small and medium screen devices\n            currentItem._isVisited = true;\n\n            Adapt.trigger('notify:popup', popupObject);\n        },\n\n        onNavigationClicked: function(event) {\n\n            if (!this.model.get('_active')) return;\n\n            var stage = this.model.get('_stage');\n            var numberOfItems = this.model.get('_itemCount');\n\n            if ($(event.currentTarget).hasClass('narrative-control-right')) {\n                stage++;\n            } else if ($(event.currentTarget).hasClass('narrative-control-left')) {\n                stage--;\n            }\n            stage = (stage + numberOfItems) % numberOfItems;\n            this.setStage(stage);\n        },\n        \n        onProgressClicked: function(event) {\n            event.preventDefault();\n            var clickedIndex = $(event.target).index();\n            this.setStage(clickedIndex);\n        },\n\n        inview: function(event, visible, visiblePartX, visiblePartY) {\n            if (visible) {\n                if (visiblePartY === 'top') {\n                    this._isVisibleTop = true;\n                } else if (visiblePartY === 'bottom') {\n                    this._isVisibleBottom = true;\n                } else {\n                    this._isVisibleTop = true;\n                    this._isVisibleBottom = true;\n                }\n\n                if (this._isVisibleTop && this._isVisibleBottom) {\n                    this.$('.component-inner').off('inview');\n                    this.setCompletionStatus();\n                }\n            }\n        },\n\n        onCompletion: function() {\n            this.setCompletionStatus();\n            if (this.completionEvent && this.completionEvent != 'inview') {\n                this.off(this.completionEvent, this);\n            }\n        },\n\n        setupEventListeners: function() {\n            this.completionEvent = (!this.model.get('_setCompletionOn')) ? 'allItems' : this.model.get('_setCompletionOn');\n            if (this.completionEvent !== 'inview' && this.model.get('_items').length > 1) {\n                this.on(this.completionEvent, _.bind(this.onCompletion, this));\n            } else {\n                this.$('.component-widget').on('inview', _.bind(this.inview, this));\n            }\n        }\n\n    });\n\n    Adapt.register('narrative', Narrative);\n\n    return Narrative;\n\n});\n\n",
    "define('components/adapt-contrib-text/js/adapt-contrib-text',['require','coreViews/componentView','coreJS/adapt'],function(require) {\n\n    var ComponentView = require('coreViews/componentView');\n    var Adapt = require('coreJS/adapt');\n\n    var Text = ComponentView.extend({\n\n        preRender: function() {\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.setReadyStatus();\n\n            this.setupInview();\n        },\n\n        setupInview: function() {\n            var selector = this.getInviewElementSelector();\n\n            if (!selector) {\n                this.setCompletionStatus();\n            } else {\n                this.model.set('inviewElementSelector', selector);\n                this.$(selector).on('inview', _.bind(this.inview, this));\n            }\n        },\n\n        /**\n         * determines which element should be used for inview logic - body, instruction or title - and returns the selector for that element\n         */\n        getInviewElementSelector: function() {\n            if(this.model.get('body')) return '.component-body';\n\n            if(this.model.get('instruction')) return '.component-instruction';\n            \n            if(this.model.get('displayTitle')) return '.component-title';\n\n            return null;\n        },\n\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        },\n\n        inview: function(event, visible, visiblePartX, visiblePartY) {\n            if (visible) {\n                if (visiblePartY === 'top') {\n                    this._isVisibleTop = true;\n                } else if (visiblePartY === 'bottom') {\n                    this._isVisibleBottom = true;\n                } else {\n                    this._isVisibleTop = true;\n                    this._isVisibleBottom = true;\n                }\n\n                if (this._isVisibleTop && this._isVisibleBottom) {\n                    this.$(this.model.get('inviewElementSelector')).off('inview');\n                    this.setCompletionStatus();\n                }\n            }\n        },\n\n        remove: function() {\n            if(this.model.has('inviewElementSelector')) {\n                this.$(this.model.get('inviewElementSelector')).off('inview');\n            }\n            \n            ComponentView.prototype.remove.call(this);\n        }\n    },\n    {\n        template: 'text'\n    });\n\n    Adapt.register('text', Text);\n\n    return Text;\n});\n\n",
    "/**\n * jquery.typist — animated text typing\n * @author Alexander Burtsev, http://burtsev.me, 2014—2015\n * @license MIT\n */\n\n!function(a){\"function\"==typeof define&&define.amd?define('components/adapt-typist/libraries/jquery.typist.min.js',[\"jquery\"],a):a(jQuery)}(function(a){\"use strict\";function b(b,c){a.extend(this,{speed:10,text:\"\",cursor:!0,blinkSpeed:2,typeFrom:\"end\",cursorStyles:{display:\"inline-block\",fontStyle:\"normal\",margin:\"-2px 2px 0 2px\"}},c||{}),this._cursor=null,this._element=a(b),this._element.data(\"typist\",this),this._container=null,this.queue=[],this.timer=null,this.delay=1e3/this.speed,this.blinkTimer=null,this.blinkDelay=1e3/this.blinkSpeed,this.text&&(this.queue.push({text:this.text}),this.type())}a.fn.typistInit=function(){return this.each(function(){a(this).data(\"typist\")||new b(this)})},a.fn.typist=function(a){return this.each(function(){new b(this,a)})},a.fn.typistAdd=function(b,c){return this.typistInit().each(function(){var d=a(this).data(\"typist\");d.queue.push({text:b,callback:c}),d.type()})},a.fn.typistRemove=function(b,c){return b=parseInt(b)||0,this.typistInit().each(function(){var d=a(this).data(\"typist\");d.queue.push({remove:b,callback:c}),d.type()})},a.fn.typistPause=function(b,c){return b=parseInt(b)||0,this.typistInit().each(function(){var d=a(this).data(\"typist\");d.queue.push({delay:b,callback:c}),d.type()})},a.fn.typistStop=function(){return this.typistInit().each(function(){var b=a(this).data(\"typist\");b.queue.push({stop:!0}),b.type()})},b.prototype={addCursor:function(){this._cursor&&(clearInterval(this.blinkTimer),this._cursor.stop().remove()),this._cursor=a(\"<span>|</span>\").css(this.cursorStyles).insertAfter(this._container),this.cursorVisible=!0,this.blinkTimer=setInterval(a.proxy(function(){this.cursorVisible=!this.cursorVisible,this._cursor.animate({opacity:this.cursorVisible?1:0},100)},this),this.blinkDelay)},fire:function(a){return this._element.trigger(a,this),this},nl2br:function(a){return a.replace(/\\n/g,\"<br>\")},br2nl:function(a){return a.replace(/<br.*?>/g,\"\\n\")},remove:function(b,c){if(0>=b)return c(),this.timer=null,this.fire(\"end_remove.typist\").type();var d=this._container.html();b--,d=this.br2nl(d),d=d.substr(0,d.length-1),d=this.nl2br(d),this.timer=setTimeout(a.proxy(function(){this._container.html(d),this.remove(b,c)},this),this.delay),this.fire(\"tick.typist\")},step:function(b,c){if(\"string\"==typeof b&&(b=b.split(\"\")),!b.length)return c(),this.timer=null,this.fire(\"end_type.typist\").type();var d=b.shift();d=a(\"<div>\").text(d).html(),d=this.nl2br(d),this.timer=setTimeout(a.proxy(function(){this._container.html(this._container.html()+d),this.step(b,c)},this),this.delay),this.fire(\"tick.typist\")},stop:function(){clearInterval(this.blinkTimer),this.blinkTimer=null,this._cursor&&(this._cursor.remove(),this._cursor=null),clearTimeout(this.timer),this.timer=null},type:function(){if(!this.timer){this._container||(this._container=a(\"<span>\"),\"start\"===this.typeFrom?this._element.prepend(this._container):this._element.append(this._container)),this.cursor&&this.addCursor();var b=this.queue.shift()||{},c=a.proxy(b.callback||a.noop,this);return b.delay?void(this.fire(\"start_pause.typist\").timer=setTimeout(a.proxy(function(){c(),this.timer=null,this.fire(\"end_pause.typist\").type()},this),b.delay)):b.remove?void this.fire(\"start_remove.typist\").remove(b.remove,c):b.stop?void this.stop():void(b.text&&this.fire(\"start_type.typist\").step(b.text,c))}}}});\n//# sourceMappingURL=jquery.typist.min.js.map;\n",
    "define('components/adapt-typist/js/adapt-typist',['require','coreViews/componentView','coreJS/adapt','../libraries/jquery.typist.min.js'],function(require) {\n  var ComponentView = require('coreViews/componentView');\n  var Adapt = require('coreJS/adapt');\n  var $Typist = require('../libraries/jquery.typist.min.js');\n\n  var Typist = ComponentView.extend({\n    postRender: function() {\n      this.$('.text')\n        .css({\n          'font-size': this.model.get('fontSize') + 'px'\n        })\n        // TODO we need to render this without the animation\n        .typist({\n          speed: 12,\n          text: this.model.get('initialText')\n        });\n\n      this.setReadyStatus();\n      this.$el.on('inview', _.bind(this.inview, this));\n    },\n\n    inview: function(event, visible, visiblePartX, visiblePartY) {\n      if(!visible || visiblePartX !== 'both' || visiblePartY !== 'both') {\n        return;\n      }\n      this.$el.off('inview');\n      this.showText();\n    },\n\n    showText: function() {\n      var $text = this.$('.text');\n      var index = -1;\n      var texts = this.model.get('texts');\n      var _next = _.bind(function() {\n        if(++index === texts.length) {\n          index = 0;\n          this.onTypistComplete();\n        }\n        $text.html('').typist({ speed: 12, text: texts[index] });\n      }, this);\n      $text.on('end_type.typist', function() {\n        $text.typistPause(1000).typistRemove($text.text().length, _next);\n    \t});\n      // add a delay before starting\n      window.setTimeout(function() {\n        $text.typistRemove($text.text().length, _next);\n      }, 1500);\n    },\n\n    onTypistComplete: function() {\n      this.setCompletionStatus();\n      if(this.model.get('loop')) {\n        return;\n      }\n      var $text = this.$('.text');\n      $text.typistStop();\n      $text.html('<p>' + this.model.get('texts').join('</p><p>') + '</p>');\n    },\n\n    remove: function() {\n      this.$el.off('inview');\n      ComponentView.prototype.remove.call(this);\n    }\n  },\n  {\n    template: 'typist'\n  });\n\n  Adapt.register('typist', Typist);\n\n  return Typist;\n});\n\n",
    "define('extensions/adapt-contrib-pageLevelProgress/js/completionCalculations',[\n    'coreJS/adapt'\n], function(Adapt) {\n    \n    // Calculate completion of a contentObject\n    function calculateCompletion(contentObjectModel) {\n\n        var viewType = contentObjectModel.get('_type'),\n            nonAssessmentComponentsTotal = 0,\n            nonAssessmentComponentsCompleted = 0,\n            assessmentComponentsTotal = 0,\n            assessmentComponentsCompleted = 0,\n            subProgressCompleted = 0,\n            subProgressTotal = 0,\n            isComplete = contentObjectModel.get(\"_isComplete\") ? 1 : 0;\n\n        // If it's a page\n        if (viewType == 'page') {\n            var children = _.filter(contentObjectModel.findDescendantModels('components'), function(comp) {\n                return comp.get('_isAvailable') === true && comp.get('_isOptional') === false;\n            });\n\n            var availableChildren = filterAvailableChildren(children);\n            var components = getPageLevelProgressEnabledModels(availableChildren);\n\n            var nonAssessmentComponents = getNonAssessmentComponents(components);\n\n            nonAssessmentComponentsTotal = nonAssessmentComponents.length | 0,\n            nonAssessmentComponentsCompleted = getComponentsCompleted(nonAssessmentComponents).length;\n\n            var assessmentComponents = getAssessmentComponents(components);\n\n            assessmentComponentsTotal = assessmentComponents.length | 0,\n            assessmentComponentsCompleted = getComponentsInteractionCompleted(assessmentComponents).length;\n\n            subProgressCompleted = contentObjectModel.get(\"_subProgressComplete\") || 0;\n            subProgressTotal = contentObjectModel.get(\"_subProgressTotal\") || 0;\n\n            var pageCompletion = {\n                \"subProgressCompleted\": subProgressCompleted,\n                \"subProgressTotal\": subProgressTotal,\n                \"nonAssessmentCompleted\": nonAssessmentComponentsCompleted,\n                \"nonAssessmentTotal\": nonAssessmentComponentsTotal,\n                \"assessmentCompleted\": assessmentComponentsCompleted,\n                \"assessmentTotal\": assessmentComponentsTotal\n            };\n\n            if (contentObjectModel.get(\"_pageLevelProgress\") && contentObjectModel.get(\"_pageLevelProgress\")._showPageCompletion !== false \n                && Adapt.course.get(\"_pageLevelProgress\") && Adapt.course.get(\"_pageLevelProgress\")._showPageCompletion !== false) {\n                //optionally add one point extra for page completion to eliminate incomplete pages and full progress bars\n                // if _showPageCompletion is true then the progress bar should also consider it so add 1 to nonAssessmentTotal\n                pageCompletion.nonAssessmentCompleted += isComplete;\n                pageCompletion.nonAssessmentTotal += 1;\n            }\n\n            return pageCompletion;\n        }\n        // If it's a sub-menu\n        else if (viewType == 'menu') {\n\n            _.each(contentObjectModel.get('_children').models, function(contentObject) {\n                var completionObject = calculateCompletion(contentObject);\n                subProgressCompleted += contentObjectModel.subProgressCompleted || 0;\n                subProgressTotal += contentObjectModel.subProgressTotal || 0;\n                nonAssessmentComponentsTotal += completionObject.nonAssessmentTotal;\n                nonAssessmentComponentsCompleted += completionObject.nonAssessmentCompleted;\n                assessmentComponentsTotal += completionObject.assessmentTotal;\n                assessmentComponentsCompleted += completionObject.assessmentCompleted;\n            });\n\n            return {\n                \"subProgressCompleted\": subProgressCompleted,\n                \"subProgressTotal\" : subProgressTotal,\n                \"nonAssessmentCompleted\": nonAssessmentComponentsCompleted,\n                \"nonAssessmentTotal\": nonAssessmentComponentsTotal,\n                \"assessmentCompleted\": assessmentComponentsCompleted,\n                \"assessmentTotal\": assessmentComponentsTotal,\n            };\n        }\n    }\n\n    function getNonAssessmentComponents(models) {\n        return _.filter(models, function(model) {\n            return !model.get('_isPartOfAssessment');\n        });\n    }\n\n    function getAssessmentComponents(models) {\n        return _.filter(models, function(model) {\n            return model.get('_isPartOfAssessment');\n        });\n    }\n\n    function getComponentsCompleted(models) {\n        return _.filter(models, function(item) {\n            return item.get('_isComplete');\n        });\n    }\n\n    function getComponentsInteractionCompleted(models) {\n        return _.filter(models, function(item) {\n            return item.get('_isComplete');\n        });\n    }\n\n    //Get only those models who were enabled for pageLevelProgress\n    function getPageLevelProgressEnabledModels(models) {\n        return _.filter(models, function(model) {\n            if (model.get('_pageLevelProgress')) {\n                return model.get('_pageLevelProgress')._isEnabled;\n            }\n        });\n    }\n\n    function unavailableInHierarchy(parents) {\n        if (parents.length > 0) {\n            var parentsAvailable = _.map(parents, function(parent) {\n                return parent.get('_isAvailable');\n            });\n            return _.indexOf(parentsAvailable, false) > -1;\n        } else {\n            return;\n        }\n    }\n\n    function filterAvailableChildren(children) {\n        var availableChildren = [];\n\n        for(var child = 0; child < children.length; child++) {\n            var parents = children[child].getAncestorModels();\n            if (!unavailableInHierarchy(parents)) {\n                availableChildren.push(children[child]);\n            }\n        }\n\n        return availableChildren;\n    }\n\n    return {\n    \tcalculateCompletion: calculateCompletion,\n    \tgetPageLevelProgressEnabledModels: getPageLevelProgressEnabledModels,\n        filterAvailableChildren: filterAvailableChildren\n    };\n\n})\n;\n",
    "define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressMenuView',['require','coreJS/adapt','backbone'],function(require) {\n\n    var Adapt = require('coreJS/adapt');\n    var Backbone = require('backbone');\n\n    var PageLevelProgressMenuView = Backbone.View.extend({\n\n        className: 'page-level-progress-menu-item',\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n\n            this.ariaText = '';\n            if (Adapt.course.get('_globals')._extensions && Adapt.course.get('_globals')._extensions._pageLevelProgress && Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressMenuBar) {\n                this.ariaText = Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressMenuBar + ' ';\n            }\n\n            this.render();\n\n            _.defer(_.bind(function() {\n                this.updateProgressBar();\n            }, this));\n        },\n\n        events: {\n        },\n\n        render: function() {\n            var data = this.model.toJSON();\n            _.extend(data, {\n                _globals: Adapt.course.get('_globals')\n            });\n            var template = Handlebars.templates['pageLevelProgressMenu'];\n\n            this.$el.html(template(data));\n            return this;\n        },\n\n        updateProgressBar: function() {\n            if (this.model.get('completedChildrenAsPercentage')) {\n                var percentageOfCompleteComponents = this.model.get('completedChildrenAsPercentage');\n            } else {\n                var percentageOfCompleteComponents = 0;\n            }\n\n            // Add percentage of completed components as an aria label attribute\n            this.$('.page-level-progress-menu-item-indicator-bar .aria-label').html(this.ariaText + Math.floor(percentageOfCompleteComponents) + '%');\n\n        },\n\n    });\n\n    return PageLevelProgressMenuView;\n\n});\n\n",
    "define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView',['require','coreJS/adapt','backbone'],function(require) {\n\n    var Adapt = require('coreJS/adapt');\n    var Backbone = require('backbone');\n\n    var PageLevelProgressView = Backbone.View.extend({\n\n        className: 'page-level-progress',\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.render();\n        },\n\n        events: {\n            'click .page-level-progress-item button': 'scrollToPageElement'\n        },\n\n        scrollToPageElement: function(event) {\n            if(event && event.preventDefault) event.preventDefault();\n            var currentComponentSelector = '.' + $(event.currentTarget).attr('data-page-level-progress-id');\n            var $currentComponent = $(currentComponentSelector);\n            Adapt.once('drawer:closed', function() {\n                Adapt.scrollTo($currentComponent, { duration:400 });\n            });\n            Adapt.trigger('drawer:closeDrawer');\n        },\n\n        render: function() {\n            var components = this.collection.toJSON();\n            var data = {\n                components: components,\n                _globals: Adapt.course.get('_globals')\n            };\n            var template = Handlebars.templates['pageLevelProgress'];\n            this.$el.html(template(data));\n            this.$el.a11y_aria_label(true);\n            return this;\n        }\n\n    });\n\n    return PageLevelProgressView;\n\n});\n\n",
    "define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView',['require','coreJS/adapt','backbone','./completionCalculations','extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView'],function(require) {\n\n    var Adapt = require('coreJS/adapt');\n    var Backbone = require('backbone');\n    var completionCalculations = require('./completionCalculations');\n\n    var PageLevelProgressView = require('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView');\n\n    var PageLevelProgressNavigationView = Backbone.View.extend({\n\n        tagName: 'button',\n\n        className: 'base page-level-progress-navigation',\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.listenTo(Adapt, 'router:location', this.updateProgressBar);\n            this.listenTo(Adapt, 'pageLevelProgress:update', this.refreshProgressBar);\n            this.listenTo(this.collection, 'change:_isComplete', this.updateProgressBar);\n            this.listenTo(this.model, 'change:_isComplete', this.updateProgressBar);\n            this.$el.attr('role', 'button');\n            this.ariaText = '';\n            \n            if (Adapt.course.has('_globals') && Adapt.course.get('_globals')._extensions && Adapt.course.get('_globals')._extensions._pageLevelProgress && Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressIndicatorBar) {\n                this.ariaText = Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressIndicatorBar +  ' ';\n            }\n            \n            this.render();\n            \n            _.defer(_.bind(function() {\n                this.updateProgressBar();\n            }, this));\n        },\n\n        events: {\n            'click': 'onProgressClicked'\n        },\n\n        render: function() {\n            var components = this.collection.toJSON();\n            var data = {\n                components: components,\n                _globals: Adapt.course.get('_globals')\n            };            \n\n            var template = Handlebars.templates['pageLevelProgressNavigation'];\n            $('.navigation-drawer-toggle-button').after(this.$el.html(template(data)));\n            return this;\n        },\n        \n        refreshProgressBar: function() {\n            var currentPageComponents = _.filter(this.model.findDescendantModels('components'), function(comp) {\n                return comp.get('_isAvailable') === true;\n            });\n            var availableChildren = completionCalculations.filterAvailableChildren(currentPageComponents);\n            var enabledProgressComponents = completionCalculations.getPageLevelProgressEnabledModels(availableChildren);\n            \n            this.collection.reset(enabledProgressComponents);\n            this.updateProgressBar();\n        },\n\n        updateProgressBar: function() {\n            var completionObject = completionCalculations.calculateCompletion(this.model);\n            \n            //take all assessment, nonassessment and subprogress into percentage\n            //this allows the user to see if assessments have been passed, if assessment components can be retaken, and all other component's completion\n            \n            var completed = completionObject.nonAssessmentCompleted + completionObject.assessmentCompleted + completionObject.subProgressCompleted;\n            var total  = completionObject.nonAssessmentTotal + completionObject.assessmentTotal + completionObject.subProgressTotal;\n\n            var percentageComplete = Math.floor((completed / total)*100);\n\n\n            this.$('.page-level-progress-navigation-bar').css('width', percentageComplete + '%');\n\n            // Add percentage of completed components as an aria label attribute\n            this.$el.attr('aria-label', this.ariaText +  percentageComplete + '%');\n\n            // Set percentage of completed components to model attribute to update progress on MenuView\n            this.model.set('completedChildrenAsPercentage', percentageComplete);\n        },\n\n        onProgressClicked: function(event) {\n            if(event && event.preventDefault) event.preventDefault();\n            Adapt.drawer.triggerCustomView(new PageLevelProgressView({collection: this.collection}).$el, false);\n        }\n\n    });\n\n    return PageLevelProgressNavigationView;\n\n});\n\n",
    "define('extensions/adapt-contrib-pageLevelProgress/js/adapt-contrib-pageLevelProgress',['require','coreJS/adapt','backbone','./completionCalculations','extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressMenuView','extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView'],function(require) {\n\n    var Adapt = require('coreJS/adapt');\n    var Backbone = require('backbone');\n    var completionCalculations = require('./completionCalculations');\n\n    var PageLevelProgressMenuView = require('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressMenuView');\n    var PageLevelProgressNavigationView = require('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView');\n\n    function setupPageLevelProgress(pageModel, enabledProgressComponents) {\n        new PageLevelProgressNavigationView({model: pageModel, collection: new Backbone.Collection(enabledProgressComponents)});\n    }\n\n    // This should add/update progress on menuView\n    Adapt.on('menuView:postRender', function(view) {\n        if (view.model.get('_id') == Adapt.location._currentId) return;\n\n        var coursePLPConfig = Adapt.course.get('_pageLevelProgress');\n\n        // do not proceed if pageLevelProgress is not enabled in course.json\n        if (!coursePLPConfig || !coursePLPConfig._isEnabled) {\n            return;\n        }\n\n        var pageLevelProgress = view.model.get('_pageLevelProgress');\n        var viewType = view.model.get('_type');\n\n        // Progress bar should not render for course viewType\n        if (viewType == 'course') return;\n\n        if (pageLevelProgress && pageLevelProgress._isEnabled) {\n            var completionObject = completionCalculations.calculateCompletion(view.model);\n\n            //take all non-assessment components and subprogress info into the percentage\n            //this allows the user to see if the assessments are passed (subprogress) and all other components are complete\n            \n            var completed = completionObject.nonAssessmentCompleted + completionObject.subProgressCompleted;\n            var total = completionObject.nonAssessmentTotal + completionObject.subProgressTotal;\n\n            var percentageComplete = Math.floor((completed / total) * 100);\n            \n            view.model.set('completedChildrenAsPercentage', percentageComplete);\n            view.$el.find('.menu-item-inner').append(new PageLevelProgressMenuView({model: view.model}).$el);\n        }\n    });\n\n    // This should add/update progress on page navigation bar\n    Adapt.on('router:page', function(pageModel) {\n        var coursePLPConfig = Adapt.course.get('_pageLevelProgress');\n        var pagePLPConfig = pageModel.get('_pageLevelProgress');\n\n        // do not proceed if pageLevelProgress is not enabled in course.json or for the content object\n        if (!coursePLPConfig || !coursePLPConfig._isEnabled || !pagePLPConfig || !pagePLPConfig._isEnabled) {\n            return;\n        }\n\n        var currentPageComponents = _.filter(pageModel.findDescendantModels('components'), function(comp) {\n            return comp.get('_isAvailable') === true;\n        });\n        var availableComponents = completionCalculations.filterAvailableChildren(currentPageComponents);\n        var enabledProgressComponents = completionCalculations.getPageLevelProgressEnabledModels(availableComponents);\n\n        if (enabledProgressComponents.length > 0) {\n            setupPageLevelProgress(pageModel, enabledProgressComponents);\n        }\n    });\n\n});\n\n",
    "define('extensions/adapt-contrib-resources/js/adapt-contrib-resourcesView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var ResourcesView = Backbone.View.extend({\n\n        className: \"resources\",\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.render();\n        },\n\n        events: {\n            'click .resources-filter button': 'onFilterClicked',\n            'click .resources-item-container button': 'onResourceClicked'\n        },\n\n        render: function() {\n            var collectionData = this.collection.toJSON();\n            var modelData = this.model.toJSON();\n            var template = Handlebars.templates[\"resources\"];\n            this.$el.html(template({model: modelData, resources:collectionData, _globals: Adapt.course.get('_globals')}));\n            _.defer(_.bind(this.postRender, this));\n            return this;\n        },\n\n        postRender: function() {\n            this.listenTo(Adapt, 'drawer:triggerCustomView', this.remove);\n        },\n\n        onFilterClicked: function(event) {\n            event.preventDefault();\n            var $currentTarget = $(event.currentTarget);\n            this.$('.resources-filter button').removeClass('selected');\n            var filter = $currentTarget.addClass('selected').attr('data-filter');\n            var items = [];\n\n            if (filter === 'all') {\n                items = this.$('.resources-item').removeClass('display-none');\n            } else {\n                this.$('.resources-item').removeClass('display-none').not(\".\" + filter).addClass('display-none');\n                items = this.$('.resources-item.' + filter);\n            }\n\n            if (items.length === 0) return;\n            $(items[0]).a11y_focus();\n        },\n\n        onResourceClicked: function(event) {\n            var data = $(event.currentTarget).data();\n\n            if (!data.forceDownload || Adapt.device.OS === 'ios') {\n                window.top.open(data.href);\n                return;\n            }\n\n            var dummyLink = document.createElement('a');\n            // Internet Explorer has no support for the 'download' attribute\n            if (Adapt.device.browser === \"internet explorer\") {\n                dummyLink.target = \"_blank\";\n            } else {\n                dummyLink.download = data.filename;\n            }\n            dummyLink.href = data.href;\n\n            document.body.appendChild(dummyLink);\n            dummyLink.click();\n            document.body.removeChild(dummyLink);\n            delete dummyLink;\n        }\n    });\n\n    return ResourcesView;\n});\n\n",
    "define('extensions/adapt-contrib-resources/js/adapt-contrib-resourcesHelpers',['require','handlebars'],function(require) {\n\n\tvar Handlebars = require('handlebars');\n\n\tHandlebars.registerHelper('if_collection_contains', function(collection, attribute, value, block) {\n\t\tvar makeBlockVisible = false;\n\n\t\t_.each(collection, function(resource) {\n\t\t\tif (resource[attribute] === value) {\n\t\t\t\tmakeBlockVisible = true;\n\t\t\t}\n\t\t});\n\t\tif(makeBlockVisible) {\n            return block.fn(this);\n        } else {\n            return block.inverse();\n        }\n    });\n\n    Handlebars.registerHelper('if_collection_contains_only_one_item', function(collection, attribute, block) {\n\t\tvar attributeCount = [];\n\n\t\t_.each(collection, function(resource) {\n\t\t\tvar resourceAttribute = resource[attribute];\n\t\t\tif (_.indexOf(attributeCount, resourceAttribute) === -1) {\n\t\t\t\tattributeCount.push(resourceAttribute);\n\t\t\t}\n\t\t});\n\n\t\tif (attributeCount.length <= 1) {\n\t\t\treturn block.fn(this);\n\t\t} else {\n\t\t\treturn block.inverse(this);\n\t\t}\n\n    });\n\n    Handlebars.registerHelper('return_column_layout_from_collection_length', function(collection, attribute) {\n\t\tvar attributeCount = [];\n\n\t\t_.each(collection, function(resource) {\n\t\t\tvar resourceAttribute = resource[attribute];\n\t\t\tif (_.indexOf(attributeCount, resourceAttribute) === -1) {\n\t\t\t\tattributeCount.push(resourceAttribute);\n\t\t\t}\n\t\t});\n\n\t\treturn (attributeCount.length + 1);\n\n    });\n\n})\n\t;\n",
    "define('extensions/adapt-contrib-resources/js/adapt-contrib-resources',[\n    'backbone',\n    'core/js/adapt',\n    './adapt-contrib-resourcesView',\n    './adapt-contrib-resourcesHelpers'\n], function(Backbone, Adapt, ResourcesView, ResourcesHelpers) {\n\n    function setupResources(resourcesData) {\n\n        var resourcesModel = new Backbone.Model(resourcesData);\n        var resourcesCollection = new Backbone.Collection(resourcesModel.get('_resourcesItems'));\n\n        Adapt.on('resources:showResources', function() {\n            Adapt.drawer.triggerCustomView(new ResourcesView({\n                model: resourcesModel,\n                collection: resourcesCollection\n            }).$el);\n        });\n\n    }\n\n    function initResources() {\n\n        var courseResources = Adapt.course.get('_resources');\n\n        // do not proceed until resource set on course.json\n        if (!courseResources || courseResources._isEnabled === false) return;\n\n        var drawerObject = {\n            title: courseResources.title,\n            description: courseResources.description,\n            className: 'resources-drawer',\n            drawerOrder: courseResources._drawerOrder || 0\n        };\n\n        Adapt.drawer.addItem(drawerObject, 'resources:showResources');\n\n        setupResources(courseResources);\n\n    }\n\n    Adapt.once('app:dataReady', function() {\n        initResources();\n        Adapt.on('app:languageChanged', initResources);\n    });\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/trickleView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var TrickleView = Backbone.View.extend({\n\n        isSteplocked: false,\n\n        initialize: function(options) {\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            var AdaptEvents = {\n                \"trickle:kill\": this.onKill,\n                \"remove\": this.onRemove\n            };\n            \n            this.onPreRender(this);\n\n            AdaptEvents[this.model.get(\"_type\") + \"View:postRender\"] = this.onPostRender;\n            this.listenTo(Adapt, AdaptEvents);\n\n            this.on(\"steplock\", this.onStepLock);\n            this.on(\"stepunlock\", this.onStepUnlock);\n        },\n\n        onPreRender: function(view) {\n            if (!this.isElementEnabled()) return;\n\n            Adapt.trigger(\"trickle:preRender\", this);\n        },\n\n        onPostRender: function(view) {\n            if (view.model.get(\"_id\") !== this.model.get(\"_id\")) return;\n            if (!this.isElementEnabled()) return;\n\n            Adapt.trigger(\"trickle:postRender\", this);\n        },\n\n        isElementEnabled: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            if (!trickle) return false;\n\n            var isArticleWithOnChildren = (this.model.get(\"_type\") === \"article\" && trickle._onChildren);\n            if (isArticleWithOnChildren) {\n                return false;\n            }\n\n            if (trickle._isEnabled === true) return true;\n            return false;\n        },\n\n        onStepLock: function() {\n            if (!this.isElementEnabled()) {\n                this.continueToNext();\n                return;\n            }\n\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            var isSteplocking = (trickle._stepLocking && trickle._stepLocking._isEnabled);\n            if (!isSteplocking) {\n                this.continueToNext();\n                return;\n            }\n\n            Adapt.trigger(\"trickle:steplock\", this);\n            //console.log(\"trickle steplock at\", this.model.get(\"_id\"))\n\n            this.isSteplocked = true;\n        },\n\n        continueToNext: function() {\n            _.defer(_.bind(function() {\n                Adapt.trigger(\"trickle:continue\", this);\n            }, this));\n        },\n\n\n        onStepUnlock: function() {\n            if (!this.isSteplocked) return;\n            this.isSteplocked = false;\n            Adapt.trigger(\"trickle:stepunlock\", this);\n        },\n\n        onKill: function() {\n            this.detachFromElement();\n        },\n\n        onRemove: function() {\n            this.detachFromElement();\n        },\n\n        detachFromElement: function() {\n            this.undelegateEvents();\n            this.stopListening();\n            this.model = null;\n            this.articleModel = null;\n            this.$el = null;\n            this.el = null;\n        }\n                \n    });\n\n    return TrickleView;\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/pageView',[\n    'core/js/adapt',\n    './trickleView'\n], function(Adapt, TrickleView) {\n\n    var PageView = Backbone.View.extend({\n\n        currentDescendantIndex: 0,\n        currentLocksOnDescendant: 0,\n        currentDescendant: null,\n\n        initialize: function(options) {\n            if (!this.isPageEnabled()) {\n                return this.detachFromPage();\n            }\n            this.setupDescendants();\n            if (!this.haveDescendantsGotTrickle()) {\n                return this.detachFromPage();   \n            }\n            this.addClassToHtml();\n            this.setupEventListeners();\n        },\n\n        isPageEnabled: function() {\n            var trickleConfig = Adapt.trickle.getModelConfig(this.model);\n            if (trickleConfig && trickleConfig._isEnabled === false) return false;\n            return true;\n        },\n\n        setupDescendants: function() {\n            this.currentDescendant = null;\n            this.descendantViews = {};\n            this.getDescendants();\n            Adapt.trigger(\"trickle:descendants\", this);\n        },\n\n        descendantsChildFirst: null,\n        descendantsParentFirst: null,\n        descendantViews: null,\n\n        getDescendants: function() {\n            this.descendantsChildFirst = this.model.getDescendants();\n            this.descendantsParentFirst = this.model.getDescendants(true);\n\n            //if some descendants flip between _isAvailable true/false they must have their defaults set before the filter is applied\n            this.setDescendantsTrickleDefaults();\n\n            this.descendantsChildFirst = this.filterComponents(this.descendantsChildFirst);\n            this.descendantsParentFirst = this.filterComponents(this.descendantsParentFirst);\n\n        },\n\n        filterComponents: function(descendants) {\n            return _.filter(descendants, function(descendant) {\n                if (descendant.get(\"_type\") === \"component\") return false;\n                if (!descendant.get(\"_isAvailable\")) return false;\n                return true;\n            });\n        },\n\n        setDescendantsTrickleDefaults: function() {\n            //use parent first as likely to get to article\n            _.each(this.descendantsParentFirst, _.bind(function(descendant) {\n                var trickle = Adapt.trickle.getModelConfig(descendant);\n                if (!trickle) {\n                    return;\n                }\n\n                //check if trickle is configures on descendant\n                //NOTE: Removed for banked assessments\n                //var isTrickleConfigured = descendant.get(\"_isTrickleConfigured\");\n                //if (isTrickleConfigured) return;\n\n                //setup steplocking defaults\n                trickle._stepLocking = _.extend({\n                    \"_isEnabled\": true, //(default=true)\n                    \"_isCompletionRequired\": true, //(default=true)\n                    \"_isLockedOnRevisit\": false //(default=false)\n                }, trickle._stepLocking);\n\n                //setup main trickle defaults\n                trickle = _.extend({\n                    \"_isEnabled\": true, //(default=true)\n                    \"_autoScroll\": true, //(default=true)\n                    \"_scrollDuration\": 500, //(default=500)\n                    \"_onChildren\": true, //(default=true)\n                    \"_scrollTo\": \"@block +1\" //(default=\"@block +1\")\n                }, trickle);\n\n                Adapt.trickle.setModelConfig(descendant, trickle);\n\n                //check article \"onChildren\" rule\n                if (trickle._onChildren \n                    && descendant.get(\"_type\") === \"article\") {\n                    this.setupArticleOnChildren(descendant, trickle);\n                }\n\n                //set descendant trickle as configured\n                descendant.set(\"_isTrickleConfigured\", true);\n\n            }, this));\n        },\n\n        setupArticleOnChildren: function(articleModel, articleTrickleConfig) {\n            //set trickle on all blocks, using article config with block overrides\n            var articleBlocks = articleModel.getChildren();\n\n            articleBlocks.each(function(blockModel, index) {\n                var blockTrickleConfig = Adapt.trickle.getModelConfig(blockModel);\n\n                //overlay block trickle on article trickle\n                //this allows values to carry through from the article to the block \n                //retains any value overriden in the block\n                for (var k in blockTrickleConfig) {\n                    //handle nested objects to one level\n                    if (typeof blockTrickleConfig[k] === \"object\") {\n                        blockTrickleConfig[k] = _.extend({}, articleTrickleConfig[k], blockTrickleConfig[k]);\n                    }\n                }\n\n                blockTrickleConfig = _.extend({}, articleTrickleConfig, blockTrickleConfig);\n\n\n                //setup start/final config\n                if (articleBlocks.length === index+1) {\n                    blockTrickleConfig._isFinal = true;\n                }\n                if (index === 0) {\n                    blockTrickleConfig._isStart = true;\n                }\n\n                Adapt.trickle.setModelConfig(blockModel, blockTrickleConfig);\n            });\n\n        },\n\n        haveDescendantsGotTrickle: function() {\n            return _.some(this.descendantsChildFirst, function(descendant) {\n                var trickle = Adapt.trickle.getModelConfig(descendant);\n                if (!trickle) return false;\n                if (trickle._isEnabled === true) {\n                    return true;\n                }\n                return false;\n            });\n        },\n\n        addClassToHtml: function() {\n            $(\"html\").addClass(\"trickle\");\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"remove\": this.onRemove,\n                \n                \"articleView:preRender\": this.onDescendantPreRender,\n                \"blockView:preRender\": this.onDescendantPreRender,\n\n                \"trickle:unwait\": this.onUnwait,\n                \"trickle:wait\": this.onWait,\n                \"trickle:continue\": this.onContinue,\n                \"trickle:skip\": this.onSkip,\n\n                \"trickle:kill\": this.onKill\n            });\n            this.listenToOnce(this.model, \"change:_isReady\", this.onPageReady);\n        },\n\n        onDescendantPreRender: function(view) {\n            //ignore components\n            if (view.model.get(\"_type\") === \"component\") return;\n\n            var descendantView = new TrickleView({\n                model: view.model,\n                el: view.el\n            });\n            this.descendantViews[view.model.get(\"_id\")] = descendantView;\n        },\n\n        //trickle lifecycle\n\n        onPageReady: function(model, value) {\n            if (!value) return;\n\n            this.currentDescendant = null;\n\n            Adapt.trigger(\"trickle:started\");\n            this.gotoNextDescendant();\n        },\n\n        gotoNextDescendant: function() {\n            this.getDescendants();\n\n            if (this.currentDescendant) {\n                this.currentDescendant.trigger(\"stepunlock\");\n                this.currentDescendant = null;\n            }\n\n            for (var index = this.currentDescendantIndex || 0, l = this.descendantsChildFirst.length; index < l; index++) {\n                var descendant = this.descendantsChildFirst[index];\n                switch ( descendant.get(\"_type\") ) {\n                case \"block\": case \"article\":\n                    this.currentLocksOnDescendant = 0;\n                    this.currentDescendantIndex = index;\n                    var currentId = descendant.get(\"_id\");\n                    this.currentDescendant = this.descendantViews[currentId];\n                    this.currentDescendant.trigger(\"steplock\");\n                    return;\n                }\n            }\n            this.finished();\n        },\n\n        onContinue: function(view) {\n            if (!this.currentDescendant) return;\n            if (view.model.get(\"_id\") !== this.currentDescendant.model.get(\"_id\")) return;\n\n            this.onSkip();\n        },\n\n        onWait: function() {\n            this.currentLocksOnDescendant++;\n        },\n\n        onUnwait: function() {\n            this.currentLocksOnDescendant--;\n            if (this.currentLocksOnDescendant > 0) return;\n            \n            var lastDescendant = this.currentDescendant.model;\n            \n            this.currentDescendantIndex++;\n            this.gotoNextDescendant();\n\n            Adapt.trickle.scroll(lastDescendant);\n            \n        },\n\n        onSkip: function() {\n            //wait for all handlers to accept skip\n            _.defer(_.bind(function() {\n                this.currentDescendantIndex++;\n                this.gotoNextDescendant();\n            }, this));\n        },\n\n        onKill: function() {\n            this.finished();\n            this.detachFromPage();\n        },\n\n        finished: function() {\n            Adapt.trigger(\"trickle:finished\");\n            this.detachFromPage();\n        },\n\n        //end of trickle lifecycle\n\n        onRemove: function() {\n            this.finished();\n        },\n\n        detachFromPage: function() {\n            this.removeClassFromHtml();\n            this.undelegateEvents();\n            this.stopListening();\n            this.model = null;\n            this.$el = null;\n            this.el = null;\n            this.currentDescendant = null;\n            this.descendantViews = null;\n            this.descendantsChildFirst = null;\n            this.descendantsParentFirst = null;\n            Adapt.trickle.pageView = null;\n        },\n\n        removeClassFromHtml: function() {\n            $(\"html\").removeClass(\"trickle\");\n        }\n                \n    });\n\n    return PageView;\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/lib/adaptModelExtension',[\n    'coreJS/adapt',\n    'coreModels/adaptModel'\n], function(Adapt, AdaptModel) {\n\n    _.extend(AdaptModel.prototype, {\n        \n        /*\n        * Fetchs the sub structure of an id as a flattened array\n        *\n        *   Such that the tree:\n        *       { a1: { b1: [ c1, c2 ], b2: [ c3, c4 ] }, a2: { b3: [ c5, c6 ] } }\n        *\n        *   will become the array (parent first = false):\n        *       [ c1, c2, b1, c3, c4, b2, a1, c5, c6, b3, a2 ]\n        *\n        *   or (parent first = true):\n        *       [ a1, b1, c1, c2, b2, c3, c4, a2, b3, c5, c6 ]\n        *\n        * This is useful when sequential operations are performed on the page/article/block/component hierarchy.\n        */\n        getDescendants: function(parentFirst) {\n            var descendants = [];\n\n            if (this.get(\"_type\") === \"component\") {\n                descendants.push(this);\n                return descendants;\n            }\n\n            var children = this.getChildren().models;\n\n            for (var i = 0, l = children.length; i < l; i++) {\n\n                var child = children[i];\n                if (child.get(\"_type\") === \"component\") {\n\n                    descendants.push(child);\n\n                } else {\n\n                    var subDescendants = child.getDescendants(parentFirst);\n                    if (parentFirst == true) descendants.push(child);\n                    descendants = descendants.concat(subDescendants);\n                    if (parentFirst != true) descendants.push(child);\n\n                }\n\n            }\n\n            return descendants;\n        },\n\n        /*\n        * Returns a relative structural item from the Adapt hierarchy\n        *   \n        *   Such that in the tree:\n        *       { a1: { b1: [ c1, c2 ], b2: [ c3, c4 ] }, a2: { b3: [ c5, c6 ] } }\n        *\n        *       findRelative(modelC1, \"@block +1\") = modelB2;\n        *       findRelative(modelC1, \"@component +4\") = modelC5;\n        *\n        */\n        findRelative: function(relativeString, options) {\n            var types = [ \"menu\", \"page\", \"article\", \"block\", \"component\" ];\n\n            options = options || {};\n\n            var modelId = this.get(\"_id\");\n            var modelType = this.get(\"_type\");\n\n            //return a model relative to the specified one if opinionated\n            var rootModel = Adapt.course;\n            if (options.limitParentId) {\n                rootModel = Adapt.findById(options.limitParentId);\n            }\n\n            var relativeDescriptor = parseRelativeString(relativeString);\n\n            var findAncestorType = (_.indexOf(types, modelType) > _.indexOf(types, relativeDescriptor.type));\n            var findSameType = (modelType === relativeDescriptor.type);\n\n            var searchBackwards = false;\n            var movementCount = 0;\n\n            // children first [c,c,b,a,c,c,b,a,p,c,c,b,a,c,c,b,a,p]\n            var pageDescendants = rootModel.getDescendants();\n\n            //choose search style\n            if (findSameType || findAncestorType) {\n                //examples a<>a or c<>b,a,p\n                //assume next is 0 index\n                //assume last is -1 index\n                searchBackwards = (relativeDescriptor.offset <= 0);\n            } else {\n                //finding descendant\n                //examples a<>c or a<>b\n                if (relativeDescriptor.offset < 1) {\n                    //assume last descendant is 0 index\n                    searchBackwards = true;\n                } else {\n                    //assume next descendant is +1 index\n                    movementCount = 1;\n                    searchBackwards = false;\n                }\n            }\n\n            //exclude not available and not visible if opinionated\n            if (options.filterNotVisible) {\n                pageDescendants = _.filter(pageDescendants, function(descendant) {\n                    return descendant.get(\"_isVisible\");\n                });\n            } \n            if (options.filterNotAvailable) {\n                pageDescendants = _.filter(pageDescendants, function(descendant) {\n                    return descendant.get(\"_isAvailable\");\n                });\n            } \n\n            //find current index in array\n            var modelIndex = _.findIndex(pageDescendants, function(pageDescendant) {\n                if (pageDescendant.get(\"_id\") === modelId) {\n                    return true;\n                }\n                return false;\n            });\n\n            //search in appropriate order\n            if (searchBackwards) {\n                for (var i = modelIndex, l = -1; i > l; i--) {\n                    var descendant = pageDescendants[i];\n                    if (descendant.get(\"_type\") === relativeDescriptor.type) {\n                        if (-movementCount === relativeDescriptor.offset) {\n                            return Adapt.findById(descendant.get(\"_id\"));\n                        }\n                        movementCount++;\n                    }\n                }\n            } else {\n                for (var i = modelIndex, l = pageDescendants.length; i < l; i++) {\n                    var descendant = pageDescendants[i];\n                    if (descendant.get(\"_type\") === relativeDescriptor.type) {\n                        if (movementCount === relativeDescriptor.offset) {\n                            return Adapt.findById(descendant.get(\"_id\"));\n                        }\n                        movementCount++;\n                    }\n                }\n            }\n\n            return undefined;\n        }\n    });\n\n\n    function parseRelativeString(relativeString) {\n        var type = relativeString.substr(0, _.indexOf(relativeString, \" \"));\n        var offset = parseInt(relativeString.substr(type.length));\n        type = type.substr(1);\n\n        /*RETURN THE TYPE AND OFFSET OF THE SCROLLTO\n        * \"@component +1\"  : \n        * {\n        *       type: \"component\",\n        *       offset: 1\n        * }\n        */\n        return { \n            type: type,\n            offset: offset\n        };\n    }\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/handlers/buttonView',[\n    'core/js/adapt',\n    'core/js/views/componentView'\n], function(Adapt, ComponentView) {\n\n    var completionAttribute = \"_isComplete\";\n\n    var TrickleButtonView = Backbone.View.extend({\n\n        isStepLocking: false,\n        hasStepLocked: false,\n        isStepLocked: false,\n        isStepLockFinished: false,\n        hasStepPreCompleted: false,\n        isWaitingForClick: false,\n        allowVisible: false,\n        allowEnabled: true,\n        overlayShownCount: 0,\n\n        el: function() {\n\n            this.setupPreRender();\n\n            return Handlebars.templates['trickle-button'](this.model.toJSON());\n        },\n\n        setupPreRender: function() {\n            \n            this.setupButtonVisible();\n            this.setupButtonEnabled();\n        },\n\n        setupButtonVisible: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            this.allowVisible = false;\n            trickle._button._isVisible = false;\n\n            if (trickle._button._styleBeforeCompletion === \"visible\") {\n                this.allowVisible = true;\n                if (trickle._button._autoHide && trickle._button._isFullWidth) {\n                    trickle._button._isVisible = false;    \n                } else {\n                    trickle._button._isVisible = true;\n                }\n            }\n        },\n\n        setupButtonEnabled: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            \n            if (trickle._stepLocking._isCompletionRequired === false) {\n                this.allowEnabled = true;\n                trickle._button._isDisabled = false;   \n            } else if (trickle._button._styleBeforeCompletion === \"visible\") {\n                this.allowEnabled = false;\n                trickle._button._isDisabled = true;\n            } else {\n                trickle._button._isDisabled = false;\n                this.allowEnabled = true;\n            }\n\n        },\n        \n        events: {\n            \"click button\": \"onButtonClick\"\n        },\n\n        initialize: function(options) {\n            this.getCompletionAttribute();\n            this.debounceCheckAutoHide();\n            this.setupStepLocking();\n            this.setupEventListeners();\n        },\n\n        getCompletionAttribute: function() {\n            var trickle = Adapt.trickle.getModelConfig(Adapt.config);\n            if (!trickle) return;\n            if (trickle._completionAttribute) {\n                completionAttribute = trickle._completionAttribute;\n            }\n        },\n\n        setupStepLocking: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            if (trickle._stepLocking._isEnabled) {\n                this.isStepLocked = true;\n            } else {\n                this.isStepLocked = false;\n            }\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:overlay\": this.onOverlay,\n                \"trickle:unoverlay\": this.onUnoverlay,\n                \"trickle:steplock\": this.onStepLock,\n                \"trickle:stepunlock\": this.onStepUnlock,\n                \"trickle:skip\": this.onSkip,\n                \"trickle:kill\": this.onKill,\n                \"trickle:update\": this.onUpdate,\n                \"remove\": this.onRemove \n            });\n\n            this.listenTo(this.model, \"change:\"+completionAttribute, this.onCompletion);\n        },\n\n        debounceCheckAutoHide: function() {\n            this.checkButtonAutoHideSync = _.bind(this.checkButtonAutoHide, this);\n            this.checkButtonAutoHide = _.debounce(this.checkButtonAutoHideSync, 100);\n        },\n\n        checkButtonAutoHide: function() {\n            if (!this.allowVisible) {\n                this.setButtonVisible(false);\n                return;\n            }\n\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            if (!trickle._button._autoHide) {\n                this.setButtonVisible(true);\n                return;\n            } else if (this.overlayShownCount > 0) {\n                this.setButtonVisible(false);\n                return;\n            }\n\n            var measurements = this.$el.onscreen();\n\n            //this is to fix ios7 iphone4 miscalculation\n            var isJustOffscreen = (measurements.bottom > -100);\n\n\n            //add show/hide animation here if needed\n            if (measurements.onscreen || isJustOffscreen) {\n                this.setButtonVisible(true);\n            } else {\n                this.setButtonVisible(false);\n            }\n        },\n\n        setButtonVisible: function(bool) {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            if (!bool) {\n                this.$(\".component-inner\").addClass(\"display-none\");\n                trickle._button._isVisible = false;\n                //console.log(\"trickle hiding button\", this.model.get(\"_id\"));\n            } else {\n                this.$(\".component-inner\").removeClass(\"display-none\");\n                trickle._button._isVisible = true;\n                //console.log(\"trickle showing button\", this.model.get(\"_id\"));\n            }\n        },\n\n        checkButtonEnabled: function(bool) {\n            if (!this.allowEnabled) {\n                this.setButtonEnabled(false);\n            } else {\n                this.setButtonEnabled(true);\n            }\n        },\n\n        setButtonEnabled: function(bool) {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            if (bool) {\n                this.$(\"button\").removeClass(\"disabled\").removeAttr(\"disabled\");\n                trickle._button._isDisabled = true;\n            } else {\n                this.$(\"button\").addClass(\"disabled\").attr(\"disabled\", \"disabled\");\n                trickle._button._isDisabled = false;\n            }\n        },\n\n        onStepLock: function(view) {\n            if (!this.isViewMatch(view)) return;\n\n            this.hasStepLocked = true;\n            this.isStepLocking = true;\n            this.overlayShownCount = 0;\n\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n\n            if (this.isButtonEnabled()) {\n                var isCompleteAndShouldRelock = (trickle._stepLocking._isLockedOnRevisit && this.model.get(completionAttribute));\n\n                if (isCompleteAndShouldRelock) {\n                    this.isStepLocked = true;\n                    this.model.set(\"_isTrickleAutoScrollComplete\", false);\n                    Adapt.trigger(\"trickle:wait\");\n                    this.allowVisible = true;\n                    this.checkButtonAutoHide();\n                } else if (this.hasStepPreCompleted) {\n                    //force the button to show if section completed before it was steplocked\n                    this.isStepLocked = true;\n                    this.model.set(\"_isTrickleAutoScrollComplete\", false);\n                    this.allowVisible = true;\n                    this.stepCompleted();\n                }\n                this.setupOnScreenListener();\n            }\n        },\n\n        onOverlay: function() {\n            this.overlayShownCount++;\n        },\n\n        onUnoverlay: function() {\n            this.overlayShownCount--;\n            this.checkButtonAutoHide();\n        },\n\n        setupOnScreenListener: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n\n            if (trickle._button._autoHide) {\n                this.$el.on(\"onscreen\", this.checkButtonAutoHideSync);\n            }\n        },\n\n        isViewMatch: function(view) {\n            return view.model.get(\"_id\") === this.model.get(\"_id\");\n        },\n\n        isButtonEnabled: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n\n            if (!trickle._isEnabled || !trickle._button._isEnabled) return false;\n            return true;\n        },\n\n        onCompletion: function(model, value) {\n            if (value === false) return;\n\n            this.hasStepPreCompleted = true;\n\n            if (!this.hasStepLocked) return;\n\n            _.defer(_.bind(function() {\n                this.stepCompleted();\n            }, this));\n        },\n\n        stepCompleted: function() {\n\n            if (this.isStepLockFinished) return;\n\n            this.isStepLocked = false;\n            this.allowVisible = false;\n            this.allowEnabled = false;\n\n            if (this.isButtonEnabled()) {\n                if (this.isStepLocking) {\n\n                    this.isStepLocked = true;\n                    this.isWaitingForClick = true;\n                    Adapt.trigger(\"trickle:wait\");\n\n                } else {\n\n                    this.isStepLockFinished = true;\n                }\n\n                this.allowVisible = true;\n                this.allowEnabled = true;\n            }\n\n            this.model.set(\"_isTrickleAutoScrollComplete\", false);\n            this.checkButtonAutoHide();\n            this.checkButtonEnabled();\n\n        },\n\n        onButtonClick: function() {\n            if (this.isStepLocked) {\n                Adapt.trigger(\"trickle:unwait\");\n                this.isStepLocked = false;\n                this.isStepLockFinished = true;\n\n            } else {\n                this.model.set(\"_isTrickleAutoScrollComplete\", false);\n                _.defer(_.bind(function() {\n                    Adapt.trickle.scroll(this.model);\n                }, this));\n            }\n\n            var trickle = this.model.get(\"_trickle\");\n            switch (trickle._button._styleAfterClick) {\n            case \"hidden\":\n                this.allowVisible = false;\n                this.checkButtonAutoHideSync();\n                break;\n            case \"disabled\":\n                this.allowEnabled = false;\n                this.checkButtonAutoHideSync();\n            }\n        },\n\n        onUpdate: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n\n            if (trickle._button._autoHide && this.isStepLocking) {\n                this.$el.off(\"onscreen\", this.checkButtonAutoHideSync);\n            }\n            \n            var $original = this.$el;\n            var $newEl = $(Handlebars.templates['trickle-button'](this.model.toJSON()));\n            $original.replaceWith($newEl);\n\n            this.setElement($newEl);\n\n            if (trickle._button._autoHide && this.isStepLocking) {\n                this.$el.on(\"onscreen\", this.checkButtonAutoHideSync);\n            }\n        },\n\n        onStepUnlock: function(view) {\n            if (!this.isViewMatch(view)) return;\n            this.$el.off(\"onscreen\", this.checkButtonAutoHideSync);\n            this.isStepLocking = false;\n            this.overlayShownCount = 0;\n        },\n\n        onSkip: function() {\n            if (!this.isStepLocking) return;\n\n            this.onKill();\n        },\n\n        onKill: function() {\n            this.$el.off(\"onscreen\", this.checkButtonAutoHideSync);\n            if (this.isWaitingForClick) {\n                this.model.set(\"_isTrickleAutoScrollComplete\", true);\n            }\n            this.isWaitingForClick = false;\n            this.isStepLocked = false;\n            this.isStepLocking = false;\n            this.allowVisible = false;\n            this.allowEnabled = false;\n            this.isStepLockFinished = true;\n            this.model.set(\"_isTrickleAutoScrollComplete\", false);\n            this.checkButtonAutoHide();\n            this.checkButtonEnabled();\n        },\n\n        onRemove: function() {\n            if (this.isWaitingForClick) {\n                this.model.set(\"_isTrickleAutoScrollComplete\", true);\n            }\n            this.isWaitingForClick = false;\n            this.$el.off(\"onscreen\", this.checkButtonAutoHideSync);\n            this.isStepLocking = true;\n            this.remove();\n        }\n\n    });\n\n    return TrickleButtonView;\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/handlers/button',[\n    'core/js/adapt',\n    './buttonView'\n], function(Adapt, ButtonView) {\n\n    var TrickleButtonHandler = _.extend({\n\n        buttonViews: null,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, {\n                \"app:dataReady\": this.onAppDataReady,\n                \"remove\": this.onRemove\n            });\n        },\n\n        onAppDataReady: function() {\n            this.buttonViews = {};\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:preRender\": this.onPreRender,\n                \"trickle:postRender\": this.onPostRender\n            });\n        },\n\n        onPreRender: function(view) {\n            //setup button on prerender to allow it to control the steplocking process\n            if (!this.isTrickleEnabled(view.model)) return;\n\n            this.setupConfigDefaults(view.model);\n\n            this.buttonViews[view.model.get(\"_id\")] = new ButtonView({\n                model: view.model\n            });\n        },\n\n        onPostRender: function(view) {\n            //inject the button at post render\n            if (!this.isTrickleEnabled(view.model)) return;\n\n            view.$el.append(this.buttonViews[view.model.get(\"_id\")].$el);\n        },\n\n        isTrickleEnabled: function(model) {\n            var trickle = Adapt.trickle.getModelConfig(model);\n            if (!trickle || !trickle._isEnabled) return false;\n\n            if (trickle._onChildren && model.get(\"_type\") === \"article\") return false;\n\n            return true;\n        },\n\n        setupConfigDefaults: function(model) {\n            if (model.get(\"_isTrickleButtonConfigured\")) return;\n\n            var trickle = Adapt.trickle.getModelConfig(model);\n            trickle._button = _.extend({\n                \"_isEnabled\": true, //(default=true)\n                \"_styleBeforeCompletion\": \"hidden\", //(default=hidden)\n                \"_styleAfterClick\": \"hidden\", //(default=hidden)\n                \"_isFullWidth\": true, //(default=true)\n                \"_autoHide\": true, //(default=true)\n                \"_className\": \"\", //(default=\"\")\n                \"text\": \"Continue\", //(default=\"Continue\")\n                \"startText\": \"Begin\", //(default=\"Begin\")\n                \"finalText\": \"Finish\", //(default=\"Finish\")\n                \"_component\": \"trickle-button\", //(default=\"trickle-button\")\n                \"_isLocking\": true,\n                \"_isVisible\": false,\n                \"_isDisabled\": false\n            }, trickle._button);\n\n\n            if (trickle._button._isFullWidth) {\n                trickle._stepLocking._isEnabled = true;\n                trickle._button._styleAfterClick = \"hidden\";\n            } else {\n                trickle._button._autoHide = false;\n            }\n\n            Adapt.trickle.setModelConfig(model, trickle);\n            model.set(\"_isTrickleButtonConfigured\", true);\n\n        },\n\n        onRemove: function() {\n            this.buttonViews = {};\n        }\n\n    }, Backbone.Events);\n\n    TrickleButtonHandler.initialize();\n\n    return TrickleButtonHandler;\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/handlers/completion',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var completionAttribute = \"_isComplete\";\n\n    var TrickleCompletionHandler = _.extend({\n\n        isStepLocking: false,\n        isCompleted: false,\n        \n        stepModel: null,\n        \n        initialize: function() {\n            this.listenToOnce(Adapt, \"app:dataReady\", this.onAppDataReady);\n        },\n\n        onAppDataReady: function() {\n            this.getCompletionAttribute();\n            this.setupEventListeners();\n        },\n\n        getCompletionAttribute: function() {\n            var trickle = Adapt.trickle.getModelConfig(Adapt.config);\n            if (!trickle) return;\n            if (trickle._completionAttribute) {\n                completionAttribute = trickle._completionAttribute;\n            }\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:descendants\": this.onDescendants,\n                \"trickle:steplock\": this.onStepLock,\n                \"trickle:stepunlock\": this.onStepUnlock,\n                \"trickle:kill\": this.onKill,\n                \"remove\": this.onRemove\n            });\n        },\n\n        onDescendants: function(view) {\n            //save the original completion state of the component before steplocking\n            _.each(view.descendantsParentFirst, _.bind(function(descendant) {\n                var trickle = Adapt.trickle.getModelConfig(descendant);\n                if (!trickle) return;\n                trickle._wasCompletedPreRender = descendant.get(completionAttribute);\n            }, this));\n        },\n\n        onStepLock: function(view) {\n            var isModelComplete = view.model.get(completionAttribute);\n\n            var trickle = Adapt.trickle.getModelConfig(view.model);\n            if (!trickle._stepLocking._isCompletionRequired\n                && !trickle._stepLocking._isLockedOnRevisit) {\n                if (isModelComplete) {\n                    //skip any components that do not require completion but that are already complete\n                    //this is needed for a second visit to a page with 'inview' components that aren't reset and don't require completion and are not relocked on revisit\n                    Adapt.trigger(\"trickle:continue\", view);\n                }\n                return;\n            }\n\n            if (trickle._stepLocking._isCompletionRequired\n                && isModelComplete\n                && trickle._wasCompletedPreRender) {\n                //skip any components that are complete, have require completion and we completed before the page rendered\n                Adapt.trigger(\"trickle:continue\", view);\n                return;\n            }\n\n            Adapt.trigger(\"trickle:wait\");\n\n            if (isModelComplete) {\n                _.defer(function() {\n                    Adapt.trigger(\"trickle:unwait\");\n                });\n                return;\n            }\n\n            view.model.set(\"_isTrickleAutoScrollComplete\", false);\n            this.isCompleted = false;\n            this.isStepLocking = true;\n            this.stepModel = view.model;\n\n            this.listenTo(this.stepModel, \"change:\"+completionAttribute, this.onCompletion);\n        },\n\n        onCompletion: function(model, value) {\n            if (value === false) return;\n\n            _.defer(_.bind(function() {\n                this.stepCompleted();\n            }, this));\n\n        },\n\n        stepCompleted: function() {\n\n            if (!this.isStepLocking) return;\n\n            if (this.isCompleted) return;\n            this.isCompleted = true;\n\n            this.stopListening(this.stepModel, \"change:\"+completionAttribute, this.onCompletion);\n            \n            _.defer(function(){\n                Adapt.trigger(\"trickle:unwait\");\n            });\n        },\n\n        onKill: function() {\n            this.onStepUnlock();\n        },\n\n        onRemove: function() {\n            this.onStepUnlock();\n        },\n\n        onStepUnlock: function() {\n            this.stopListening(this.stepModel, \"change:\"+completionAttribute, this.onCompletion);\n            this.isStepLocking = false;\n            this.stepModel = null;\n            this.isCompleted = false;\n        }        \n\n    }, Backbone.Events);\n\n    TrickleCompletionHandler.initialize();\n\n    return TrickleCompletionHandler;\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/handlers/notify',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var TrickleNotifyHandler = _.extend({\n\n        isStepLocking: false,\n        isNotifyOpen: false,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, \"app:dataReady\", this.onAppDataReady);\n        },\n\n        onAppDataReady: function() {\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:steplock\": this.onStepLock,\n                \"notify:opened\": this.onNotifyOpened,\n                \"notify:closed\": this.onNotifyClosed,\n                \"trickle:stepunlock\": this.onStepUnlock,\n                \"remove\": this.onRemove\n            });\n        },\n\n        onStepLock: function(view) {\n            this.isStepLocking = true;\n        },\n\n        onNotifyOpened: function() {\n            if (!this.isStepLocking) return;\n\n            this.isNotifyOpen = true;\n            Adapt.trigger(\"trickle:overlay\");\n            Adapt.trigger(\"trickle:wait\");\n        },\n\n        onNotifyClosed: function() {\n            if (!this.isStepLocking) return;\n            if (!this.isNotifyOpen) return;\n\n            this.isNotifyOpen = false;\n            Adapt.trigger(\"trickle:unoverlay\");\n            Adapt.trigger(\"trickle:unwait\");\n        },\n\n        onStepUnlock: function() {\n            this.isStepLocking = false;\n        },\n\n        onRemove: function() {\n            this.onStepUnlock();\n        }\n\n    }, Backbone.Events);\n\n    TrickleNotifyHandler.initialize();\n\n    return TrickleNotifyHandler;\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/handlers/resize',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var TrickleBodyResizeHandler = _.extend({\n\n        isStepLocking: false,\n\n        stepView: null,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, \"app:dataReady\", this.onAppDataReady);\n        },\n\n        onAppDataReady: function() {\n            this.debounceOnResize();\n            this.setupEventListeners();\n        },\n\n        debounceOnResize: function() {\n            this.onResize = _.debounce(_.bind(this.onResize, this), 10);\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:steplock\": this.onStepLock,\n                \"trickle:resize\": this.onTrickleResize,\n                \"trickle:stepunlock\": this.onStepUnlock,\n                \"trickle:kill\": this.onKill,\n                \"trickle:finished\": this.onFinished,\n                \"remove\": this.onRemove\n            });\n        },\n\n        onStepLock: function(view) {\n            this.isStepLocking = true;\n            this.stepView = view;\n            $(window).on(\"resize\", this.onResize);\n            $(\".page\").on(\"resize\", this.onResize);\n\n            //wait for height / visibility to adjust\n            _.defer(function() {\n                Adapt.trigger(\"trickle:resize\");\n            });\n        },\n\n        onResize: function() {\n            if (!this.isStepLocking) return;\n            Adapt.trigger(\"trickle:resize\");\n        },\n\n        onTrickleResize: function() {\n            if (!this.isStepLocking) return;\n            var offset = this.stepView.$el.offset();\n            var height = this.stepView.$el.height();\n\n            var topPadding = parseInt($(\"#wrapper\").css(\"padding-top\") || \"0\");\n\n            var bottom = (offset['top'] - topPadding) + height;\n\n            $(\"#wrapper\").css(\"height\", bottom );\n        },\n\n        onStepUnlock: function(view) {\n            this.isStepLocking = false;\n            this.stepView = null;\n            $(window).off(\"resize\", this.onResize);\n            $(\".page\").off(\"resize\", this.onResize);\n        },\n\n        onKill: function() {\n            this.onFinished();\n            this.onStepUnlock();\n        },\n\n        onFinished: function() {\n             $(\"#wrapper\").css(\"height\", \"\" );\n        },\n\n        onRemove: function() {\n            this.onStepUnlock();\n            this.stepView = null;\n        }\n\n    }, Backbone.Events);\n\n    TrickleBodyResizeHandler.initialize();\n\n    return TrickleBodyResizeHandler;\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/handlers/tutor',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var TrickleTutorHandler = _.extend({\n\n        stepLockedId: null,\n        isStepLocking: false,\n        isTutorOpen: false,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, \"app:dataReady\", this.onAppDataReady);\n        },\n\n        onAppDataReady: function() {\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:steplock\": this.onStepLock,\n                \"tutor:opened\": this.onTutorOpened,\n                \"tutor:closed\": this.onTutorClosed,\n                \"trickle:stepunlock\": this.onStepUnlock,\n                \"remove\": this.onRemove\n            });\n        },\n\n        onStepLock: function(view) {\n            if (view) {\n                this.stepLockedId = view.model.get(\"_id\");\n            }\n            this.isStepLocking = true;\n        },\n\n        onTutorOpened: function(view, alertObject) {\n            if (!this.isStepLocking) return;\n            if (!this.isOriginStepLocked(view)) return;\n\n            this.isTutorOpen = true;\n            Adapt.trigger(\"trickle:overlay\");\n            Adapt.trigger(\"trickle:wait\");\n        },\n\n        isOriginStepLocked: function(view) {\n            if (!view || !this.stepLockedId) return true;\n\n            var parents = view.model.getAncestorModels();\n            var hasStepLockedParent = _.find(parents, function(ancestor) {\n                return ancestor.get('_id') === this.stepLockedId;\n            }, this);\n            if (!hasStepLockedParent) return false;\n            return true;\n        },\n\n        onTutorClosed: function(view, alertObject) {\n            if (!this.isStepLocking) return;\n            if (!this.isTutorOpen) return;\n            if (!this.isOriginStepLocked(view)) return;\n\n            this.isTutorOpen = false;\n            Adapt.trigger(\"trickle:unoverlay\");\n            Adapt.trigger(\"trickle:unwait\");\n        },\n\n        onStepUnlock: function() {\n            this.isStepLocking = false;\n            this.stepLockedId = null;\n        },\n\n        onRemove: function() {\n            this.onStepUnlock();\n        }\n\n    }, Backbone.Events);\n\n    TrickleTutorHandler.initialize();\n\n    return TrickleTutorHandler;\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/handlers/visibility',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var TrickleVisibilityHandler = _.extend({\n\n        isStepLocking: false,\n\n        trickleModel: null,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, \"app:dataReady\", this.onAppDataReady);\n        },\n\n        onAppDataReady: function() {\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:steplock\": this.onStepLock,\n                \"trickle:visibility\": this.onVisibility,\n                \"trickle:stepunlock\": this.onStepUnlock,\n                \"trickle:kill\": this.onKill,\n                \"trickle:finished\": this.onFinished,\n                \"remove\": this.onRemove\n            });\n\n        },\n\n        onStepLock: function(view) {\n            this.isStepLocking = true;\n            this.trickleModel = view.model;\n            Adapt.trigger(\"trickle:visibility\");\n        },\n\n        onVisibility: function() {\n            if (!this.isStepLocking) return;\n\n            if (!Adapt.trickle.pageView) return;\n\n            var descendantsParentFirst = Adapt.trickle.pageView.descendantsParentFirst;\n\n            var trickleModelId = this.trickleModel.get(\"_id\");\n            var trickleType = this.trickleModel.get(\"_type\");\n\n            var atIndex = _.findIndex(descendantsParentFirst, function(descendant) {\n                if (descendant.get(\"_id\") === trickleModelId) return true;\n            });\n\n            _.each(descendantsParentFirst, function(descendant, index) {\n                var components = descendant.findDescendantModels(\"components\");\n                if (index <= atIndex) {\n                    descendant.set(\"_isVisible\", true, {pluginName:\"trickle\"});\n                    _.each(components, function(componentModel) {\n                        componentModel.set(\"_isVisible\", true, {pluginName:\"trickle\"});\n                    });\n                } else {\n\n                    if (trickleType === \"article\" && descendant.get(\"_type\") === \"block\") {\n                        //make sure article blocks are shown\n                        if (descendant.get(\"_parentId\") === trickleModelId) {\n                            descendant.set(\"_isVisible\", true, {pluginName:\"trickle\"});\n                            _.each(components, function(componentModel) {\n                                componentModel.set(\"_isVisible\", true, {pluginName:\"trickle\"});\n                            });\n                            return;\n                        }\n                    }\n\n                    descendant.set(\"_isVisible\", false, {pluginName:\"trickle\"});\n                    _.each(components, function(componentModel) {\n                        componentModel.set(\"_isVisible\", false, {pluginName:\"trickle\"});\n                    });\n                }\n            });\n\n        },\n\n        onStepUnlock: function(view) {\n            this.isStepLocking = false;\n            this.trickleModel = null;\n        },\n\n        onKill: function() {\n            this.onFinished();\n            this.onStepUnlock();\n        },\n\n        onFinished: function() {\n\n            var descendantsParentFirst = Adapt.trickle.pageView.descendantsParentFirst;\n            _.each(descendantsParentFirst, function(descendant) {\n                descendant.set(\"_isVisible\", true, {pluginName:\"trickle\"});\n                var components = descendant.findDescendantModels(\"components\");\n                _.each(components, function(componentModel) {\n                    componentModel.set(\"_isVisible\", true, {pluginName:\"trickle\"});\n                });\n            });\n\n        },\n\n        onRemove: function() {\n            this.onStepUnlock();\n        }\n\n    }, Backbone.Events);\n\n    TrickleVisibilityHandler.initialize();\n\n    return TrickleVisibilityHandler;\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/handlers/done',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var TrickleDone = _.extend({\n\n        initialize: function() {\n            this.listenToOnce(Adapt, \"app:dataReady\", this.onAppDataReady);\n        },\n\n        onAppDataReady: function() {\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            this.onDone = _.debounce(_.bind(this.onDone), 50);\n            this.listenTo(Adapt, {\n                \"trickle:steplock\": this.onDone,\n                \"trickle:stepunlock\": this.onDone,\n                \"trickle:continue\": this.onDone,\n                \"trickle:finished\": this.onDone\n            });\n        },\n\n        onDone: function() {\n            Adapt.trigger(\"trickle:done\");\n        }\n\n    }, Backbone.Events);\n\n    TrickleDone.initialize();\n\n    return TrickleDone;\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/adapt-contrib-trickle',[\n    'coreJS/adapt',\n    './pageView',\n    'libraries/jquery.resize',\n    './lib/adaptModelExtension',\n    './handlers/button',\n    './handlers/completion',\n    './handlers/notify',\n    './handlers/resize',\n    './handlers/tutor',\n    './handlers/visibility',\n    './handlers/done'\n], function(Adapt, PageView) {\n\n    Adapt.trickle = _.extend({\n\n        model: null,\n        pageView: null,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, {\n                \"app:dataReady\": this.onAppDataReady\n            });\n        },\n\n        onAppDataReady: function() {\n            this.getCourseModel();\n            if (!this.isCourseEnabled()) return;\n            this.setupListeners();\n        },\n\n        getCourseModel: function() {\n            this.model = Adapt.course;\n        },\n\n        isCourseEnabled: function() {\n            var trickleConfig = this.getModelConfig(this.model);\n            if (trickleConfig && trickleConfig._isEnabled === false) return false;\n            return true;\n        },\n\n        getModelConfig: function(model) {\n            return model.get(\"_trickle\");\n        },\n\n        setModelConfig: function(model, config) {\n            return model.set(\"_trickle\", config);\n        },\n\n        setupListeners: function() {\n            this.listenTo(Adapt, {\n                \"pageView:preRender\": this.onPagePreRender,\n                \"remove\": this.onRemove\n            });\n        },\n\n        onPagePreRender: function(view) {\n            this.pageView = new PageView({\n                model: view.model, \n                el: view.el\n            });\n        },\n\n        scroll: function(fromModel) {\n            //wait for model visibility to handle\n            _.delay(_.bind(function() {\n\n                if (!this.shouldScrollPage(fromModel)) return;\n\n                var trickle = Adapt.trickle.getModelConfig(fromModel);\n                var scrollTo = trickle._scrollTo;\n                if (scrollTo === undefined) scrollTo = \"@block +1\";\n\n                fromModel.set(\"_isTrickleAutoScrollComplete\", true);\n\n                var scrollToId = \"\";\n                switch (scrollTo.substr(0,1)) {\n                case \"@\":\n                    //NAVIGATE BY RELATIVE TYPE\n                    \n                    //Allows trickle to scroll to a sibling / cousin component relative to the current trickle item\n                    var relativeModel = fromModel.findRelative(scrollTo, {\n                        filterNotAvailable: true\n                    });\n                    \n                    if (relativeModel === undefined) return;\n                    scrollToId = relativeModel.get(\"_id\");\n\n                    //console.log(\"trickle scrolling to\", scrollToId, \"from\", fromModel.get(\"_id\"));\n\n                    break;\n                case \".\":\n                    //NAVIGATE BY CLASS\n                    scrollToId = scrollTo.substr(1, scrollTo.length-1);\n                    break;\n                default: \n                    scrollToId = scrollTo;\n                }\n\n                if (scrollToId == \"\") return;\n                \n                var duration = fromModel.get(\"_trickle\")._scrollDuration || 500;\n                Adapt.scrollTo(\".\" + scrollToId, { duration: duration });\n\n            }, this), 250);\n        },\n\n        shouldScrollPage: function(fromModel) {\n            var trickle = Adapt.trickle.getModelConfig(fromModel);\n            if (!trickle || !trickle._isEnabled) return false;\n\n            var hasScrolled = fromModel.get(\"_isTrickleAutoScrollComplete\");\n            if (hasScrolled) return false;\n\n            var isAutoScrollOff = (!trickle._autoScroll);\n            if (isAutoScrollOff) return false;\n\n            var isArticleWithOnChildren = (fromModel.get(\"_type\") === \"article\" && trickle._onChildren);\n            if (isArticleWithOnChildren) return false;\n\n            return true;\n        },\n\n        onRemove: function() {\n            \n        }\n                \n    }, Backbone.Events);\n\n    Adapt.trickle.initialize();\n\n    return Adapt.trickle;\n\n});\n\n",
    "define('extensions/adapt-contrib-tutor/js/adapt-contrib-tutor',[\n    'coreJS/adapt'\n],function(Adapt) {\n\n    Adapt.on('questionView:showFeedback', function(view) {\n\n        var alertObject = {\n            title: view.model.get(\"feedbackTitle\"),\n            body: view.model.get(\"feedbackMessage\")\n        };\n\n        var attributes = {};\n        var classes = [];\n\n        if (view.model.has('_isCorrect')) {\n            // Attach specific classes so that feedback can be styled.\n            if (view.model.get('_isCorrect')) {\n                classes.push('correct');\n            } else {\n                if (view.model.has('_isAtLeastOneCorrectSelection')) {\n                    // Partially correct feedback is an option.\n                    if (view.model.get('_isAtLeastOneCorrectSelection')) {\n                        classes.push('partially-correct');\n                    } else {\n                        classes.push('incorrect');\n                    }\n                } else {\n                    classes.push('incorrect');\n                }\n            }\n        }\n\n        // Add the extension/component type which triggered this.\n        if (view.model.has('_component')) {\n            classes.push('component-' + view.model.get('_component'));\n        } else if (view.model.has('_extension')) {\n            classes.push('extension-' + view.model.get('_extension'));\n        }\n\n        // Add the _id property as attribute.\n        attributes['data-adapt-id'] = view.model.get('_id');\n\n        alertObject._classes = classes.join(' ');\n        alertObject._attributes = attributes;\n\n        Adapt.once(\"notify:closed\", function() {\n            Adapt.trigger(\"tutor:closed\", view, alertObject);\n        });\n\n        Adapt.trigger('notify:popup', alertObject);\n\n        Adapt.trigger('tutor:opened', view, alertObject);\n    });\n\n});\n\n",
    "define('core/js/views/menuView',[\n    'core/js/adapt',\n    'core/js/views/adaptView'\n], function(Adapt, AdaptView) {\n\n    var MenuView = AdaptView.extend({\n\n    \tclassName: function() {\n            var visible = \"visibility-hidden\";\n            if (this.model.get('_isVisible')) {\n                visible = \"\";\n            }\n    \t\treturn 'menu ' +\n            'menu-' +\n            this.model.get('_id') +\n            \" \" + this.model.get('_classes') +\n            \" \" + this.setVisibility();\n    \t},\n\n        preRender: function() {\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n            this.$el.css('opacity', 0);\n            this.listenTo(this.model, 'change:_isReady', this.isReady);\n        },\n\n        postRender: function() {\n        },\n\n        isReady: function() {\n            if (this.model.get('_isReady')) {\n                _.defer(_.bind(function() {\n                    $('.loading').hide();\n                    $(window).scrollTop(0);\n                    Adapt.trigger('menuView:ready', this);\n                    var styleOptions = { opacity: 1 };\n                    if (this.disableAnimation) {\n                        this.$el.css(styleOptions);\n                        $.inview();\n                    } else {\n                        this.$el.velocity(styleOptions, {\n                            duration: 'fast',\n                            complete: function() {\n                                $.inview();\n                            }\n                        });\n                    }\n                    $(window).scroll();\n                }, this));\n            }\n        }\n\n    }, {\n        type:'menu'\n    });\n\n    return MenuView;\n\n});\n\n",
    "define('menu/adapt-contrib-boxMenu/js/adapt-contrib-boxmenu',[\n    'coreJS/adapt',\n    'coreViews/menuView'\n], function(Adapt, MenuView) {\n\n    var BoxMenuView = MenuView.extend({\n\n        postRender: function() {\n            var nthChild = 0;\n            this.model.getChildren().each(function(item) {\n                if (item.get('_isAvailable')) {\n                    nthChild++;\n                    item.set(\"_nthChild\", nthChild);\n                    this.$('.menu-container-inner').append(new BoxMenuItemView({model: item}).$el);\n                }\n            });\n        }\n\n    }, {\n        template: 'boxmenu'\n    });\n\n    var BoxMenuItemView = MenuView.extend({\n\n        events: {\n            'click button' : 'onClickMenuItemButton'\n        },\n\n        className: function() {\n            var nthChild = this.model.get(\"_nthChild\");\n            return [\n                'menu-item',\n                'menu-item-' + this.model.get('_id') ,\n                this.model.get('_classes'),\n                this.model.get('_isVisited') ? 'visited' : '',\n                this.model.get('_isComplete') ? 'completed' : '',\n                this.model.get('_isLocked') ? 'locked' : '',\n                'nth-child-' + nthChild,\n                nthChild % 2 === 0 ? 'nth-child-even' : 'nth-child-odd'\n            ].join(' ');\n        },\n\n        preRender: function() {\n            this.model.checkCompletionStatus();\n            this.model.checkInteractionCompletionStatus();\n        },\n\n        postRender: function() {\n            var graphic = this.model.get('_graphic');\n            if (graphic && graphic.src && graphic.src.length > 0) {\n                this.$el.imageready(_.bind(function() {\n                    this.setReadyStatus();\n                }, this));\n            } else {\n                this.setReadyStatus();\n            }\n        },\n\n        onClickMenuItemButton: function(event) {\n            if(event && event.preventDefault) event.preventDefault();\n            if(this.model.get('_isLocked')) return;\n            Backbone.history.navigate('#/id/' + this.model.get('_id'), {trigger: true});\n        }\n\n    }, {\n        template: 'boxmenu-item'\n    });\n\n    Adapt.on('router:menu', function(model) {\n\n        $('#wrapper').append(new BoxMenuView({model: model}).$el);\n\n    });\n\n});\n\n",
    "define('theme/adapt-theme-community-master/js/presentation',['require','core/js/adapt'],function(require) {\n\tvar Adapt = require('core/js/adapt');\n\n\tvar currentBlock;\n\tvar $blocks;\n\n\tAdapt.on('pageView:postRender', function(view) {\n\t\t$('#wrapper').append(Handlebars.templates['pageCount']());\n\n\t\t_.defer(function() {\n\t\t\t$blocks = view.$('.block');\n\t\t\t$('#pageCount .current').text(0);\n\t\t\t$('#pageCount .total').text($blocks.length);\n\t\t\tcurrentBlock = -1;\n\t\t});\n\t});\n\n\t// toggle nav styling on scroll\n\t$(document).scroll(function(event) {\n\t\tvar triggerAmount = $('.navigation').height()*1.5;\n\t\tvar showClass = $(event.currentTarget).scrollTop() > triggerAmount;\n\t\t$('.navigation').toggleClass('minimised', showClass);\n\t});\n\n\t$(document).keydown(function(event) {\n\t\tswitch(event.keyCode) {\n\t\t\tcase 38: // up key\n\t\t\t\tslideUp();\n\t\t\t\tbreak;\n\t\t\tcase 40: // down key\n\t\t\t\tslideDown();\n\t\t\t\tbreak;\n\t\t}\n\n\t\tfunction slideUp() {\n\t\t\tif(currentBlock > 0) {\n\t\t\t\tslide($($blocks[--currentBlock]));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(currentBlock === 0) {\n\t\t\t\tslide($('body'));\n\t\t\t\tcurrentBlock--;\n\t\t\t}\n\t\t}\n\n\t\tfunction slideDown() {\n\t\t\tif(currentBlock < $blocks.length-1) {\n\t\t\t\tslide($($blocks[++currentBlock]));\n\t\t\t}\n\t\t}\n\n\n\t\tfunction slide($div) {\n\t\t\t$('html,body').stop().animate({\n\t\t\t\tscrollTop: $div.offset().top\n\t\t\t}, 1000, updatePageCount);\n\t\t}\n\n\t\tfunction updatePageCount() {\n\t\t\t$('#pageCount .current').text(currentBlock+1);\n\t\t}\n\t});\n});\n\n",
    ";\ndefine(\"plugins\", [\"components/adapt-contrib-accordion/js/adapt-contrib-accordion\",\"components/adapt-contrib-blank/js/adapt-contrib-blank\",\"components/adapt-contrib-graphic/js/adapt-contrib-graphic\",\"components/adapt-contrib-media/js/adapt-contrib-media\",\"components/adapt-contrib-narrative/js/adapt-contrib-narrative\",\"components/adapt-contrib-text/js/adapt-contrib-text\",\"components/adapt-typist/js/adapt-typist\",\"extensions/adapt-contrib-pageLevelProgress/js/adapt-contrib-pageLevelProgress\",\"extensions/adapt-contrib-resources/js/adapt-contrib-resources\",\"extensions/adapt-contrib-trickle/js/adapt-contrib-trickle\",\"extensions/adapt-contrib-tutor/js/adapt-contrib-tutor\",\"menu/adapt-contrib-boxMenu/js/adapt-contrib-boxmenu\",\"theme/adapt-theme-community-master/js/presentation\"], function(){});\n\n",
    "require([\n    'core/js/adapt',\n    'core/js/adaptCollection',\n    'core/js/startController',\n    'core/js/models/articleModel',\n    'core/js/models/blockModel',\n    'core/js/models/configModel',\n    'core/js/models/contentObjectModel',\n    'core/js/models/componentModel',\n    'core/js/models/courseModel',\n    'core/js/models/questionModel',\n    'core/js/views/navigationView',\n    'core/js/accessibility',\n    'core/js/offlineStorage',\n    'core/js/logging',\n    'core/js/device',\n    'core/js/drawer',\n    'core/js/notify',\n    'core/js/popupManager',\n    'core/js/router',\n    'core/js/models/lockingModel',\n    'core/js/helpers',\n    'plugins'\n], function (Adapt, AdaptCollection, StartController, ArticleModel, BlockModel, ConfigModel, ContentObjectModel, ComponentModel, CourseModel, QuestionModel, NavigationView) {\n\n    // Append loading template and show\n    window.Handlebars = _.extend(require(\"handlebars\"), window.Handlebars);\n\n    var template = Handlebars.templates['loading'];\n    $('#wrapper').append(template());\n\n    Adapt.config = new ConfigModel(null, {url: \"course/config.json\", reset:true});\n    Adapt.config.on({\n        'change:_activeLanguage': onLanguageChange,\n        'change:_defaultDirection': onDirectionChange\n    });\n\n    // This function is called anytime a course object is loaded\n    // Once all course files are loaded trigger events and call Adapt.initialize\n    Adapt.checkDataIsLoaded = function(newLanguage) {\n        if (Adapt.contentObjects.models.length > 0\n            && Adapt.articles.models.length > 0\n            && Adapt.blocks.models.length > 0\n            && Adapt.components.models.length > 0\n            && Adapt.course.get('_id')) {\n\n            configureInview();\n\n            mapAdaptIdsToObjects();\n\n            if (typeof Adapt.course.get('_buttons').submit !== 'undefined') {\n                // Backwards compatibility with v1.x\n                var oldButtons = Adapt.course.get('_buttons');\n                var buttons = [];\n\n                for (var key in oldButtons) {\n                    buttons['_' + key] = {\n                        buttonText: oldButtons[key],\n                        ariaLabel: oldButtons[key]\n                    };\n                }\n\n                // HACK - Append other missing values\n                buttons['_showFeedback'] = {\n                    buttonText: 'Show feedback',\n                    ariaLabel: 'Show feedback'\n                };\n\n                // Replace the existing property\n                Adapt.course.set('_buttons', buttons);\n            }\n\n            Adapt.log.debug('Firing app:dataLoaded');\n\n            try {\n                Adapt.trigger('app:dataLoaded');// Triggered to setup model connections in AdaptModel.js\n            } catch(e) {\n                Adapt.log.error('Error during app:dataLoading trigger', e);\n            }\n\n            Adapt.setupMapping();\n\n            Adapt.wait.queue(function() {\n                triggerDataReady(newLanguage);\n            });\n\n        }\n    };\n\n    function triggerDataReady(newLanguage) {\n        if (newLanguage) {\n\n            Adapt.trigger('app:languageChanged', newLanguage);\n\n            _.defer(function() {\n                var startController = new StartController();\n                var hash = '#/';\n\n                if (startController.isEnabled()) {\n                    hash = startController.getStartHash(true);\n                }\n\n                Backbone.history.navigate(hash, { trigger: true, replace: true });\n            });\n        }\n\n        Adapt.log.debug('Firing app:dataReady');\n\n        try {\n            Adapt.trigger('app:dataReady');\n        } catch(e) {\n            Adapt.log.error('Error during app:dataReady trigger', e);\n        }\n\n        Adapt.wait.queue(triggerInitialize);\n\n    }\n\n    function triggerInitialize() {\n        Adapt.log.debug('Calling Adapt.initialize');\n\n        addNavigationBar();\n\n        Adapt.initialize();\n\n        Adapt.off('adaptCollection:dataLoaded courseModel:dataLoaded');\n    }\n\n    function addNavigationBar() {\n\n        var adaptConfig = Adapt.course.get(\"_navigation\");\n\n        if (adaptConfig && adaptConfig._isDefaultNavigationDisabled) {\n            Adapt.trigger(\"navigation:initialize\");\n            return;\n        }\n\n        Adapt.navigation = new NavigationView();// This should be triggered after 'app:dataReady' as plugins might want to manipulate the navigation\n\n    }\n\n    function configureInview() {\n\n        var adaptConfig = Adapt.config.get(\"_inview\");\n\n        var allowScrollOver = (adaptConfig && adaptConfig._allowScrollOver === false ? false : true);\n\n        $.inview.config({\n            allowScrollOver: allowScrollOver\n        });\n\n    }\n\n    function mapAdaptIdsToObjects () {\n        Adapt.contentObjects._byAdaptID = Adapt.contentObjects.groupBy(\"_id\");\n        Adapt.articles._byAdaptID = Adapt.articles.groupBy(\"_id\");\n        Adapt.blocks._byAdaptID = Adapt.blocks.groupBy(\"_id\");\n        Adapt.components._byAdaptID = Adapt.components.groupBy(\"_id\");\n    }\n\n    // This function is called when the config model triggers 'configModel:loadCourseData'\n    // Once the config model is loaded get the course files\n    // This enables plugins to tap in before the course files are loaded & also to change the default language\n    Adapt.loadCourseData = function(newLanguage) {\n        Adapt.on('adaptCollection:dataLoaded courseModel:dataLoaded', function() {\n            Adapt.checkDataIsLoaded(newLanguage);\n        });\n\n        // All code that needs to run before adapt starts should go here\n        var language = Adapt.config.get('_activeLanguage');\n\n        var courseFolder = \"course/\" + language +\"/\";\n\n        $('html').attr(\"lang\", language);\n\n        Adapt.course = new CourseModel(null, {url:courseFolder + \"course.json\", reset:true});\n\n        Adapt.contentObjects = new AdaptCollection(null, {\n            model: ContentObjectModel,\n            url: courseFolder +\"contentObjects.json\"\n        });\n\n        Adapt.articles = new AdaptCollection(null, {\n            model: ArticleModel,\n            url: courseFolder + \"articles.json\"\n        });\n\n        Adapt.blocks = new AdaptCollection(null, {\n            model: BlockModel,\n            url: courseFolder + \"blocks.json\"\n        });\n\n        Adapt.components = new AdaptCollection(null, {\n            model: function(json) {\n\n                //use view+model object\n                var ViewModelObject = Adapt.componentStore[json._component];\n\n                if(!ViewModelObject) {\n                    throw new Error(json._component + ' component not found. Is it installed and included?');\n                }\n\n                //if model defined for component use component model\n                if (ViewModelObject.model) {\n                    return new ViewModelObject.model(json);\n                }\n\n                var View = ViewModelObject.view || ViewModelObject;\n                //if question type use question model\n                if (View._isQuestionType) {\n                    return new QuestionModel(json);\n                }\n\n                //otherwise use component model\n                return new ComponentModel(json);\n            },\n            url: courseFolder + \"components.json\"\n        });\n    };\n\n    function onLanguageChange(model, language) {\n        Adapt.offlineStorage.set('lang', language);\n        Adapt.loadCourseData(language);\n    }\n\n    function onDirectionChange(model, direction) {\n        if (direction === 'rtl') {\n            $('html').removeClass('dir-ltr').addClass('dir-rtl');\n        } else {\n            $('html').removeClass('dir-rtl').addClass('dir-ltr');\n        }\n    }\n\n    /**\n    * Before we actually go to load the course data, we first need to check to see if a language has been set\n    * If it has we can go ahead and start loading; if it hasn't, apply the defaultLanguage from config.json\n    */\n    function onLoadCourseData() {\n        if (Adapt.config.get('_activeLanguage')) {\n            Adapt.loadCourseData();\n        } else {\n            Adapt.config.set('_activeLanguage', Adapt.config.get('_defaultLanguage'));\n        }\n    }\n\n    // Events that are triggered by the main Adapt content collections and models\n    Adapt.once('configModel:loadCourseData', onLoadCourseData);\n});\n\ndefine(\"core/js/app\", function(){});\n\n"
  ]
}